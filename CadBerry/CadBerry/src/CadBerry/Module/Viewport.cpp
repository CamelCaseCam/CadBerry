#include <cdbpch.h>
#include "Viewport.h"
#include "CadBerry/Log.h"
#include "CadBerry/Module/Module.h"
#include "CadBerry/Application.h"
#include "CadBerry/BuildEngine/BuildDialog.h"
#include "CadBerry/DNAVis/DisplayDNA.h"
#include "CadBerry/RenderUtils/RichText.h"
#include "CadBerry/Rendering/Utils/Utils.h"
#include "CadBerry/RenderUtils/InputVector.h"

#include <GLFW/glfw3.h>

#include "imgui.h"
#include "misc/cpp/imgui_stdlib.h"

namespace CDB
{
	DNAVisualization Vis;
	void ViewportLayer::OnAttach()
	{
		Vis = DNAVisualization("AAAAATTTAATATTTATTTATATATATATTTTATATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", { {1, 6, "Test region"}, {9, 15, "Test region 2"}, {16, 25, "Test region 2"} });
	}

	void ViewportLayer::OnImGuiRender()
	{
		ImGuiIO& io = ImGui::GetIO();
		ImGuiWindowFlags flags = ImGuiWindowFlags_MenuBar | ImGuiWindowFlags_NoDocking | ImGuiWindowFlags_NoBackground;

		const ImGuiViewport* viewport = ImGui::GetMainViewport();
		ImGui::SetNextWindowPos(viewport->WorkPos);
		ImGui::SetNextWindowSize(viewport->WorkSize);
		ImGui::SetNextWindowViewport(viewport->ID);
		flags |= ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove;
		flags |= ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus;

		ImGui::Begin("CadBerry Editor window", NULL, flags);

		ImGuiID dockspace_id = ImGui::GetID("MyDockSpace");
		ImGui::DockSpace(dockspace_id, ImVec2(0.0f, 0.0f), ImGuiDockNodeFlags_PassthruCentralNode);

		if (ImGui::BeginMenuBar())
		{
			if (ImGui::BeginMenu("Project"))
			{
				bool NewProject = false;
				bool OpenSettingsWindow = false;
				bool BuildProject = false;
				ImGui::MenuItem("New Project", NULL, &NewProject);
				if (NewProject)
				{
					Application::Get().NewProj = true;
					Application::Get().ShouldExit = true;    //this will make us exit the editor window and open a project creation window
				}
				ImGui::MenuItem("Settings", NULL, &OpenSettingsWindow);

				if (OpenSettingsWindow)
					OpenSettings = true;

				ImGui::MenuItem("Build", NULL, &BuildProject);
				if (BuildProject)
				{
					Application::Get().ShowBuildWindow = true;
				}

				ImGui::EndMenu();
			}
			
			
			if (ImGui::BeginMenu("Windows"))
			{
				for (Module* module : Application::Get().Modules)
				{
					std::string* s = module->GetViewportNames();
					bool CreateWindow = false;
					for (int i = 0; i < module->NumViewports; ++i)
					{
						ImGui::MenuItem(s[i].c_str(), NULL, &CreateWindow);
						if (CreateWindow)
						{
							Viewport* NewViewport = module->CreateViewport(s[i]);
							Application::Get().AddViewport(NewViewport);
							NewViewport->Start();
							CreateWindow = false;
						}
					}
				}
				ImGui::EndMenu();
			}

			ImGui::EndMenuBar();
		}

		ImGui::End();

		if (OpenSettings)
		{
			ImGui::Begin("Settings", &OpenSettings);
			SettingsWindow();
			ImGui::End();
		}

		Viewport* ToBeDeleted = nullptr;
		for (Viewport* viewport : OpenViewports)
		{
			viewport->Update(io.DeltaTime);
			if (viewport->Background) continue;

			ImGui::Begin(viewport->Name.c_str(), &viewport->IsOpen);
			viewport->GUIDraw();
			ImGui::End();
			if (!viewport->IsOpen)    //If the user has closed the viewport, mark that viewport to be deleted. 
			{
				ToBeDeleted = viewport;    //Since this is called every frame, it's impossible for the user to close more than one viewport. 
				viewport->OnClose();
			}
		}

		if (ToBeDeleted != nullptr)
		{
			OpenViewports.erase(std::remove(OpenViewports.begin(), OpenViewports.end(), ToBeDeleted), OpenViewports.end());
			delete ToBeDeleted;
		}
	}

	void ViewportLayer::Draw()
	{
		for (Viewport* viewport : OpenViewports)
		{
			viewport->Draw();
		}
	}

	ViewportLayer::~ViewportLayer()
	{
		for (Viewport* vp : OpenViewports)
		{
			vp->OnClose();
			delete vp;
		}
	}

	void ViewportLayer::AddViewport(Viewport* viewport)
	{
		OpenViewports.push_back(viewport);
	}

	Viewport::~Viewport()
	{

	}


	/*
	CadBerry's settings window. Here's all our settings:
	 - Project name
	 - Project precompilation directory
	 - Precompile files
	 - Project precompilation interval

	 Build settings:
	 - Should CadBerry maintain an entry point?
	 A little bit on entry points:
	 Instead of asking what file you want to use as an entry point, CadBerry will generate a gil file with the name "¬CadBerryAutogeneratedEntryPoint@ProjectName@CadBerryVersion". 
	 Because of the ¬ character, it's impossible to import this file from inside a GIL file

	 If no entry point:
	 - Path to entry point 
	 
	 If entry point:
	 - Target organism
	 - Entry sequences

	*/
	void ViewportLayer::SettingsWindow()
	{
		Project* proj = CDB::Application::Get().OpenProject.raw();

		ImGui::InputText("Project name", &proj->Name);
		ImGui::Spacing();
		ImGui::Spacing();

		//Precompilation
		ImGui::Checkbox("Precompile files", &proj->PrecompileFiles);

		if (proj->PrecompileFiles)
		{
			ImGui::InputFloat("Precompilation interval", &proj->PrecompilationInterval);
			ImGui::InputText("Precompilation directory", &proj->PreBuildDir);
		}

		ImGui::Spacing();
		ImGui::Spacing();
		ImGui::Checkbox("Create entry point", &proj->MaintainEntryPoint);

		if (proj->MaintainEntryPoint)
		{
			ImGui::InputText("Target organism", &proj->TargetOrganism);
			ImGui::Spacing();
			InputStringVector("Sequences to compile", proj->EntrySequences, "sequence", "Sequence name");
		}
		else
		{
			ImGui::InputText("Relative path to project entry point", &proj->PathToEntryPoint);
		}

	}
}