/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "RNAstructureBackendCalculator.h"


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_new_1RNAstructureBackendCalculator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RNAstructureBackendCalculator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RNAstructureBackendCalculator *)new RNAstructureBackendCalculator();
  *(RNAstructureBackendCalculator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_delete_1RNAstructureBackendCalculator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1loadSingleRNA_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jint jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  RNAInputType arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = (RNAInputType)jarg4; 
  result = (arg1)->loadSingleRNA(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1loadSingleRNA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->loadSingleRNA(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1loadDoubleRNA_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jint jarg5) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  RNAInputType arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  arg5 = (RNAInputType)jarg5; 
  result = (arg1)->loadDoubleRNA(arg2,arg3,arg4,arg5);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1loadDoubleRNA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->loadDoubleRNA(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildAllSubDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->buildAllSubDataStructure(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getSuboptimalAbsoluteDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (double)(arg1)->getSuboptimalAbsoluteDiff();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getSuboptimalPercentDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (float)(arg1)->getSuboptimalPercentDiff();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runAllSub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jdouble jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  float arg3 ;
  double arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  arg4 = (double)jarg4; 
  result = (arg1)->runAllSub(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildAccessFoldDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->buildAccessFoldDataStructure(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runAccessFold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jint jarg4, jdouble jarg5, jint jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  float arg3 ;
  int arg4 ;
  double arg5 ;
  int arg6 ;
  bool arg7 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (arg1)->runAccessFold(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildDuplexFoldDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->buildDuplexFoldDataStructure(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runDuplexFold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (arg1)->runDuplexFold(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildBifoldDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->buildBifoldDataStructure(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runBifold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jint jarg4, jint jarg5, jboolean jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (arg1)->runBifold(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildBipartitionDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->buildBipartitionDataStructure(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runBipartition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->runBipartition(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildDynalignDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->buildDynalignDataStructure(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1clearDynalignAlignmentConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  (arg1)->clearDynalignAlignmentConstraints();
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getDynalignAlignmentConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getDynalignAlignmentConstraints();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getDynalignAlignmentWindowSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getDynalignAlignmentWindowSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getDynalignStructureWindowSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getDynalignStructureWindowSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1readDynalignAlignmentConstraintsFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->readDynalignAlignmentConstraintsFile(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1GetErrorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->GetErrorCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1GetFullErrorMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->GetFullErrorMessage();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runDynalign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jdouble jarg6, jint jarg7, jint jarg8, jint jarg9, jfloat jarg10, jboolean jarg11) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  double arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool arg11 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (double)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = jarg11 ? true : false; 
  result = (arg1)->runDynalign(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setDynalignAlignmentConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->setDynalignAlignmentConstraint(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1writeDynalignAlignmentConstraintsFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->writeDynalignAlignmentConstraintsFile(arg2);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildEfn2DataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->buildEfn2DataStructure(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runEfn2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->runEfn2(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildFoldDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->buildFoldDataStructure(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getFoldWindowSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getFoldWindowSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runFold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (arg1)->runFold(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildMaxExpectDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->buildMaxExpectDataStructure(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runMaxExpect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4, jint jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->runMaxExpect(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1activateMultilign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  (arg1)->activateMultilign();
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1addMultilignTuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addMultilignTuple(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1deleteMultilignTuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->deleteMultilignTuple(arg2);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getMultilignCT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getMultilignCT(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getMultilignMaxPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getMultilignMaxPairs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getMultilignSequenceSetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getMultilignSequenceSetData();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getNumMultilignSequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getNumMultilignSequences();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runMultilign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jdouble jarg6, jboolean jarg7, jdouble jarg8, jint jarg9, jint jarg10, jstring jarg11, jboolean jarg12, jboolean jarg13) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  double arg8 ;
  int arg9 ;
  int arg10 ;
  std::string arg11 ;
  bool arg12 ;
  bool arg13 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (double)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  if(!jarg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg11_pstr = (const char *)jenv->GetStringUTFChars(jarg11, 0); 
  if (!arg11_pstr) return 0;
  (&arg11)->assign(arg11_pstr);
  jenv->ReleaseStringUTFChars(jarg11, arg11_pstr); 
  arg12 = jarg12 ? true : false; 
  arg13 = jarg13 ? true : false; 
  result = (arg1)->runMultilign(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildOligoScreenDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->buildOligoScreenDataStructure();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runOligoScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->runOligoScreen(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildOligoWalkDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->buildOligoWalkDataStructure(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1canFoldOligoOligo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->canFoldOligoOligo(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1canFoldOligoSelf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->canFoldOligoSelf(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1determineOligoMaximum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->determineOligoMaximum(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1foldOligo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jboolean jarg5, jstring jarg6) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  std::string arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  (arg1)->foldOligo(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getAllOligoData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getAllOligoData(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getDisplayedOligo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getDisplayedOligo(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getGraphRegionBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getGraphRegionBegin();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getGraphRegionEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getGraphRegionEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getMostStableOligo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getMostStableOligo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getOligoLabelData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getOligoLabelData(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getOligoTargetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getOligoTargetLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getOligoTargetSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getOligoTargetSequence();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runOligoWalk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jboolean jarg5, jint jarg6, jint jarg7, jstring jarg8, jint jarg9, jint jarg10) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  int arg3 ;
  std::string arg4 ;
  bool arg5 ;
  int arg6 ;
  int arg7 ;
  std::string arg8 ;
  int arg9 ;
  int arg10 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0); 
  if (!arg8_pstr) return 0;
  (&arg8)->assign(arg8_pstr);
  jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  result = (arg1)->runOligoWalk(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildPartitionDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->buildPartitionDataStructure(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runPartition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->runPartition(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildProbKnotDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->buildProbKnotDataStructure(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runPseudoknotPrediction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->runPseudoknotPrediction(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildRefoldDynalignDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->buildRefoldDynalignDataStructure(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runDynalignRefold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (arg1)->runDynalignRefold(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildRefoldSingleDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->buildRefoldSingleDataStructure(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getRefoldWindowSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getRefoldWindowSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runRefold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->runRefold(arg2,arg3,arg4,arg5);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildRemovePseudoknotsDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->buildRemovePseudoknotsDataStructure(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runPseudoknotRemoval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->runPseudoknotRemoval(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getSequenceComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getSequenceComment();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getSequenceData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getSequenceData();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getSequenceTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getSequenceTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1readSequenceData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->readSequenceData(arg2);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSequenceComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSequenceComment(arg2);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSequenceData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSequenceData(arg2);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSequenceTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSequenceTitle(arg2);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1writeFastaFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->writeFastaFile(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1writeSequenceFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->writeSequenceFile(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1buildStochasticDataStructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->buildStochasticDataStructure(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runStochastic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->runStochastic(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1activateTurboFold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  (arg1)->activateTurboFold();
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1addTurboFoldTuple_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->addTurboFoldTuple(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1addTurboFoldTuple_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addTurboFoldTuple(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1deleteTurboFoldTuple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->deleteTurboFoldTuple(arg2);
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getNumTurboFoldSequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getNumTurboFoldSequences();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getTurboFoldCT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTurboFoldCT(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getTurboFoldSaveFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTurboFoldSaveFile(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getTurboFoldSequenceSetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getTurboFoldSequenceSetData();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runTurboFoldMaximumExpectedAccuracy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdouble jarg4, jint jarg5, jint jarg6, jdouble jarg7, jstring jarg8) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  std::string arg8 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0); 
  if (!arg8_pstr) return 0;
  (&arg8)->assign(arg8_pstr);
  jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  result = (arg1)->runTurboFoldMaximumExpectedAccuracy(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runTurboFoldMaximumExpectedAccuracy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdouble jarg4, jint jarg5, jint jarg6, jdouble jarg7) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->runTurboFoldMaximumExpectedAccuracy(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runTurboFoldPseudoknot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string arg6 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (arg1)->runTurboFoldPseudoknot(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runTurboFoldPseudoknot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->runTurboFoldPseudoknot(arg2,arg3,arg4,arg5);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runTurboFoldThreshold_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdouble jarg4, jstring jarg5) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  std::string arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (arg1)->runTurboFoldThreshold(arg2,arg3,arg4,arg5);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1runTurboFoldThreshold_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdouble jarg4) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (arg1)->runTurboFoldThreshold(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1clearFoldingConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearFoldingConstraints(arg2);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getFoldingConstraints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getFoldingConstraints(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getMaxConstraintIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getMaxConstraintIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getMaxLoop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getMaxLoop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getMaxPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getMaxPair();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (double)(arg1)->getTemperature();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1readFoldingConstraintsFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (arg1)->readFoldingConstraintsFile(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setCleavedNucleotide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->setCleavedNucleotide(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setDoubleStrandedNucleotide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->setDoubleStrandedNucleotide(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setForcedHelix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->setForcedHelix(arg2,arg3,arg4,arg5);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setMaxLoop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxLoop(arg2);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setMaxPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxPair(arg2);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setModifiedNucleotide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->setModifiedNucleotide(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setProhibitedHelix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->setProhibitedHelix(arg2,arg3,arg4,arg5);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSHAPEFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSHAPEFile(arg2);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSHAPEParam1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSHAPEParam1(arg2);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSHAPEParam2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSHAPEParam2(arg2);
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSHAPEType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSHAPEType(arg2);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSingleStrandedNucleotide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->setSingleStrandedNucleotide(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTemperature(arg2);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1writeFoldingConstraintsFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (arg1)->writeFoldingConstraintsFile(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getProgressNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (int)(arg1)->getProgressNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getStructureType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getStructureType();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1cancelOperation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  (arg1)->cancelOperation();
}


SWIGEXPORT jboolean JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1wasCanceled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (bool)(arg1)->wasCanceled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setSaveFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSaveFile(arg2);
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getSaveFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RNAstructureBackendCalculator *arg1 = (RNAstructureBackendCalculator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RNAstructureBackendCalculator **)&jarg1; 
  result = (arg1)->getSaveFile();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1setEnvVar(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)RNAstructureBackendCalculator::setEnvVar((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getEnvVar(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = RNAstructureBackendCalculator::getEnvVar((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ur_1rna_RNAstructureUI_RNAstructureBackendCalculatorProxyJNI_RNAstructureBackendCalculator_1getVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = RNAstructureBackendCalculator::getVersion();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

