/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CTCommentProvider swig_types[0]
#define SWIGTYPE_p_DotBracketFormat swig_types[1]
#define SWIGTYPE_p_Dynalign_object swig_types[2]
#define SWIGTYPE_p_HybridRNA swig_types[3]
#define SWIGTYPE_p_Multilign_object swig_types[4]
#define SWIGTYPE_p_Oligowalk_object swig_types[5]
#define SWIGTYPE_p_ProbScan swig_types[6]
#define SWIGTYPE_p_ProgressHandler swig_types[7]
#define SWIGTYPE_p_RNA swig_types[8]
#define SWIGTYPE_p_RestraintType swig_types[9]
#define SWIGTYPE_p_RsampleData swig_types[10]
#define SWIGTYPE_p_Thermodynamics swig_types[11]
#define SWIGTYPE_p_TwoRNA swig_types[12]
#define SWIGTYPE_p_allocator_type swig_types[13]
#define SWIGTYPE_p_bp swig_types[14]
#define SWIGTYPE_p_char swig_types[15]
#define SWIGTYPE_p_datatable swig_types[16]
#define SWIGTYPE_p_difference_type swig_types[17]
#define SWIGTYPE_p_double swig_types[18]
#define SWIGTYPE_p_first_type swig_types[19]
#define SWIGTYPE_p_hp swig_types[20]
#define SWIGTYPE_p_il swig_types[21]
#define SWIGTYPE_p_int swig_types[22]
#define SWIGTYPE_p_mb swig_types[23]
#define SWIGTYPE_p_mb_element swig_types[24]
#define SWIGTYPE_p_p_PyObject swig_types[25]
#define SWIGTYPE_p_second_type swig_types[26]
#define SWIGTYPE_p_size_type swig_types[27]
#define SWIGTYPE_p_std__allocatorT_bp_t swig_types[28]
#define SWIGTYPE_p_std__allocatorT_hp_t swig_types[29]
#define SWIGTYPE_p_std__allocatorT_il_t swig_types[30]
#define SWIGTYPE_p_std__allocatorT_mb_t swig_types[31]
#define SWIGTYPE_p_std__allocatorT_std__pairT_int_int_t_t swig_types[32]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[33]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t swig_types[34]
#define SWIGTYPE_p_std__invalid_argument swig_types[35]
#define SWIGTYPE_p_std__pairT_int_int_t swig_types[36]
#define SWIGTYPE_p_std__string swig_types[37]
#define SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t swig_types[38]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[39]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[40]
#define SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t swig_types[41]
#define SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t swig_types[42]
#define SWIGTYPE_p_std__vectorT_mb_element_std__allocatorT_mb_element_t_t swig_types[43]
#define SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t swig_types[44]
#define SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t swig_types[45]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[46]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t swig_types[47]
#define SWIGTYPE_p_structure swig_types[48]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[49]
#define SWIGTYPE_p_value_type swig_types[50]
static swig_type_info *swig_types[52];
static swig_module_info swig_module = {swig_types, 51, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _RNAstructure_wrap.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__RNAstructure_wrap

#else
#  define SWIG_init    init_RNAstructure_wrap

#endif
#define SWIG_name    "_RNAstructure_wrap"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


 /* Includes the header in the wrapper code */
 #include "../RNA_class/thermodynamics.h"
 #include "../RNA_class/RNA.h"
 #include "../RNA_class/HybridRNA.h"
 #include "../RNA_class/TwoRNA.h"
 #include "../RNA_class/Dynalign_object.h"
 #include "../RNA_class/Multilign_object.h"
 #include "../RNA_class/Oligowalk_object.h"
 #include "../RNA_class/ProbScan.h"
 

#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< int, int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "int" " >";
	  }
	};
      }
    

#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::pair< int,int >, std::allocator< std::pair< int,int > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< int,int >" "," "std::allocator< std::pair< int,int > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__iterator(std::vector< std::pair< int,int > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____nonzero__(std::vector< std::pair< int,int > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____bool__(std::vector< std::pair< int,int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::pair< int,int > >::size_type std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____len__(std::vector< std::pair< int,int > > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getslice__(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setslice____SWIG_0(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >());
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setslice____SWIG_1(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::difference_type j,std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delslice__(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delitem____SWIG_0(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getitem____SWIG_0(std::vector< std::pair< int,int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::difference_type id = i;
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_0(std::vector< std::pair< int,int > > *self,PySliceObject *slice,std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::difference_type id = i;
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_1(std::vector< std::pair< int,int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::difference_type id = i;
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delitem____SWIG_1(std::vector< std::pair< int,int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::difference_type id = i;
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::pair< int,int > >::value_type const &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getitem____SWIG_1(std::vector< std::pair< int,int > > const *self,std::vector< std::pair< int,int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_2(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::difference_type i,std::vector< std::pair< int,int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::pair< int,int > >::value_type std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__pop(std::vector< std::pair< int,int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__append(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::pair< int,int > >::iterator std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__erase__SWIG_0(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::pair< int,int > >::iterator std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__erase__SWIG_1(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::iterator first,std::vector< std::pair< int,int > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::pair< int,int > >::iterator std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__insert__SWIG_0(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::iterator pos,std::vector< std::pair< int,int > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__insert__SWIG_1(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::iterator pos,std::vector< std::pair< int,int > >::size_type n,std::vector< std::pair< int,int > >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< std::string,std::allocator< std::string > >, std::allocator< std::vector< std::string,std::allocator< std::string > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< std::string,std::allocator< std::string > >" "," "std::allocator< std::vector< std::string,std::allocator< std::string > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__iterator(std::vector< std::vector< std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____nonzero__(std::vector< std::vector< std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____bool__(std::vector< std::vector< std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< std::string > >::size_type std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____len__(std::vector< std::vector< std::string > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____getslice__(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::difference_type i,std::vector< std::vector< std::string > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::difference_type i,std::vector< std::vector< std::string > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setslice____SWIG_1(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::difference_type i,std::vector< std::vector< std::string > >::difference_type j,std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____delslice__(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::difference_type i,std::vector< std::vector< std::string > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< std::string > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::difference_type id = i;
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< std::string > > *self,PySliceObject *slice,std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::difference_type id = i;
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< std::string > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::difference_type id = i;
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< std::string > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::difference_type id = i;
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< std::string > >::value_type const &std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< std::string > > const *self,std::vector< std::vector< std::string > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::difference_type i,std::vector< std::vector< std::string > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< std::string > >::value_type std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__pop(std::vector< std::vector< std::string > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__append(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< std::string > >::iterator std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_0(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< std::string > >::iterator std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_1(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::iterator first,std::vector< std::vector< std::string > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< std::string > >::iterator std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__insert__SWIG_0(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::iterator pos,std::vector< std::vector< std::string > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__insert__SWIG_1(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::iterator pos,std::vector< std::vector< std::string > >::size_type n,std::vector< std::vector< std::string > >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}





SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


  namespace swig {
    template <>  struct traits< hp > {
      typedef pointer_category category;
      static const char* type_name() { return"hp"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< hp, std::allocator< hp > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "hp" "," "std::allocator< hp >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_hairpin_t_Sg__iterator(std::vector< hairpin_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_hairpin_t_Sg____nonzero__(std::vector< hairpin_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_hairpin_t_Sg____bool__(std::vector< hairpin_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< hp >::size_type std_vector_Sl_hairpin_t_Sg____len__(std::vector< hairpin_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< hp,std::allocator< hp > > *std_vector_Sl_hairpin_t_Sg____getslice__(std::vector< hairpin_t > *self,std::vector< hp >::difference_type i,std::vector< hp >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg____setslice____SWIG_0(std::vector< hairpin_t > *self,std::vector< hp >::difference_type i,std::vector< hp >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< hp,std::allocator< hp > >());
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg____setslice____SWIG_1(std::vector< hairpin_t > *self,std::vector< hp >::difference_type i,std::vector< hp >::difference_type j,std::vector< hp,std::allocator< hp > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg____delslice__(std::vector< hairpin_t > *self,std::vector< hp >::difference_type i,std::vector< hp >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg____delitem____SWIG_0(std::vector< hairpin_t > *self,std::vector< hp >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< hp,std::allocator< hp > > *std_vector_Sl_hairpin_t_Sg____getitem____SWIG_0(std::vector< hairpin_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hp,std::allocator< hp > >::difference_type id = i;
      std::vector< hp,std::allocator< hp > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg____setitem____SWIG_0(std::vector< hairpin_t > *self,PySliceObject *slice,std::vector< hp,std::allocator< hp > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hp,std::allocator< hp > >::difference_type id = i;
      std::vector< hp,std::allocator< hp > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg____setitem____SWIG_1(std::vector< hairpin_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hp,std::allocator< hp > >::difference_type id = i;
      std::vector< hp,std::allocator< hp > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg____delitem____SWIG_1(std::vector< hairpin_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hp,std::allocator< hp > >::difference_type id = i;
      std::vector< hp,std::allocator< hp > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< hp >::value_type const &std_vector_Sl_hairpin_t_Sg____getitem____SWIG_1(std::vector< hairpin_t > const *self,std::vector< hp >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg____setitem____SWIG_2(std::vector< hairpin_t > *self,std::vector< hp >::difference_type i,std::vector< hp >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< hp >::value_type std_vector_Sl_hairpin_t_Sg__pop(std::vector< hairpin_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< hp,std::allocator< hp > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg__append(std::vector< hairpin_t > *self,std::vector< hp >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< hp >::iterator std_vector_Sl_hairpin_t_Sg__erase__SWIG_0(std::vector< hairpin_t > *self,std::vector< hp >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< hp >::iterator std_vector_Sl_hairpin_t_Sg__erase__SWIG_1(std::vector< hairpin_t > *self,std::vector< hp >::iterator first,std::vector< hp >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< hp >::iterator std_vector_Sl_hairpin_t_Sg__insert__SWIG_0(std::vector< hairpin_t > *self,std::vector< hp >::iterator pos,std::vector< hp >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_hairpin_t_Sg__insert__SWIG_1(std::vector< hairpin_t > *self,std::vector< hp >::iterator pos,std::vector< hp >::size_type n,std::vector< hp >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< il > {
      typedef pointer_category category;
      static const char* type_name() { return"il"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< il, std::allocator< il > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "il" "," "std::allocator< il >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_internal_loop_t_Sg__iterator(std::vector< internal_loop_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_internal_loop_t_Sg____nonzero__(std::vector< internal_loop_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_internal_loop_t_Sg____bool__(std::vector< internal_loop_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< il >::size_type std_vector_Sl_internal_loop_t_Sg____len__(std::vector< internal_loop_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< il,std::allocator< il > > *std_vector_Sl_internal_loop_t_Sg____getslice__(std::vector< internal_loop_t > *self,std::vector< il >::difference_type i,std::vector< il >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg____setslice____SWIG_0(std::vector< internal_loop_t > *self,std::vector< il >::difference_type i,std::vector< il >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< il,std::allocator< il > >());
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg____setslice____SWIG_1(std::vector< internal_loop_t > *self,std::vector< il >::difference_type i,std::vector< il >::difference_type j,std::vector< il,std::allocator< il > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg____delslice__(std::vector< internal_loop_t > *self,std::vector< il >::difference_type i,std::vector< il >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg____delitem____SWIG_0(std::vector< internal_loop_t > *self,std::vector< il >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< il,std::allocator< il > > *std_vector_Sl_internal_loop_t_Sg____getitem____SWIG_0(std::vector< internal_loop_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< il,std::allocator< il > >::difference_type id = i;
      std::vector< il,std::allocator< il > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg____setitem____SWIG_0(std::vector< internal_loop_t > *self,PySliceObject *slice,std::vector< il,std::allocator< il > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< il,std::allocator< il > >::difference_type id = i;
      std::vector< il,std::allocator< il > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg____setitem____SWIG_1(std::vector< internal_loop_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< il,std::allocator< il > >::difference_type id = i;
      std::vector< il,std::allocator< il > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg____delitem____SWIG_1(std::vector< internal_loop_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< il,std::allocator< il > >::difference_type id = i;
      std::vector< il,std::allocator< il > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< il >::value_type const &std_vector_Sl_internal_loop_t_Sg____getitem____SWIG_1(std::vector< internal_loop_t > const *self,std::vector< il >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg____setitem____SWIG_2(std::vector< internal_loop_t > *self,std::vector< il >::difference_type i,std::vector< il >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< il >::value_type std_vector_Sl_internal_loop_t_Sg__pop(std::vector< internal_loop_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< il,std::allocator< il > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg__append(std::vector< internal_loop_t > *self,std::vector< il >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< il >::iterator std_vector_Sl_internal_loop_t_Sg__erase__SWIG_0(std::vector< internal_loop_t > *self,std::vector< il >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< il >::iterator std_vector_Sl_internal_loop_t_Sg__erase__SWIG_1(std::vector< internal_loop_t > *self,std::vector< il >::iterator first,std::vector< il >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< il >::iterator std_vector_Sl_internal_loop_t_Sg__insert__SWIG_0(std::vector< internal_loop_t > *self,std::vector< il >::iterator pos,std::vector< il >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_internal_loop_t_Sg__insert__SWIG_1(std::vector< internal_loop_t > *self,std::vector< il >::iterator pos,std::vector< il >::size_type n,std::vector< il >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< mb > {
      typedef pointer_category category;
      static const char* type_name() { return"mb"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< mb, std::allocator< mb > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mb" "," "std::allocator< mb >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_multibranch_loop_t_Sg__iterator(std::vector< multibranch_loop_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_multibranch_loop_t_Sg____nonzero__(std::vector< multibranch_loop_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_multibranch_loop_t_Sg____bool__(std::vector< multibranch_loop_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< mb >::size_type std_vector_Sl_multibranch_loop_t_Sg____len__(std::vector< multibranch_loop_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< mb,std::allocator< mb > > *std_vector_Sl_multibranch_loop_t_Sg____getslice__(std::vector< multibranch_loop_t > *self,std::vector< mb >::difference_type i,std::vector< mb >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg____setslice____SWIG_0(std::vector< multibranch_loop_t > *self,std::vector< mb >::difference_type i,std::vector< mb >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< mb,std::allocator< mb > >());
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg____setslice____SWIG_1(std::vector< multibranch_loop_t > *self,std::vector< mb >::difference_type i,std::vector< mb >::difference_type j,std::vector< mb,std::allocator< mb > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg____delslice__(std::vector< multibranch_loop_t > *self,std::vector< mb >::difference_type i,std::vector< mb >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg____delitem____SWIG_0(std::vector< multibranch_loop_t > *self,std::vector< mb >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< mb,std::allocator< mb > > *std_vector_Sl_multibranch_loop_t_Sg____getitem____SWIG_0(std::vector< multibranch_loop_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mb,std::allocator< mb > >::difference_type id = i;
      std::vector< mb,std::allocator< mb > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg____setitem____SWIG_0(std::vector< multibranch_loop_t > *self,PySliceObject *slice,std::vector< mb,std::allocator< mb > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mb,std::allocator< mb > >::difference_type id = i;
      std::vector< mb,std::allocator< mb > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg____setitem____SWIG_1(std::vector< multibranch_loop_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mb,std::allocator< mb > >::difference_type id = i;
      std::vector< mb,std::allocator< mb > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg____delitem____SWIG_1(std::vector< multibranch_loop_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< mb,std::allocator< mb > >::difference_type id = i;
      std::vector< mb,std::allocator< mb > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< mb >::value_type const &std_vector_Sl_multibranch_loop_t_Sg____getitem____SWIG_1(std::vector< multibranch_loop_t > const *self,std::vector< mb >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg____setitem____SWIG_2(std::vector< multibranch_loop_t > *self,std::vector< mb >::difference_type i,std::vector< mb >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< mb >::value_type std_vector_Sl_multibranch_loop_t_Sg__pop(std::vector< multibranch_loop_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< mb,std::allocator< mb > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg__append(std::vector< multibranch_loop_t > *self,std::vector< mb >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< mb >::iterator std_vector_Sl_multibranch_loop_t_Sg__erase__SWIG_0(std::vector< multibranch_loop_t > *self,std::vector< mb >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< mb >::iterator std_vector_Sl_multibranch_loop_t_Sg__erase__SWIG_1(std::vector< multibranch_loop_t > *self,std::vector< mb >::iterator first,std::vector< mb >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< mb >::iterator std_vector_Sl_multibranch_loop_t_Sg__insert__SWIG_0(std::vector< multibranch_loop_t > *self,std::vector< mb >::iterator pos,std::vector< mb >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_multibranch_loop_t_Sg__insert__SWIG_1(std::vector< multibranch_loop_t > *self,std::vector< mb >::iterator pos,std::vector< mb >::size_type n,std::vector< mb >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< bp > {
      typedef pointer_category category;
      static const char* type_name() { return"bp"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< bp, std::allocator< bp > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "bp" "," "std::allocator< bp >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_basestack_t_Sg__iterator(std::vector< basestack_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_basestack_t_Sg____nonzero__(std::vector< basestack_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_basestack_t_Sg____bool__(std::vector< basestack_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< bp >::size_type std_vector_Sl_basestack_t_Sg____len__(std::vector< basestack_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< bp,std::allocator< bp > > *std_vector_Sl_basestack_t_Sg____getslice__(std::vector< basestack_t > *self,std::vector< bp >::difference_type i,std::vector< bp >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg____setslice____SWIG_0(std::vector< basestack_t > *self,std::vector< bp >::difference_type i,std::vector< bp >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< bp,std::allocator< bp > >());
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg____setslice____SWIG_1(std::vector< basestack_t > *self,std::vector< bp >::difference_type i,std::vector< bp >::difference_type j,std::vector< bp,std::allocator< bp > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg____delslice__(std::vector< basestack_t > *self,std::vector< bp >::difference_type i,std::vector< bp >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg____delitem____SWIG_0(std::vector< basestack_t > *self,std::vector< bp >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< bp,std::allocator< bp > > *std_vector_Sl_basestack_t_Sg____getitem____SWIG_0(std::vector< basestack_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< bp,std::allocator< bp > >::difference_type id = i;
      std::vector< bp,std::allocator< bp > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg____setitem____SWIG_0(std::vector< basestack_t > *self,PySliceObject *slice,std::vector< bp,std::allocator< bp > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< bp,std::allocator< bp > >::difference_type id = i;
      std::vector< bp,std::allocator< bp > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg____setitem____SWIG_1(std::vector< basestack_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< bp,std::allocator< bp > >::difference_type id = i;
      std::vector< bp,std::allocator< bp > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg____delitem____SWIG_1(std::vector< basestack_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< bp,std::allocator< bp > >::difference_type id = i;
      std::vector< bp,std::allocator< bp > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< bp >::value_type const &std_vector_Sl_basestack_t_Sg____getitem____SWIG_1(std::vector< basestack_t > const *self,std::vector< bp >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg____setitem____SWIG_2(std::vector< basestack_t > *self,std::vector< bp >::difference_type i,std::vector< bp >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< bp >::value_type std_vector_Sl_basestack_t_Sg__pop(std::vector< basestack_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< bp,std::allocator< bp > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_basestack_t_Sg__append(std::vector< basestack_t > *self,std::vector< bp >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< bp >::iterator std_vector_Sl_basestack_t_Sg__erase__SWIG_0(std::vector< basestack_t > *self,std::vector< bp >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< bp >::iterator std_vector_Sl_basestack_t_Sg__erase__SWIG_1(std::vector< basestack_t > *self,std::vector< bp >::iterator first,std::vector< bp >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< bp >::iterator std_vector_Sl_basestack_t_Sg__insert__SWIG_0(std::vector< basestack_t > *self,std::vector< bp >::iterator pos,std::vector< bp >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_basestack_t_Sg__insert__SWIG_1(std::vector< basestack_t > *self,std::vector< bp >::iterator pos,std::vector< bp >::size_type n,std::vector< bp >::value_type const &x){ self->insert(pos, n, x); }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_incr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_decr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  ptrdiff_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_distance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_equal",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_advance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___ne__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___iadd__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___isub__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___add__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IntPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntPair")) SWIG_fail;
  result = (std::pair< int,int > *)new std::pair< int,int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntPair",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntPair" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntPair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntPair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntPair",&obj0)) SWIG_fail;
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntPair" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntPair" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntPair(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IntPair__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< int,int >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntPair__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntPair__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IntPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< int,int >::pair()\n"
    "    std::pair< int,int >::pair(int,int)\n"
    "    std::pair< int,int >::pair(std::pair< int,int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntPair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntPair_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPair_first_set" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntPair_first_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntPair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntPair_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPair_first_get" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  result = (int) ((arg1)->first);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntPair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntPair_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPair_second_set" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntPair_second_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntPair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntPair_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPair_second_get" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  result = (int) ((arg1)->second);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntPair" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_int_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PairVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_iterator" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____nonzero__((std::vector< std::pair< int,int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___bool__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____bool__((std::vector< std::pair< int,int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___len__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____len__((std::vector< std::pair< int,int > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:PairVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___getslice__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector___getslice__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PairVector___getslice__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val3);
  try {
    result = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PairVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PairVector___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::difference_type arg3 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PairVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PairVector___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val3);
  {
    std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PairVector___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PairVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PairVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PairVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >::__setslice__(std::vector< std::pair< int,int > >::difference_type,std::vector< std::pair< int,int > >::difference_type)\n"
    "    std::vector< std::pair< int,int > >::__setslice__(std::vector< std::pair< int,int > >::difference_type,std::vector< std::pair< int,int > >::difference_type,std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:PairVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___delslice__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector___delslice__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PairVector___delslice__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector___delitem__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PairVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PairVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PairVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PairVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >::__delitem__(std::vector< std::pair< int,int > >::difference_type)\n"
    "    std::vector< std::pair< int,int > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector___getitem__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  try {
    result = (std::vector< std::pair< int,int > >::value_type *) &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____getitem____SWIG_1((std::vector< std::pair< int,int > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair< int,int > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PairVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PairVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PairVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::pair< int,int > >::__getitem__(std::vector< std::pair< int,int > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::difference_type arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PairVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector___setitem__" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::difference_type >(val2);
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::pair< int,int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_PairVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PairVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< int,int >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PairVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PairVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >::__setitem__(PySliceObject *,std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > const &)\n"
    "    std::vector< std::pair< int,int > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::pair< int,int > >::__setitem__(std::vector< std::pair< int,int > >::difference_type,std::vector< std::pair< int,int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_pop" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  try {
    result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PairVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_append" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairVector_append" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector_append" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__append(arg1,(std::pair< int,int > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PairVector")) SWIG_fail;
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PairVector",&obj0)) SWIG_fail;
  {
    std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairVector" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairVector" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >((std::vector< std::pair< int,int > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_empty" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (bool)((std::vector< std::pair< int,int > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_size" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PairVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_swap" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairVector_swap" "', argument " "2"" of type '" "std::vector< std::pair< int,int > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector_swap" "', argument " "2"" of type '" "std::vector< std::pair< int,int > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_begin" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_end" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_rbegin" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_rend" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_clear" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< int,int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::pair< int,int > >::allocator_type(static_cast< const std::vector< std::pair< int,int > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_int_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PairVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PairVector" "', argument " "1"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< int,int > >::size_type >(val1);
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_pop_back" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_resize" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector_resize" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< int,int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_erase" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::iterator arg2 ;
  std::vector< std::pair< int,int > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< int,int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PairVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_erase" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_erase" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_erase" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_PairVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_PairVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PairVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >::erase(std::vector< std::pair< int,int > >::iterator)\n"
    "    std::vector< std::pair< int,int > >::erase(std::vector< std::pair< int,int > >::iterator,std::vector< std::pair< int,int > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PairVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > >::size_type arg1 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PairVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PairVector" "', argument " "1"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< int,int > >::size_type >(val1);
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PairVector" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairVector" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >(arg1,(std::vector< std::pair< int,int > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PairVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PairVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PairVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< int,int >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PairVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PairVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >::vector()\n"
    "    std::vector< std::pair< int,int > >::vector(std::vector< std::pair< int,int > > const &)\n"
    "    std::vector< std::pair< int,int > >::vector(std::vector< std::pair< int,int > >::size_type)\n"
    "    std::vector< std::pair< int,int > >::vector(std::vector< std::pair< int,int > >::size_type,std::vector< std::pair< int,int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PairVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_push_back" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairVector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::pair< int,int > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_front" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (std::vector< std::pair< int,int > >::value_type *) &((std::vector< std::pair< int,int > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::pair< int,int > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_back" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = (std::vector< std::pair< int,int > >::value_type *) &((std::vector< std::pair< int,int > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::pair< int,int > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:PairVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_assign" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector_assign" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::size_type >(val2);
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PairVector_assign" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector_assign" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::pair< int,int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PairVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_resize" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector_resize" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::size_type >(val2);
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PairVector_resize" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector_resize" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::pair< int,int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PairVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< int,int >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PairVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PairVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >::resize(std::vector< std::pair< int,int > >::size_type)\n"
    "    std::vector< std::pair< int,int > >::resize(std::vector< std::pair< int,int > >::size_type,std::vector< std::pair< int,int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::iterator arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< int,int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PairVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_insert" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::pair< int,int > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< int,int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::iterator arg2 ;
  std::vector< std::pair< int,int > >::size_type arg3 ;
  std::vector< std::pair< int,int > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PairVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_insert" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< int,int > >::size_type >(val3);
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PairVector_insert" "', argument " "4"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairVector_insert" "', argument " "4"" of type '" "std::vector< std::pair< int,int > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::pair< int,int > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< int,int >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PairVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< int,int > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::pair< int,int >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PairVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PairVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< int,int > >::insert(std::vector< std::pair< int,int > >::iterator,std::vector< std::pair< int,int > >::value_type const &)\n"
    "    std::vector< std::pair< int,int > >::insert(std::vector< std::pair< int,int > >::iterator,std::vector< std::pair< int,int > >::size_type,std::vector< std::pair< int,int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:PairVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_reserve" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairVector_reserve" "', argument " "2"" of type '" "std::vector< std::pair< int,int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< int,int > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairVector_capacity" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  result = ((std::vector< std::pair< int,int > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PairVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PairVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairVector" "', argument " "1"" of type '" "std::vector< std::pair< int,int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< int,int > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PairVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StringVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:StringVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StringVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StringVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:StringVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StringVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StringVector")) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringVector",&obj0)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StringVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StringVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StringVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StringVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:StringVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StringVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StringVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StringVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StringVectorVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_iterator" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____nonzero__((std::vector< std::vector< std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___bool__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____bool__((std::vector< std::vector< std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___len__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____len__((std::vector< std::vector< std::string > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  std::vector< std::vector< std::string > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:StringVectorVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVectorVector___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *)std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  std::vector< std::vector< std::string > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVectorVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  std::vector< std::vector< std::string > >::difference_type arg3 ;
  std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StringVectorVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val3);
  {
    std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *ptr = (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StringVectorVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVectorVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVectorVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::string > >::__setslice__(std::vector< std::vector< std::string > >::difference_type,std::vector< std::vector< std::string > >::difference_type)\n"
    "    std::vector< std::vector< std::string > >::__setslice__(std::vector< std::vector< std::string > >::difference_type,std::vector< std::vector< std::string > >::difference_type,std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  std::vector< std::vector< std::string > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:StringVectorVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVectorVector___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVectorVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVectorVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *)std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVectorVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *ptr = (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVectorVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVectorVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVectorVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVectorVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVectorVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::string > >::__delitem__(std::vector< std::vector< std::string > >::difference_type)\n"
    "    std::vector< std::vector< std::string > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::string > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVectorVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< std::string > >::value_type *) &std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< std::string > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVectorVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVectorVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVectorVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::string > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< std::string > >::__getitem__(std::vector< std::vector< std::string > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVectorVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVectorVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVectorVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVectorVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVectorVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::string > >::__setitem__(PySliceObject *,std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > const &)\n"
    "    std::vector< std::vector< std::string > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< std::string > >::__setitem__(std::vector< std::vector< std::string > >::difference_type,std::vector< std::vector< std::string > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StringVectorVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_append" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__append(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVectorVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StringVectorVector")) SWIG_fail;
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVectorVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string,std::allocator< std::string > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringVectorVector",&obj0)) SWIG_fail;
  {
    std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *ptr = (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >((std::vector< std::vector< std::string,std::allocator< std::string > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_empty" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (bool)((std::vector< std::vector< std::string > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_size" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = ((std::vector< std::vector< std::string > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string,std::allocator< std::string > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StringVectorVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_swap" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::string,std::allocator< std::string > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_begin" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_end" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_rend" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< std::string,std::allocator< std::string > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = ((std::vector< std::vector< std::string > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::string > >::allocator_type(static_cast< const std::vector< std::vector< std::string > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVectorVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringVectorVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::string > >::size_type >(val1);
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVectorVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVectorVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::iterator arg2 ;
  std::vector< std::vector< std::string > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVectorVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringVectorVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringVectorVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVectorVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::string > >::erase(std::vector< std::vector< std::string > >::iterator)\n"
    "    std::vector< std::vector< std::string > >::erase(std::vector< std::vector< std::string > >::iterator,std::vector< std::vector< std::string > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_StringVectorVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > >::size_type arg1 ;
  std::vector< std::vector< std::string > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StringVectorVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::string > >::size_type >(val1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >(arg1,(std::vector< std::vector< std::string > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVectorVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StringVectorVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringVectorVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringVectorVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringVectorVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StringVectorVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::string > >::vector()\n"
    "    std::vector< std::vector< std::string > >::vector(std::vector< std::vector< std::string,std::allocator< std::string > > > const &)\n"
    "    std::vector< std::vector< std::string > >::vector(std::vector< std::vector< std::string > >::size_type)\n"
    "    std::vector< std::vector< std::string > >::vector(std::vector< std::vector< std::string > >::size_type,std::vector< std::vector< std::string > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StringVectorVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_push_back" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< std::string > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_front" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (std::vector< std::vector< std::string > >::value_type *) &((std::vector< std::vector< std::string > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_back" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (std::vector< std::vector< std::string > >::value_type *) &((std::vector< std::vector< std::string > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:StringVectorVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_assign" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector_assign" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::size_type >(val2);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< std::string > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVectorVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::size_type >(val2);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< std::string > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVectorVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVectorVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVectorVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::string > >::resize(std::vector< std::vector< std::string > >::size_type)\n"
    "    std::vector< std::vector< std::string > >::resize(std::vector< std::vector< std::string > >::size_type,std::vector< std::vector< std::string > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::iterator arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVectorVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::iterator arg2 ;
  std::vector< std::vector< std::string > >::size_type arg3 ;
  std::vector< std::vector< std::string > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StringVectorVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::string > >::size_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVectorVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVectorVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVectorVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::string > >::insert(std::vector< std::vector< std::string > >::iterator,std::vector< std::vector< std::string > >::value_type const &)\n"
    "    std::vector< std::vector< std::string > >::insert(std::vector< std::vector< std::string > >::iterator,std::vector< std::vector< std::string > >::size_type,std::vector< std::vector< std::string > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StringVectorVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_reserve" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVectorVector_reserve" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVectorVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVectorVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVectorVector_capacity" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = ((std::vector< std::vector< std::string > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringVectorVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StringVectorVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringVectorVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Thermodynamics__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 = (bool) (bool)true ;
  char *arg2 = (char *) (char *)NULL ;
  double arg3 = (double) (double)310.15 ;
  bool val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Thermodynamics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|OOO:new_Thermodynamics",&obj0,&obj1,&obj2)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_bool(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Thermodynamics" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Thermodynamics" "', argument " "2"" of type '" "char const *const""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Thermodynamics" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  result = (Thermodynamics *)new Thermodynamics(arg1,(char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Thermodynamics, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Thermodynamics__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Thermodynamics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Thermodynamics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Thermodynamics,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Thermodynamics" "', argument " "1"" of type '" "Thermodynamics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Thermodynamics" "', argument " "1"" of type '" "Thermodynamics const &""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  result = (Thermodynamics *)new Thermodynamics((Thermodynamics const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Thermodynamics, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Thermodynamics(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 3)) {
    int _v;
    if (argc <= 0) {
      return _wrap_new_Thermodynamics__SWIG_0(self, args);
    }
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Thermodynamics__SWIG_0(self, args);
      }
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_Thermodynamics__SWIG_0(self, args);
        }
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Thermodynamics__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Thermodynamics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Thermodynamics__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Thermodynamics'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Thermodynamics::Thermodynamics(bool const,char const *const,double const)\n"
    "    Thermodynamics::Thermodynamics(Thermodynamics const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_SetTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "temperature", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Thermodynamics_SetTemperature",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_SetTemperature" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Thermodynamics_SetTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (int)(arg1)->SetTemperature(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_GetTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_GetTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_GetTemperature" "', argument " "1"" of type '" "Thermodynamics const *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  result = (double)((Thermodynamics const *)arg1)->GetTemperature();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_GetAlphabetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_GetAlphabetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_GetAlphabetName" "', argument " "1"" of type '" "Thermodynamics const *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  result = ((Thermodynamics const *)arg1)->GetAlphabetName();
  resultobj = SWIG_NewPointerObj((new string(static_cast< const string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_ReadThermodynamic(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  char *arg2 = (char *) NULL ;
  char *arg3 = (char *) NULL ;
  double arg4 = (double) (double)-1.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "directory",(char *) "alphabet",(char *) "temperature", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:Thermodynamics_ReadThermodynamic",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_ReadThermodynamic" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Thermodynamics_ReadThermodynamic" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  if (obj2) {
    res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Thermodynamics_ReadThermodynamic" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Thermodynamics_ReadThermodynamic" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  result = (int)(arg1)->ReadThermodynamic((char const *)arg2,(char const *)arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_ReloadDataTables(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  double arg2 = (double) (double)-1.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "new_temperature", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Thermodynamics_ReloadDataTables",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_ReloadDataTables" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Thermodynamics_ReloadDataTables" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  result = (int)(arg1)->ReloadDataTables(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_VerifyThermodynamic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_VerifyThermodynamic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_VerifyThermodynamic" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  result = (bool)(arg1)->VerifyThermodynamic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_GetDatatable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  datatable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_GetDatatable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_GetDatatable" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  result = (datatable *)(arg1)->GetDatatable();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_datatable, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_GetEnthalpyTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  char *arg2 = (char *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "alphabet", NULL 
  };
  datatable *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Thermodynamics_GetEnthalpyTable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_GetEnthalpyTable" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Thermodynamics_GetEnthalpyTable" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  result = (datatable *)(arg1)->GetEnthalpyTable((char const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_datatable, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_ClearEnergies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_ClearEnergies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_ClearEnergies" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  (arg1)->ClearEnergies();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_ClearEnthalpies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_ClearEnthalpies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_ClearEnthalpies" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  (arg1)->ClearEnthalpies();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_GetEnergyRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_GetEnergyRead",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_GetEnergyRead" "', argument " "1"" of type '" "Thermodynamics const *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  result = (bool)((Thermodynamics const *)arg1)->GetEnergyRead();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_IsAlphabetRead(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_IsAlphabetRead",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_IsAlphabetRead" "', argument " "1"" of type '" "Thermodynamics const *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  result = (bool)((Thermodynamics const *)arg1)->IsAlphabetRead();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Thermodynamics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Thermodynamics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Thermodynamics" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_isrna_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Thermodynamics_isrna_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_isrna_set" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Thermodynamics_isrna_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->isrna = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Thermodynamics_isrna_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Thermodynamics *arg1 = (Thermodynamics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Thermodynamics_isrna_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Thermodynamics_isrna_get" "', argument " "1"" of type '" "Thermodynamics *""'"); 
  }
  arg1 = reinterpret_cast< Thermodynamics * >(argp1);
  result = (bool) ((arg1)->isrna);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Thermodynamics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Thermodynamics, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RNA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  bool arg2 = (bool) (bool)true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O|O:new_RNA",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RNA" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  result = (RNA *)new RNA((char const (*))arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RNA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  RNAInputType arg2 ;
  char *arg3 = (char *) (char *)0 ;
  bool arg4 = (bool) (bool)false ;
  bool arg5 = (bool) (bool)false ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO|OO:new_RNA",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RNA" "', argument " "2"" of type '" "RNAInputType""'");
  } 
  arg2 = static_cast< RNAInputType >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RNA" "', argument " "3"" of type '" "char const *const""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RNA" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RNA" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  result = (RNA *)new RNA((char const (*))arg1,arg2,(char const *)arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RNA__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  RNAInputType arg2 ;
  Thermodynamics *arg3 = (Thermodynamics *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RNA",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RNA" "', argument " "2"" of type '" "RNAInputType""'");
  } 
  arg2 = static_cast< RNAInputType >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RNA" "', argument " "3"" of type '" "Thermodynamics const *""'"); 
  }
  arg3 = reinterpret_cast< Thermodynamics * >(argp3);
  result = (RNA *)new RNA((char const (*))arg1,arg2,(Thermodynamics const *)arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RNA__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  RNAInputType arg2 ;
  bool arg3 = (bool) (bool)true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|O:new_RNA",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RNA" "', argument " "2"" of type '" "RNAInputType""'");
  } 
  arg2 = static_cast< RNAInputType >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RNA" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (RNA *)new RNA((char const (*))arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RNA__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 = (bool) (bool)true ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:new_RNA",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_bool(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RNA" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  result = (RNA *)new RNA(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RNA(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v;
    if (argc <= 0) {
      return _wrap_new_RNA__SWIG_4(self, args);
    }
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RNA__SWIG_4(self, args);
    }
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_RNA__SWIG_0(self, args);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RNA__SWIG_0(self, args);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_RNA__SWIG_3(self, args);
        }
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RNA__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Thermodynamics, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_RNA__SWIG_2(self, args);
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 5)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_RNA__SWIG_1(self, args);
          }
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_RNA__SWIG_1(self, args);
            }
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_RNA__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RNA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RNA::RNA(char const [],bool const)\n"
    "    RNA::RNA(char const [],RNAInputType const,char const *const,bool const,bool const)\n"
    "    RNA::RNA(char const [],RNAInputType const,Thermodynamics const *)\n"
    "    RNA::RNA(char const [],RNAInputType const,bool const)\n"
    "    RNA::RNA(bool const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RNA_GetErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetErrorCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetErrorCode" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)((RNA const *)arg1)->GetErrorCode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "error", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:RNA_GetErrorMessage",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RNA_GetErrorMessage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (char *)RNA::GetErrorMessage(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetFullErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetFullErrorMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetFullErrorMessage" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = ((RNA const *)arg1)->GetFullErrorMessage();
  resultobj = SWIG_NewPointerObj((new string(static_cast< const string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetErrorDetails(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetErrorDetails",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetErrorDetails" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = ((RNA const *)arg1)->GetErrorDetails();
  resultobj = SWIG_NewPointerObj((new string(static_cast< const string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_SetErrorDetails(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "details", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_SetErrorDetails",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_SetErrorDetails" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_SetErrorDetails" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_SetErrorDetails" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = reinterpret_cast< string * >(argp2);
  (arg1)->SetErrorDetails((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_SetSequenceLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "label", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_SetSequenceLabel",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_SetSequenceLabel" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_SetSequenceLabel" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_SetSequenceLabel" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = reinterpret_cast< string * >(argp2);
  (arg1)->SetSequenceLabel((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetErrorMessageString(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "error", NULL 
  };
  string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetErrorMessageString",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetErrorMessageString" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetErrorMessageString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((RNA const *)arg1)->GetErrorMessageString(arg2);
  resultobj = SWIG_NewPointerObj((new string(static_cast< const string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ResetError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_ResetError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ResetError" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  (arg1)->ResetError();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_EnsureStructureCapcacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "minimumStructures", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_EnsureStructureCapcacity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_EnsureStructureCapcacity" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_EnsureStructureCapcacity" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->EnsureStructureCapcacity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_SpecifyPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) (int)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "structurenumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:RNA_SpecifyPair",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_SpecifyPair" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_SpecifyPair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_SpecifyPair" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_SpecifyPair" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (int)(arg1)->SpecifyPair(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_RemovePairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 = (int) (int)1 ;
  bool arg3 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "structurenumber",(char *) "removeIfLastStructure", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:RNA_RemovePairs",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_RemovePairs" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_RemovePairs" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_RemovePairs" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (int)(arg1)->RemovePairs(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_RemoveBasePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 = (int) (int)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "structurenumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:RNA_RemoveBasePair",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_RemoveBasePair" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_RemoveBasePair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_RemoveBasePair" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (int)(arg1)->RemoveBasePair(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_CalculateFreeEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 = (int) (int)1 ;
  bool arg3 = (bool) (bool)false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "structurenumber",(char *) "UseSimpleMBLoopRules", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:RNA_CalculateFreeEnergy",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_CalculateFreeEnergy" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_CalculateFreeEnergy" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_CalculateFreeEnergy" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (double)(arg1)->CalculateFreeEnergy(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_WriteThermodynamicDetails(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  bool arg3 = (bool) (bool)false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename",(char *) "UseSimpleMBLoopRules", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:RNA_WriteThermodynamicDetails",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_WriteThermodynamicDetails" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_WriteThermodynamicDetails" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_WriteThermodynamicDetails" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (int)(arg1)->WriteThermodynamicDetails((char const (*))arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_FoldSingleStrand(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  float arg2 = (float) (float)20 ;
  int arg3 = (int) (int)20 ;
  int arg4 = (int) (int)5 ;
  char *arg5 = (char *) (char *)"" ;
  int arg6 = (int) (int)30 ;
  bool arg7 = (bool) false ;
  bool arg8 = (bool) true ;
  bool arg9 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "percent",(char *) "maximumstructures",(char *) "window",(char *) "savefile",(char *) "maxinternalloopsize",(char *) "mfeonly",(char *) "simple_iloops",(char *) "disablecoax", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOOOO:RNA_FoldSingleStrand",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_FoldSingleStrand" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_FoldSingleStrand" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_FoldSingleStrand" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_FoldSingleStrand" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RNA_FoldSingleStrand" "', argument " "5"" of type '" "char const []""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RNA_FoldSingleStrand" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_bool(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RNA_FoldSingleStrand" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_bool(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RNA_FoldSingleStrand" "', argument " "8"" of type '" "bool""'");
    } 
    arg8 = static_cast< bool >(val8);
  }
  if (obj8) {
    ecode9 = SWIG_AsVal_bool(obj8, &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RNA_FoldSingleStrand" "', argument " "9"" of type '" "bool""'");
    } 
    arg9 = static_cast< bool >(val9);
  }
  result = (int)(arg1)->FoldSingleStrand(arg2,arg3,arg4,(char const (*))arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GenerateAllSuboptimalStructures(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  float arg2 = (float) (float)5 ;
  double arg3 = (double) (double)0.6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "percent",(char *) "deltaG", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:RNA_GenerateAllSuboptimalStructures",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GenerateAllSuboptimalStructures" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GenerateAllSuboptimalStructures" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_GenerateAllSuboptimalStructures" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  result = (int)(arg1)->GenerateAllSuboptimalStructures(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_MaximizeExpectedAccuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  double arg2 = (double) (double)20 ;
  int arg3 = (int) (int)20 ;
  int arg4 = (int) (int)1 ;
  double arg5 = (double) (double)1.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "maxPercent",(char *) "maxStructures",(char *) "window",(char *) "gamma", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:RNA_MaximizeExpectedAccuracy",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_MaximizeExpectedAccuracy" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_MaximizeExpectedAccuracy" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_MaximizeExpectedAccuracy" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_MaximizeExpectedAccuracy" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RNA_MaximizeExpectedAccuracy" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  result = (int)(arg1)->MaximizeExpectedAccuracy(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_PartitionFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 = (char *) (char *)"" ;
  double arg3 = (double) -10.0 ;
  bool arg4 = (bool) false ;
  bool arg5 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "savefile",(char *) "temperature",(char *) "disablecoax",(char *) "restoreSHAPE", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:RNA_PartitionFunction",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_PartitionFunction" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_PartitionFunction" "', argument " "2"" of type '" "char const []""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_PartitionFunction" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_PartitionFunction" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RNA_PartitionFunction" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  result = (int)(arg1)->PartitionFunction((char const (*))arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_Rsample(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  vector< double > *arg2 = 0 ;
  RsampleData *arg3 = 0 ;
  int arg4 = (int) (int)0 ;
  char *arg5 = (char *) (char *)"" ;
  double arg6 = (double) (double)0.5 ;
  double arg7 = (double) (double)1.10 ;
  int arg8 = (int) (int)10000 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "experimentalRestraints",(char *) "refdata",(char *) "randomSeed",(char *) "savefile",(char *) "cparam",(char *) "offset",(char *) "numsamples", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OOOOO:RNA_Rsample",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_Rsample" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_Rsample" "', argument " "2"" of type '" "vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_Rsample" "', argument " "2"" of type '" "vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< vector< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RsampleData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RNA_Rsample" "', argument " "3"" of type '" "RsampleData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_Rsample" "', argument " "3"" of type '" "RsampleData &""'"); 
  }
  arg3 = reinterpret_cast< RsampleData * >(argp3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_Rsample" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RNA_Rsample" "', argument " "5"" of type '" "char const []""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_double(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RNA_Rsample" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_double(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RNA_Rsample" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_int(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RNA_Rsample" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
  }
  result = (int)(arg1)->Rsample((vector< double > const &)*arg2,*arg3,arg4,(char const (*))arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_PredictProbablePairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  float arg2 = (float) (float)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "probability", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:RNA_PredictProbablePairs",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_PredictProbablePairs" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_PredictProbablePairs" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  result = (int)(arg1)->PredictProbablePairs(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ProbKnot(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 = (int) 1 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "iterations",(char *) "MinHelixLength", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:RNA_ProbKnot",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ProbKnot" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ProbKnot" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_ProbKnot" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (int)(arg1)->ProbKnot(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ProbKnotFromSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 = (int) 1 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "iterations",(char *) "MinHelixLength", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:RNA_ProbKnotFromSample",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ProbKnotFromSample" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ProbKnotFromSample" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_ProbKnotFromSample" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (int)(arg1)->ProbKnotFromSample(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ReFoldSingleStrand(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  float arg2 = (float) (float)20 ;
  int arg3 = (int) (int)20 ;
  int arg4 = (int) (int)5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "percent",(char *) "maximumstructures",(char *) "window", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:RNA_ReFoldSingleStrand",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ReFoldSingleStrand" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ReFoldSingleStrand" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_ReFoldSingleStrand" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_ReFoldSingleStrand" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (int)(arg1)->ReFoldSingleStrand(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_Stochastic(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 = (int) (int)1000 ;
  int arg3 = (int) (int)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "structures",(char *) "seed", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:RNA_Stochastic",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_Stochastic" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_Stochastic" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_Stochastic" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (int)(arg1)->Stochastic(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ForceDoubleStranded(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ForceDoubleStranded",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ForceDoubleStranded" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ForceDoubleStranded" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->ForceDoubleStranded(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ForceFMNCleavage(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ForceFMNCleavage",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ForceFMNCleavage" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ForceFMNCleavage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->ForceFMNCleavage(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ForceMaximumPairingDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "distance", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ForceMaximumPairingDistance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ForceMaximumPairingDistance" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ForceMaximumPairingDistance" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->ForceMaximumPairingDistance(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ForceModification(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ForceModification",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ForceModification" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ForceModification" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->ForceModification(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ForcePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:RNA_ForcePair",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ForcePair" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ForcePair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_ForcePair" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->ForcePair(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ForceProhibitPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:RNA_ForceProhibitPair",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ForceProhibitPair" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ForceProhibitPair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_ForceProhibitPair" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->ForceProhibitPair(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ForceSingleStranded(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ForceSingleStranded",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ForceSingleStranded" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ForceSingleStranded" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->ForceSingleStranded(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetForcedDoubleStranded(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "constraintnumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetForcedDoubleStranded",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetForcedDoubleStranded" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetForcedDoubleStranded" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetForcedDoubleStranded(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetForcedFMNCleavage(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "constraintnumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetForcedFMNCleavage",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetForcedFMNCleavage" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetForcedFMNCleavage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetForcedFMNCleavage(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetForcedModification(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "constraintnumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetForcedModification",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetForcedModification" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetForcedModification" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetForcedModification(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetForcedPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "constraintnumber",(char *) "fiveprime", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:RNA_GetForcedPair",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetForcedPair" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetForcedPair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_GetForcedPair" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (int)(arg1)->GetForcedPair(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetForcedProhibitedPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "constraintnumber",(char *) "fiveprime", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:RNA_GetForcedProhibitedPair",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetForcedProhibitedPair" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetForcedProhibitedPair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_GetForcedProhibitedPair" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (int)(arg1)->GetForcedProhibitedPair(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetForcedSingleStranded(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "constraintnumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetForcedSingleStranded",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetForcedSingleStranded" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetForcedSingleStranded" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetForcedSingleStranded(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetMaximumPairingDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetMaximumPairingDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetMaximumPairingDistance" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)(arg1)->GetMaximumPairingDistance();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNumberOfForcedDoubleStranded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetNumberOfForcedDoubleStranded",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNumberOfForcedDoubleStranded" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)(arg1)->GetNumberOfForcedDoubleStranded();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNumberOfForcedFMNCleavages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetNumberOfForcedFMNCleavages",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNumberOfForcedFMNCleavages" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)(arg1)->GetNumberOfForcedFMNCleavages();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNumberOfForcedModifications(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetNumberOfForcedModifications",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNumberOfForcedModifications" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)(arg1)->GetNumberOfForcedModifications();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNumberOfForcedPairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetNumberOfForcedPairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNumberOfForcedPairs" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)(arg1)->GetNumberOfForcedPairs();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNumberOfForcedProhibitedPairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetNumberOfForcedProhibitedPairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNumberOfForcedProhibitedPairs" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)(arg1)->GetNumberOfForcedProhibitedPairs();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNumberOfForcedSingleStranded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetNumberOfForcedSingleStranded",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNumberOfForcedSingleStranded" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)(arg1)->GetNumberOfForcedSingleStranded();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ReadConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ReadConstraints",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ReadConstraints" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_ReadConstraints" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->ReadConstraints((char const (*))arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ReadSHAPE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  double arg3 ;
  double arg4 ;
  RestraintType arg5 = (RestraintType) RESTRAINT_SHAPE ;
  bool arg6 = (bool) (bool)true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO|OO:RNA_ReadSHAPE",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ReadSHAPE" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_ReadSHAPE" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_ReadSHAPE" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_ReadSHAPE" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  if (obj4) {
    {
      res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_RestraintType,  0  | 0);
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RNA_ReadSHAPE" "', argument " "5"" of type '" "RestraintType""'"); 
      }  
      if (!argp5) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_ReadSHAPE" "', argument " "5"" of type '" "RestraintType""'");
      } else {
        RestraintType * temp = reinterpret_cast< RestraintType * >(argp5);
        arg5 = *temp;
        if (SWIG_IsNewObj(res5)) delete temp;
      }
    }
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_bool(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RNA_ReadSHAPE" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
  }
  result = (int)(arg1)->ReadSHAPE((char const (*))arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ReadSHAPE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  RestraintType arg7 = (RestraintType) RESTRAINT_SHAPE ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO|O:RNA_ReadSHAPE",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ReadSHAPE" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_ReadSHAPE" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_ReadSHAPE" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_ReadSHAPE" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RNA_ReadSHAPE" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RNA_ReadSHAPE" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  if (obj6) {
    {
      res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_RestraintType,  0  | 0);
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "RNA_ReadSHAPE" "', argument " "7"" of type '" "RestraintType""'"); 
      }  
      if (!argp7) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_ReadSHAPE" "', argument " "7"" of type '" "RestraintType""'");
      } else {
        RestraintType * temp = reinterpret_cast< RestraintType * >(argp7);
        arg7 = *temp;
        if (SWIG_IsNewObj(res7)) delete temp;
      }
    }
  }
  result = (int)(arg1)->ReadSHAPE((char const (*))arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ReadSHAPE(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 4) && (argc <= 6)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RNA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_RNA_ReadSHAPE__SWIG_0(self, args);
            }
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_RestraintType, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              if (argc <= 5) {
                return _wrap_RNA_ReadSHAPE__SWIG_0(self, args);
              }
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_RNA_ReadSHAPE__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  if ((argc >= 6) && (argc <= 7)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RNA, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                if (argc <= 6) {
                  return _wrap_RNA_ReadSHAPE__SWIG_1(self, args);
                }
                int res = SWIG_ConvertPtr(argv[6], 0, SWIGTYPE_p_RestraintType, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_RNA_ReadSHAPE__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RNA_ReadSHAPE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RNA::ReadSHAPE(char const [],double const,double const,RestraintType,bool const)\n"
    "    RNA::ReadSHAPE(char const [],double const,double const,double const,double const,RestraintType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RNA_ReadDMS(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ReadDMS",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ReadDMS" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_ReadDMS" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->ReadDMS((char const (*))arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ReadDSO(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ReadDSO",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ReadDSO" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_ReadDSO" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->ReadDSO((char const (*))arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ReadSSO(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ReadSSO",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ReadSSO" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_ReadSSO" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->ReadSSO((char const (*))arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ReadExperimentalPairBonus(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename",(char *) "experimentalOffset",(char *) "experimentalScaling", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:RNA_ReadExperimentalPairBonus",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ReadExperimentalPairBonus" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_ReadExperimentalPairBonus" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_ReadExperimentalPairBonus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_ReadExperimentalPairBonus" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (int)(arg1)->ReadExperimentalPairBonus((char const (*))arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_RemoveConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_RemoveConstraints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_RemoveConstraints" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  (arg1)->RemoveConstraints();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_SetExtrinsic(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "k", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:RNA_SetExtrinsic",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_SetExtrinsic" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_SetExtrinsic" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_SetExtrinsic" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_SetExtrinsic" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (int)(arg1)->SetExtrinsic(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_WriteConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_WriteConstraints",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_WriteConstraints" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_WriteConstraints" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->WriteConstraints((char const (*))arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_AddComment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  int arg3 = (int) (int)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "comment",(char *) "structurenumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:RNA_AddComment",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_AddComment" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_AddComment" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_AddComment" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (int)(arg1)->AddComment((char const (*))arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_WriteCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  bool arg3 = (bool) false ;
  CTCommentProvider &arg4_defvalue = CTComments::Energy ;
  CTCommentProvider *arg4 = (CTCommentProvider *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename",(char *) "append",(char *) "commentProvider", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:RNA_WriteCt",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_WriteCt" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_WriteCt" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_WriteCt" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (obj3) {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_CTCommentProvider,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RNA_WriteCt" "', argument " "4"" of type '" "CTCommentProvider &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_WriteCt" "', argument " "4"" of type '" "CTCommentProvider &""'"); 
    }
    arg4 = reinterpret_cast< CTCommentProvider * >(argp4);
  }
  result = (int)((RNA const *)arg1)->WriteCt((char const (*))arg2,arg3,*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_WriteDotBracket(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  char *arg2 ;
  int arg3 = (int) (int)-1 ;
  DotBracketFormat arg4 = (DotBracketFormat) (DotBracketFormat)DBN_FMT_MULTI_TITLE ;
  CTCommentProvider &arg5_defvalue = CTComments::Energy ;
  CTCommentProvider *arg5 = (CTCommentProvider *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename",(char *) "structurenumber",(char *) "format",(char *) "commentProvider", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:RNA_WriteDotBracket",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_WriteDotBracket" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_WriteDotBracket" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_WriteDotBracket" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    {
      res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DotBracketFormat,  0  | 0);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RNA_WriteDotBracket" "', argument " "4"" of type '" "DotBracketFormat const""'"); 
      }  
      if (!argp4) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_WriteDotBracket" "', argument " "4"" of type '" "DotBracketFormat const""'");
      } else {
        DotBracketFormat * temp = reinterpret_cast< DotBracketFormat * >(argp4);
        arg4 = *temp;
        if (SWIG_IsNewObj(res4)) delete temp;
      }
    }
  }
  if (obj4) {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_CTCommentProvider,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RNA_WriteDotBracket" "', argument " "5"" of type '" "CTCommentProvider &""'"); 
    }
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_WriteDotBracket" "', argument " "5"" of type '" "CTCommentProvider &""'"); 
    }
    arg5 = reinterpret_cast< CTCommentProvider * >(argp5);
  }
  result = (int)((RNA const *)arg1)->WriteDotBracket((char const (*))arg2,arg3,arg4,*arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_BreakPseudoknot(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  bool arg2 = (bool) (bool)true ;
  int arg3 = (int) (int)0 ;
  bool arg4 = (bool) (bool)true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "minimum_energy",(char *) "structurenumber",(char *) "useFastMethod", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:RNA_BreakPseudoknot",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_BreakPseudoknot" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_BreakPseudoknot" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_BreakPseudoknot" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_BreakPseudoknot" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  result = (int)(arg1)->BreakPseudoknot(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_ContainsPseudoknot(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "structurenumber", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_ContainsPseudoknot",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_ContainsPseudoknot" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_ContainsPseudoknot" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->ContainsPseudoknot(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetEnsembleEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetEnsembleEnergy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetEnsembleEnergy" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (double)(arg1)->GetEnsembleEnergy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetEnsembleDefect(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 = (int) (int)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "structurenumber", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:RNA_GetEnsembleDefect",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetEnsembleDefect" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetEnsembleDefect" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  result = (double)(arg1)->GetEnsembleDefect(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetFreeEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "structurenumber", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetFreeEnergy",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetFreeEnergy" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetFreeEnergy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->GetFreeEnergy(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 = (int) (int)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "structurenumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:RNA_GetPair",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetPair" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetPair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_GetPair" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  result = (int)(arg1)->GetPair(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetPairEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:RNA_GetPairEnergy",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetPairEnergy" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetPairEnergy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_GetPairEnergy" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->GetPairEnergy(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetPairProbability(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:RNA_GetPairProbability",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetPairProbability" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetPairProbability" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_GetPairProbability" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->GetPairProbability(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetPairProbabilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "arr",(char *) "size", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:RNA_GetPairProbabilities",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetPairProbabilities" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_GetPairProbabilities" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_GetPairProbabilities" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->GetPairProbabilities(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetStructureNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetStructureNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetStructureNumber" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)((RNA const *)arg1)->GetStructureNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_DetermineDrawingCoordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) (int)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "height",(char *) "width",(char *) "structurenumber", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:RNA_DetermineDrawingCoordinates",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_DetermineDrawingCoordinates" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_DetermineDrawingCoordinates" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RNA_DetermineDrawingCoordinates" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RNA_DetermineDrawingCoordinates" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (int)(arg1)->DetermineDrawingCoordinates(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetCommentString(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 = (int) (int)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "structurenumber", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:RNA_GetCommentString",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetCommentString" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetCommentString" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  result = (arg1)->GetCommentString(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNucleotideXCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetNucleotideXCoordinate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNucleotideXCoordinate" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetNucleotideXCoordinate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetNucleotideXCoordinate(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNucleotideYCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetNucleotideYCoordinate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNucleotideYCoordinate" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetNucleotideYCoordinate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetNucleotideYCoordinate(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetLabelXCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetLabelXCoordinate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetLabelXCoordinate" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetLabelXCoordinate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetLabelXCoordinate(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetLabelYCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetLabelYCoordinate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetLabelYCoordinate" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetLabelYCoordinate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->GetLabelYCoordinate(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetNucleotide(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  char result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_GetNucleotide",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetNucleotide" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RNA_GetNucleotide" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (char)(arg1)->GetNucleotide(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetSequenceLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetSequenceLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetSequenceLength" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (int)((RNA const *)arg1)->GetSequenceLength();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetSequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetSequence" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (char *)((RNA const *)arg1)->GetSequence();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetBackboneType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetBackboneType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetBackboneType" "', argument " "1"" of type '" "RNA const *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (bool)((RNA const *)arg1)->GetBackboneType();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  structure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetStructure" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (structure *)(arg1)->GetStructure();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_structure, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_SetProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  ProgressHandler *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "Progress", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_SetProgress",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_SetProgress" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ProgressHandler,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_SetProgress" "', argument " "2"" of type '" "ProgressHandler &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_SetProgress" "', argument " "2"" of type '" "ProgressHandler &""'"); 
  }
  arg2 = reinterpret_cast< ProgressHandler * >(argp2);
  (arg1)->SetProgress(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_StopProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_StopProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_StopProgress" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  (arg1)->StopProgress();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_GetProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ProgressHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RNA_GetProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_GetProgress" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  result = (ProgressHandler *)(arg1)->GetProgress();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProgressHandler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RNA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RNA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RNA" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RNA_CopyThermo(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  RNA *arg1 = (RNA *) 0 ;
  Thermodynamics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "copy", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RNA_CopyThermo",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNA_CopyThermo" "', argument " "1"" of type '" "RNA *""'"); 
  }
  arg1 = reinterpret_cast< RNA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Thermodynamics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNA_CopyThermo" "', argument " "2"" of type '" "Thermodynamics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNA_CopyThermo" "', argument " "2"" of type '" "Thermodynamics &""'"); 
  }
  arg2 = reinterpret_cast< Thermodynamics * >(argp2);
  (arg1)->CopyThermo(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RNA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RNA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HybridRNA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  char *arg2 ;
  bool arg3 = (bool) (bool)true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  HybridRNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|O:new_HybridRNA",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HybridRNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HybridRNA" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HybridRNA" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (HybridRNA *)new HybridRNA((char const (*))arg1,(char const (*))arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HybridRNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HybridRNA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  int arg2 ;
  char *arg3 ;
  int arg4 ;
  bool arg5 = (bool) (bool)true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HybridRNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO|O:new_HybridRNA",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HybridRNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HybridRNA" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HybridRNA" "', argument " "3"" of type '" "char const []""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HybridRNA" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_HybridRNA" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  result = (HybridRNA *)new HybridRNA((char const (*))arg1,arg2,(char const (*))arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HybridRNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HybridRNA__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  int arg2 ;
  char *arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  HybridRNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_HybridRNA",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HybridRNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HybridRNA" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HybridRNA" "', argument " "3"" of type '" "char const []""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HybridRNA" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_HybridRNA" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (HybridRNA *)new HybridRNA((char const (*))arg1,arg2,(char const (*))arg3,arg4,(char const *)arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HybridRNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HybridRNA(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_HybridRNA__SWIG_0(self, args);
        }
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_HybridRNA__SWIG_0(self, args);
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 5)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_HybridRNA__SWIG_1(self, args);
            }
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_HybridRNA__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_HybridRNA__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HybridRNA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HybridRNA::HybridRNA(char const [],char const [],bool const)\n"
    "    HybridRNA::HybridRNA(char const [],int const,char const [],int const,bool const)\n"
    "    HybridRNA::HybridRNA(char const [],int const,char const [],int const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HybridRNA_AccessFold(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  double arg2 = (double) (double)0.4 ;
  float arg3 = (float) (float)50 ;
  int arg4 = (int) (int)20 ;
  int arg5 = (int) (int)0 ;
  int arg6 = (int) (int)30 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "gamma",(char *) "percent",(char *) "maximumstructures",(char *) "window",(char *) "maxinternalloopsize", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOO:HybridRNA_AccessFold",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_AccessFold" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HybridRNA_AccessFold" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HybridRNA_AccessFold" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HybridRNA_AccessFold" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HybridRNA_AccessFold" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HybridRNA_AccessFold" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  result = (int)(arg1)->AccessFold(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_FoldBimolecular(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  float arg2 = (float) (float)10 ;
  int arg3 = (int) (int)20 ;
  int arg4 = (int) (int)0 ;
  char *arg5 = (char *) (char *)"" ;
  int arg6 = (int) (int)30 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "percent",(char *) "maximumstructures",(char *) "window",(char *) "savefile",(char *) "maxinternalloopsize", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOO:HybridRNA_FoldBimolecular",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_FoldBimolecular" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HybridRNA_FoldBimolecular" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HybridRNA_FoldBimolecular" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HybridRNA_FoldBimolecular" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "HybridRNA_FoldBimolecular" "', argument " "5"" of type '" "char const []""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HybridRNA_FoldBimolecular" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  result = (int)(arg1)->FoldBimolecular(arg2,arg3,arg4,(char const (*))arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_FoldDuplex(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  float arg2 = (float) (float)40 ;
  int arg3 = (int) (int)10 ;
  int arg4 = (int) (int)0 ;
  int arg5 = (int) (int)30 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "percent",(char *) "maximumstructures",(char *) "window",(char *) "maxinternalloopsize", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:HybridRNA_FoldDuplex",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_FoldDuplex" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HybridRNA_FoldDuplex" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HybridRNA_FoldDuplex" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HybridRNA_FoldDuplex" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HybridRNA_FoldDuplex" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  result = (int)(arg1)->FoldDuplex(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_PartitionFunctionBimolecular(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  char *arg2 = (char *) (char *)"" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "savefile", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:HybridRNA_PartitionFunctionBimolecular",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_PartitionFunctionBimolecular" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  if (obj1) {
    res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HybridRNA_PartitionFunctionBimolecular" "', argument " "2"" of type '" "char const []""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
  }
  result = (int)(arg1)->PartitionFunctionBimolecular((char const (*))arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_GetRNA1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HybridRNA_GetRNA1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_GetRNA1" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  result = (RNA *)(arg1)->GetRNA1();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_GetRNA2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HybridRNA_GetRNA2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_GetRNA2" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  result = (RNA *)(arg1)->GetRNA2();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_GetErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HybridRNA_GetErrorCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_GetErrorCode" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  result = (int)(arg1)->GetErrorCode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_GetErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "error", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:HybridRNA_GetErrorMessage",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_GetErrorMessage" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HybridRNA_GetErrorMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (char *)(arg1)->GetErrorMessage(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_GetForbidIntramolecular(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HybridRNA_GetForbidIntramolecular",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_GetForbidIntramolecular" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  result = (bool)(arg1)->GetForbidIntramolecular();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_SetForbidIntramolecular(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "forbid", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:HybridRNA_SetForbidIntramolecular",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_SetForbidIntramolecular" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HybridRNA_SetForbidIntramolecular" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetForbidIntramolecular(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_SetProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  ProgressHandler *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "Progress", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:HybridRNA_SetProgress",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_SetProgress" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ProgressHandler,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HybridRNA_SetProgress" "', argument " "2"" of type '" "ProgressHandler &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HybridRNA_SetProgress" "', argument " "2"" of type '" "ProgressHandler &""'"); 
  }
  arg2 = reinterpret_cast< ProgressHandler * >(argp2);
  (arg1)->SetProgress(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HybridRNA_StopProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HybridRNA_StopProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HybridRNA_StopProgress" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  (arg1)->StopProgress();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HybridRNA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HybridRNA *arg1 = (HybridRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HybridRNA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HybridRNA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HybridRNA" "', argument " "1"" of type '" "HybridRNA *""'"); 
  }
  arg1 = reinterpret_cast< HybridRNA * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HybridRNA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HybridRNA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TwoRNA__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  char *arg2 ;
  bool arg3 = (bool) true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  TwoRNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|O:new_TwoRNA",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TwoRNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TwoRNA" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TwoRNA" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (TwoRNA *)new TwoRNA((char const (*))arg1,(char const (*))arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TwoRNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TwoRNA__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  RNAInputType arg2 ;
  char *arg3 ;
  RNAInputType arg4 ;
  bool arg5 = (bool) true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  TwoRNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO|O:new_TwoRNA",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TwoRNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TwoRNA" "', argument " "2"" of type '" "RNAInputType""'");
  } 
  arg2 = static_cast< RNAInputType >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TwoRNA" "', argument " "3"" of type '" "char const []""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TwoRNA" "', argument " "4"" of type '" "RNAInputType""'");
  } 
  arg4 = static_cast< RNAInputType >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TwoRNA" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  result = (TwoRNA *)new TwoRNA((char const (*))arg1,arg2,(char const (*))arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TwoRNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TwoRNA__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  RNAInputType arg2 ;
  char *arg3 ;
  RNAInputType arg4 ;
  Thermodynamics *arg5 = (Thermodynamics *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  TwoRNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_TwoRNA",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TwoRNA" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TwoRNA" "', argument " "2"" of type '" "RNAInputType""'");
  } 
  arg2 = static_cast< RNAInputType >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TwoRNA" "', argument " "3"" of type '" "char const []""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TwoRNA" "', argument " "4"" of type '" "RNAInputType""'");
  } 
  arg4 = static_cast< RNAInputType >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_TwoRNA" "', argument " "5"" of type '" "Thermodynamics const *""'"); 
  }
  arg5 = reinterpret_cast< Thermodynamics * >(argp5);
  result = (TwoRNA *)new TwoRNA((char const (*))arg1,arg2,(char const (*))arg3,arg4,(Thermodynamics const *)arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TwoRNA, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TwoRNA__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TwoRNA")) SWIG_fail;
  result = (TwoRNA *)new TwoRNA();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TwoRNA, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TwoRNA(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TwoRNA__SWIG_3(self, args);
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_TwoRNA__SWIG_0(self, args);
        }
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TwoRNA__SWIG_0(self, args);
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 5)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_TwoRNA__SWIG_1(self, args);
            }
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_TwoRNA__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_Thermodynamics, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_TwoRNA__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TwoRNA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TwoRNA::TwoRNA(char const [],char const [],bool)\n"
    "    TwoRNA::TwoRNA(char const [],RNAInputType const,char const [],RNAInputType const,bool)\n"
    "    TwoRNA::TwoRNA(char const [],RNAInputType const,char const [],RNAInputType const,Thermodynamics const *)\n"
    "    TwoRNA::TwoRNA()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TwoRNA_SetTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "temperature", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TwoRNA_SetTemperature",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_SetTemperature" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoRNA_SetTemperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (int)(arg1)->SetTemperature(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_GetTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TwoRNA_GetTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_GetTemperature" "', argument " "1"" of type '" "TwoRNA const *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  result = (double)((TwoRNA const *)arg1)->GetTemperature();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_GetErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TwoRNA_GetErrorCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_GetErrorCode" "', argument " "1"" of type '" "TwoRNA const *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  result = (int)((TwoRNA const *)arg1)->GetErrorCode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_GetErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "error", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TwoRNA_GetErrorMessage",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_GetErrorMessage" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoRNA_GetErrorMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (char *)(arg1)->GetErrorMessage(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_GetErrorDetails(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TwoRNA_GetErrorDetails",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_GetErrorDetails" "', argument " "1"" of type '" "TwoRNA const *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  result = ((TwoRNA const *)arg1)->GetErrorDetails();
  resultobj = SWIG_NewPointerObj((new string(static_cast< const string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_SetErrorDetails(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "details", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TwoRNA_SetErrorDetails",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_SetErrorDetails" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoRNA_SetErrorDetails" "', argument " "2"" of type '" "string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwoRNA_SetErrorDetails" "', argument " "2"" of type '" "string const &""'"); 
  }
  arg2 = reinterpret_cast< string * >(argp2);
  (arg1)->SetErrorDetails((string const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_GetErrorMessageString(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "error", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:TwoRNA_GetErrorMessageString",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_GetErrorMessageString" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoRNA_GetErrorMessageString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->GetErrorMessageString(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_ResetError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TwoRNA_ResetError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_ResetError" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  (arg1)->ResetError();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_GetRNA1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TwoRNA_GetRNA1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_GetRNA1" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  result = (RNA *)(arg1)->GetRNA1();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_GetRNA2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RNA *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TwoRNA_GetRNA2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_GetRNA2" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  result = (RNA *)(arg1)->GetRNA2();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RNA, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TwoRNA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TwoRNA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TwoRNA" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_compoundmessage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[200] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TwoRNA_compoundmessage_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_compoundmessage_set" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 200);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwoRNA_compoundmessage_set" "', argument " "2"" of type '" "char [200]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->compoundmessage,arg2,200*sizeof(char));
  else memset(arg1->compoundmessage,0,200*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwoRNA_compoundmessage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TwoRNA *arg1 = (TwoRNA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TwoRNA_compoundmessage_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TwoRNA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoRNA_compoundmessage_get" "', argument " "1"" of type '" "TwoRNA *""'"); 
  }
  arg1 = reinterpret_cast< TwoRNA * >(argp1);
  result = (char *)(char *) ((arg1)->compoundmessage);
  {
    size_t size = SWIG_strnlen(result, 200);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TwoRNA_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TwoRNA, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Dynalign_object__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dynalign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Dynalign_object")) SWIG_fail;
  result = (Dynalign_object *)new Dynalign_object();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dynalign_object, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dynalign_object__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  char *arg2 ;
  bool arg3 = (bool) (bool)true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Dynalign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|O:new_Dynalign_object",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dynalign_object" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Dynalign_object" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Dynalign_object" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (Dynalign_object *)new Dynalign_object((char const (*))arg1,(char const (*))arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dynalign_object, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dynalign_object__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  RNAInputType arg2 ;
  char *arg3 ;
  RNAInputType arg4 ;
  bool arg5 = (bool) (bool)true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Dynalign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO|O:new_Dynalign_object",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dynalign_object" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Dynalign_object" "', argument " "2"" of type '" "RNAInputType""'");
  } 
  arg2 = static_cast< RNAInputType >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Dynalign_object" "', argument " "3"" of type '" "char const []""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Dynalign_object" "', argument " "4"" of type '" "RNAInputType""'");
  } 
  arg4 = static_cast< RNAInputType >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Dynalign_object" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  result = (Dynalign_object *)new Dynalign_object((char const (*))arg1,arg2,(char const (*))arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dynalign_object, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dynalign_object__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  RNAInputType arg2 ;
  char *arg3 ;
  RNAInputType arg4 ;
  Thermodynamics *arg5 = (Thermodynamics *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Dynalign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Dynalign_object",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dynalign_object" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Dynalign_object" "', argument " "2"" of type '" "RNAInputType""'");
  } 
  arg2 = static_cast< RNAInputType >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Dynalign_object" "', argument " "3"" of type '" "char const []""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Dynalign_object" "', argument " "4"" of type '" "RNAInputType""'");
  } 
  arg4 = static_cast< RNAInputType >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_Thermodynamics, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Dynalign_object" "', argument " "5"" of type '" "Thermodynamics const *""'"); 
  }
  arg5 = reinterpret_cast< Thermodynamics * >(argp5);
  result = (Dynalign_object *)new Dynalign_object((char const (*))arg1,arg2,(char const (*))arg3,arg4,(Thermodynamics const *)arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dynalign_object, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dynalign_object__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Dynalign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Dynalign_object",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dynalign_object" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (Dynalign_object *)new Dynalign_object((char const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dynalign_object, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dynalign_object__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  short arg2 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Dynalign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Dynalign_object",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dynalign_object" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Dynalign_object" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Dynalign_object" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Dynalign_object" "', argument " "4"" of type '" "short""'");
  } 
  arg4 = static_cast< short >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Dynalign_object" "', argument " "5"" of type '" "short""'");
  } 
  arg5 = static_cast< short >(val5);
  result = (Dynalign_object *)new Dynalign_object((char const *)arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dynalign_object, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dynalign_object(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Dynalign_object__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dynalign_object__SWIG_4(self, args);
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_Dynalign_object__SWIG_1(self, args);
        }
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Dynalign_object__SWIG_1(self, args);
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 5)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_Dynalign_object__SWIG_2(self, args);
            }
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Dynalign_object__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Dynalign_object__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_Thermodynamics, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_Dynalign_object__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Dynalign_object'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dynalign_object::Dynalign_object()\n"
    "    Dynalign_object::Dynalign_object(char const [],char const [],bool const)\n"
    "    Dynalign_object::Dynalign_object(char const [],RNAInputType const,char const [],RNAInputType const,bool const)\n"
    "    Dynalign_object::Dynalign_object(char const [],RNAInputType const,char const [],RNAInputType const,Thermodynamics const *)\n"
    "    Dynalign_object::Dynalign_object(char const [])\n"
    "    Dynalign_object::Dynalign_object(char const *,short const,short const,short const,short const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_Dynalign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  short arg2 = (short) (short)20 ;
  short arg3 = (short) (short)5 ;
  short arg4 = (short) (short)1 ;
  short arg5 = (short) (short)20 ;
  short arg6 = (short) (short)-99 ;
  float arg7 = (float) (float)0.4 ;
  bool arg8 = (bool) (bool)true ;
  char *arg9 = (char *) (char *)NULL ;
  bool arg10 = (bool) (bool)false ;
  short arg11 = (short) (short)30 ;
  bool arg12 = (bool) (bool)false ;
  short arg13 = (short) (short)1 ;
  int arg14 = (int) (int)-1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  short val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  short val13 ;
  int ecode13 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "maxtrace",(char *) "bpwin",(char *) "awin",(char *) "percent",(char *) "imaxseparation",(char *) "gap",(char *) "singleinsert",(char *) "savefile",(char *) "optimalonly",(char *) "singlefold_subopt_percent",(char *) "local",(char *) "numProcessors",(char *) "maxpairs", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOOOOOOOOO:Dynalign_object_Dynalign",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_Dynalign" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_short(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dynalign_object_Dynalign" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_short(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dynalign_object_Dynalign" "', argument " "3"" of type '" "short""'");
    } 
    arg3 = static_cast< short >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_short(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dynalign_object_Dynalign" "', argument " "4"" of type '" "short""'");
    } 
    arg4 = static_cast< short >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_short(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Dynalign_object_Dynalign" "', argument " "5"" of type '" "short""'");
    } 
    arg5 = static_cast< short >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_short(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Dynalign_object_Dynalign" "', argument " "6"" of type '" "short""'");
    } 
    arg6 = static_cast< short >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_float(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Dynalign_object_Dynalign" "', argument " "7"" of type '" "float""'");
    } 
    arg7 = static_cast< float >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_bool(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Dynalign_object_Dynalign" "', argument " "8"" of type '" "bool""'");
    } 
    arg8 = static_cast< bool >(val8);
  }
  if (obj8) {
    res9 = SWIG_AsCharPtrAndSize(obj8, &buf9, NULL, &alloc9);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Dynalign_object_Dynalign" "', argument " "9"" of type '" "char const []""'");
    }
    arg9 = reinterpret_cast< char * >(buf9);
  }
  if (obj9) {
    ecode10 = SWIG_AsVal_bool(obj9, &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Dynalign_object_Dynalign" "', argument " "10"" of type '" "bool""'");
    } 
    arg10 = static_cast< bool >(val10);
  }
  if (obj10) {
    ecode11 = SWIG_AsVal_short(obj10, &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Dynalign_object_Dynalign" "', argument " "11"" of type '" "short""'");
    } 
    arg11 = static_cast< short >(val11);
  }
  if (obj11) {
    ecode12 = SWIG_AsVal_bool(obj11, &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Dynalign_object_Dynalign" "', argument " "12"" of type '" "bool""'");
    } 
    arg12 = static_cast< bool >(val12);
  }
  if (obj12) {
    ecode13 = SWIG_AsVal_short(obj12, &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Dynalign_object_Dynalign" "', argument " "13"" of type '" "short""'");
    } 
    arg13 = static_cast< short >(val13);
  }
  if (obj13) {
    ecode14 = SWIG_AsVal_int(obj13, &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Dynalign_object_Dynalign" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
  }
  result = (int)(arg1)->Dynalign(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const (*))arg9,arg10,arg11,arg12,arg13,arg14);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return resultobj;
fail:
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_WriteAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Dynalign_object_WriteAlignment",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_WriteAlignment" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dynalign_object_WriteAlignment" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->WriteAlignment((char const (*))arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_ForceAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "k", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Dynalign_object_ForceAlignment",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_ForceAlignment" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dynalign_object_ForceAlignment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dynalign_object_ForceAlignment" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->ForceAlignment(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_GetForcedAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "seq", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Dynalign_object_GetForcedAlignment",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_GetForcedAlignment" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dynalign_object_GetForcedAlignment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dynalign_object_GetForcedAlignment" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->GetForcedAlignment(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_ReadAlignmentConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Dynalign_object_ReadAlignmentConstraints",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_ReadAlignmentConstraints" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dynalign_object_ReadAlignmentConstraints" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->ReadAlignmentConstraints((char const (*))arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_Templatefromct(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ctfilename", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Dynalign_object_Templatefromct",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_Templatefromct" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dynalign_object_Templatefromct" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->Templatefromct((char const (*))arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_Templatefromdsv(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  char *arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "dsvfilename",(char *) "maxdsvchange", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Dynalign_object_Templatefromdsv",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_Templatefromdsv" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dynalign_object_Templatefromdsv" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dynalign_object_Templatefromdsv" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (int)(arg1)->Templatefromdsv((char const (*))arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_GetBestPairEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "sequence",(char *) "i",(char *) "j", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:Dynalign_object_GetBestPairEnergy",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_GetBestPairEnergy" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dynalign_object_GetBestPairEnergy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dynalign_object_GetBestPairEnergy" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dynalign_object_GetBestPairEnergy" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (double)(arg1)->GetBestPairEnergy(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_GetLowestEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dynalign_object_GetLowestEnergy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_GetLowestEnergy" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  result = (double)(arg1)->GetLowestEnergy();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_GetErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "error", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Dynalign_object_GetErrorMessage",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_GetErrorMessage" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dynalign_object_GetErrorMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (char *)(arg1)->GetErrorMessage(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_SetProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  ProgressHandler *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "Progress", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Dynalign_object_SetProgress",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_SetProgress" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ProgressHandler,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dynalign_object_SetProgress" "', argument " "2"" of type '" "ProgressHandler &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dynalign_object_SetProgress" "', argument " "2"" of type '" "ProgressHandler &""'"); 
  }
  arg2 = reinterpret_cast< ProgressHandler * >(argp2);
  (arg1)->SetProgress(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dynalign_object_StopProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dynalign_object_StopProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dynalign_object_StopProgress" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  (arg1)->StopProgress();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Dynalign_object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dynalign_object *arg1 = (Dynalign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Dynalign_object",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dynalign_object, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dynalign_object" "', argument " "1"" of type '" "Dynalign_object *""'"); 
  }
  arg1 = reinterpret_cast< Dynalign_object * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Dynalign_object_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Dynalign_object, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Multilign_object__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Multilign_object")) SWIG_fail;
  result = (Multilign_object *)new Multilign_object();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Multilign_object, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Multilign_object__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::string > > *arg1 = 0 ;
  bool arg2 = (bool) (bool)true ;
  ProgressHandler *arg3 = (ProgressHandler *) NULL ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Multilign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O|OO:new_Multilign_object",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *ptr = (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Multilign_object" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Multilign_object" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const &""'"); 
    }
    arg1 = ptr;
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Multilign_object" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ProgressHandler, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Multilign_object" "', argument " "3"" of type '" "ProgressHandler *""'"); 
    }
    arg3 = reinterpret_cast< ProgressHandler * >(argp3);
  }
  result = (Multilign_object *)new Multilign_object((std::vector< std::vector< std::string > > const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Multilign_object, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Multilign_object__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  ProgressHandler *arg4 = (ProgressHandler *) NULL ;
  bool arg5 = (bool) (bool)true ;
  bool val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Multilign_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO|OO:new_Multilign_object",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Multilign_object" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Multilign_object" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Multilign_object" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Multilign_object" "', argument " "3"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Multilign_object" "', argument " "3"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg3 = ptr;
  }
  if (obj3) {
    res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ProgressHandler, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Multilign_object" "', argument " "4"" of type '" "ProgressHandler *""'"); 
    }
    arg4 = reinterpret_cast< ProgressHandler * >(argp4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Multilign_object" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  result = (Multilign_object *)new Multilign_object(arg1,(std::string const &)*arg2,(std::vector< std::string > const &)*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Multilign_object, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Multilign_object(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Multilign_object__SWIG_0(self, args);
  }
  if ((argc >= 1) && (argc <= 3)) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Multilign_object__SWIG_1(self, args);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_Multilign_object__SWIG_1(self, args);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ProgressHandler, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Multilign_object__SWIG_1(self, args);
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 5)) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_Multilign_object__SWIG_2(self, args);
          }
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_ProgressHandler, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_Multilign_object__SWIG_2(self, args);
            }
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Multilign_object__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Multilign_object'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Multilign_object::Multilign_object()\n"
    "    Multilign_object::Multilign_object(std::vector< std::vector< std::string > > const &,bool const,ProgressHandler *)\n"
    "    Multilign_object::Multilign_object(bool const,std::string const &,std::vector< std::string > const &,ProgressHandler *,bool const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Multilign_object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Multilign_object",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Multilign_object" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_CountBP(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  int arg2 = (int) (int)0 ;
  int arg3 = (int) (int)0 ;
  double arg4 = (double) (double)0.8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "percent", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:Multilign_object_CountBP",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_CountBP" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_CountBP" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Multilign_object_CountBP" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Multilign_object_CountBP" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  result = (int)((Multilign_object const *)arg1)->CountBP(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_ProgressiveMultilign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  short arg2 = (short) (short)1 ;
  bool arg3 = (bool) (bool)1 ;
  bool arg4 = (bool) (bool)1 ;
  short arg5 = (short) (short)750 ;
  short arg6 = (short) (short)2 ;
  short arg7 = (short) (short)1 ;
  short arg8 = (short) (short)20 ;
  short arg9 = (short) (short)-99 ;
  float arg10 = (float) (float)0.4 ;
  bool arg11 = (bool) (bool)true ;
  short arg12 = (short) (short)30 ;
  bool arg13 = (bool) (bool)false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  short val7 ;
  int ecode7 = 0 ;
  short val8 ;
  int ecode8 = 0 ;
  short val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  short val12 ;
  int ecode12 = 0 ;
  bool val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "numProcessors",(char *) "Dsv",(char *) "Ali",(char *) "maxtrace",(char *) "bpwin",(char *) "awin",(char *) "percent",(char *) "imaxseparation",(char *) "gap",(char *) "singleinsert",(char *) "singlefold_subopt_percent",(char *) "local", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOOOOOOOO:Multilign_object_ProgressiveMultilign",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_short(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_short(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "5"" of type '" "short""'");
    } 
    arg5 = static_cast< short >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_short(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "6"" of type '" "short""'");
    } 
    arg6 = static_cast< short >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_short(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "7"" of type '" "short""'");
    } 
    arg7 = static_cast< short >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_short(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "8"" of type '" "short""'");
    } 
    arg8 = static_cast< short >(val8);
  }
  if (obj8) {
    ecode9 = SWIG_AsVal_short(obj8, &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "9"" of type '" "short""'");
    } 
    arg9 = static_cast< short >(val9);
  }
  if (obj9) {
    ecode10 = SWIG_AsVal_float(obj9, &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "10"" of type '" "float""'");
    } 
    arg10 = static_cast< float >(val10);
  }
  if (obj10) {
    ecode11 = SWIG_AsVal_bool(obj10, &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "11"" of type '" "bool""'");
    } 
    arg11 = static_cast< bool >(val11);
  }
  if (obj11) {
    ecode12 = SWIG_AsVal_short(obj11, &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "12"" of type '" "short""'");
    } 
    arg12 = static_cast< short >(val12);
  }
  if (obj12) {
    ecode13 = SWIG_AsVal_bool(obj12, &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Multilign_object_ProgressiveMultilign" "', argument " "13"" of type '" "bool""'");
    } 
    arg13 = static_cast< bool >(val13);
  }
  result = (int)(arg1)->ProgressiveMultilign(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_MultiTempMultilign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_MultiTempMultilign",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_MultiTempMultilign" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (int)(arg1)->MultiTempMultilign();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_WriteAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  std::string arg2 = (std::string) (std::string)"all.ali" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "allali", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Multilign_object_WriteAlignment",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_WriteAlignment" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(obj1, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Multilign_object_WriteAlignment" "', argument " "2"" of type '" "std::string const""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  result = (int)((Multilign_object const *)arg1)->WriteAlignment(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetErrorCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetErrorCode" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (int)((Multilign_object const *)arg1)->GetErrorCode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "error", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Multilign_object_GetErrorMessage",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetErrorMessage" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_GetErrorMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((Multilign_object const *)arg1)->GetErrorMessage(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetErrorDetails(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetErrorDetails",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetErrorDetails" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (arg1)->GetErrorDetails();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_ResetError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_ResetError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_ResetError" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  (arg1)->ResetError();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetMaxPairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  int arg2 = (int) (int)-1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "maxpairs", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Multilign_object_SetMaxPairs",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetMaxPairs" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_SetMaxPairs" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  result = (int)(arg1)->SetMaxPairs(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetMaxPairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetMaxPairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetMaxPairs" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (int)((Multilign_object const *)arg1)->GetMaxPairs();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_AverageLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_AverageLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_AverageLength" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (int)((Multilign_object const *)arg1)->AverageLength();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  int arg2 = (int) (int)2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "it", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Multilign_object_SetIterations",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetIterations" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_SetIterations" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  result = (int)(arg1)->SetIterations(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetIterations" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (int)((Multilign_object const *)arg1)->GetIterations();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetMaxDsv(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  float arg2 = (float) (float)1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "maxdsvchange", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Multilign_object_SetMaxDsv",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetMaxDsv" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_SetMaxDsv" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  result = (int)(arg1)->SetMaxDsv(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetMaxDsv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetMaxDsv",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetMaxDsv" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (float)((Multilign_object const *)arg1)->GetMaxDsv();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetSequenceNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetSequenceNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetSequenceNumber" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (int)((Multilign_object const *)arg1)->GetSequenceNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetIndexSeq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O|O:Multilign_object_SetIndexSeq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetIndexSeq" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_SetIndexSeq" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  result = (int)(arg1)->SetIndexSeq(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetIndexSeq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Multilign_object_SetIndexSeq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetIndexSeq" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Multilign_object_SetIndexSeq" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->SetIndexSeq(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetIndexSeq(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Multilign_object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_Multilign_object_SetIndexSeq__SWIG_0(self, args);
      }
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Multilign_object_SetIndexSeq__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Multilign_object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Multilign_object_SetIndexSeq__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Multilign_object_SetIndexSeq'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Multilign_object::SetIndexSeq(size_t)\n"
    "    Multilign_object::SetIndexSeq(std::string const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetIndexSeq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetIndexSeq",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetIndexSeq" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = ((Multilign_object const *)arg1)->GetIndexSeq();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_Randomize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_Randomize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_Randomize" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  (arg1)->Randomize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_AddOneInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 = (std::string) (std::string)"" ;
  std::string arg5 = (std::string) (std::string)"" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "seq",(char *) "ct",(char *) "constraint",(char *) "shape", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:Multilign_object_AddOneInput",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_AddOneInput" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Multilign_object_AddOneInput" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Multilign_object_AddOneInput" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj3) {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(obj3, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Multilign_object_AddOneInput" "', argument " "4"" of type '" "std::string const""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  if (obj4) {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(obj4, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Multilign_object_AddOneInput" "', argument " "5"" of type '" "std::string const""'"); 
      }
      arg5 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  result = (int)(arg1)->AddOneInput(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_RemoveOneInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "seq", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Multilign_object_RemoveOneInput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_RemoveOneInput" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Multilign_object_RemoveOneInput" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->RemoveOneInput(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetSHAPESlope(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  double arg2 = (double) (double)1.8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "slope", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Multilign_object_SetSHAPESlope",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetSHAPESlope" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_SetSHAPESlope" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  (arg1)->SetSHAPESlope(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetSHAPESlope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetSHAPESlope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetSHAPESlope" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (double)((Multilign_object const *)arg1)->GetSHAPESlope();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetSHAPEIntercept(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  double arg2 = (double) (double)-0.6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "intercept", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Multilign_object_SetSHAPEIntercept",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetSHAPEIntercept" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_SetSHAPEIntercept" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  (arg1)->SetSHAPEIntercept(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetSHAPEIntercept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetSHAPEIntercept",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetSHAPEIntercept" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (double)((Multilign_object const *)arg1)->GetSHAPEIntercept();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  double arg2 = (double) (double)310.15 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "temp", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Multilign_object_SetTemperature",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetTemperature" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Multilign_object_SetTemperature" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  (arg1)->SetTemperature(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetTemperature",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetTemperature" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (double)((Multilign_object const *)arg1)->GetTemperature();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_CleanupIntermediateFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_CleanupIntermediateFiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_CleanupIntermediateFiles" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (int)((Multilign_object const *)arg1)->CleanupIntermediateFiles();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_SetProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  ProgressHandler *arg2 = (ProgressHandler *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "Progress", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Multilign_object_SetProgress",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_SetProgress" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  if (obj1) {
    res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ProgressHandler, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Multilign_object_SetProgress" "', argument " "2"" of type '" "ProgressHandler *""'"); 
    }
    arg2 = reinterpret_cast< ProgressHandler * >(argp2);
  }
  (arg1)->SetProgress(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_StopProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_StopProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_StopProgress" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  (arg1)->StopProgress();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetProgress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ProgressHandler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetProgress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetProgress" "', argument " "1"" of type '" "Multilign_object const *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (ProgressHandler *)((Multilign_object const *)arg1)->GetProgress();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProgressHandler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetInputFilenames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetInputFilenames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetInputFilenames" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  (arg1)->GetInputFilenames();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_GetPairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_GetPairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_GetPairs" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  (arg1)->GetPairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_get_energies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_get_energies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_get_energies" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (arg1)->get_energies();
  resultobj = SWIG_NewPointerObj((new std::vector< float >(static_cast< const std::vector< float >& >(result))), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_get_dGIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_get_dGIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_get_dGIndex" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (arg1)->get_dGIndex();
  resultobj = SWIG_NewPointerObj((new std::vector< float >(static_cast< const std::vector< float >& >(result))), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Multilign_object_get_pair_alignments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Multilign_object *arg1 = (Multilign_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::string,std::allocator< std::string > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Multilign_object_get_pair_alignments",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Multilign_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multilign_object_get_pair_alignments" "', argument " "1"" of type '" "Multilign_object *""'"); 
  }
  arg1 = reinterpret_cast< Multilign_object * >(argp1);
  result = (arg1)->get_pair_alignments();
  resultobj = swig::from(static_cast< std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Multilign_object_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Multilign_object, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Oligowalk_object__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  Oligowalk_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Oligowalk_object",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Oligowalk_object" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (Oligowalk_object *)new Oligowalk_object((char const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Oligowalk_object, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Oligowalk_object__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Oligowalk_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Oligowalk_object",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Oligowalk_object" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Oligowalk_object" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Oligowalk_object *)new Oligowalk_object((char const (*))arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Oligowalk_object, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Oligowalk_object__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 = (bool) (bool)true ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Oligowalk_object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:new_Oligowalk_object",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_bool(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Oligowalk_object" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  result = (Oligowalk_object *)new Oligowalk_object(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Oligowalk_object, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Oligowalk_object(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v;
    if (argc <= 0) {
      return _wrap_new_Oligowalk_object__SWIG_2(self, args);
    }
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Oligowalk_object__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Oligowalk_object__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Oligowalk_object__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Oligowalk_object'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Oligowalk_object::Oligowalk_object(char const [])\n"
    "    Oligowalk_object::Oligowalk_object(char const [],int const)\n"
    "    Oligowalk_object::Oligowalk_object(bool const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_Oligowalk(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "oligo_length",(char *) "isDNA",(char *) "option",(char *) "oligo_concentration",(char *) "usesub",(char *) "start",(char *) "stop", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:Oligowalk_object_Oligowalk",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_Oligowalk" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oligowalk_object_Oligowalk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oligowalk_object_Oligowalk" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Oligowalk_object_Oligowalk" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Oligowalk_object_Oligowalk" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Oligowalk_object_Oligowalk" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Oligowalk_object_Oligowalk" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Oligowalk_object_Oligowalk" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  result = (int)(arg1)->Oligowalk(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_GetBreakTargetDG(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Oligowalk_object_GetBreakTargetDG",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_GetBreakTargetDG" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oligowalk_object_GetBreakTargetDG" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->GetBreakTargetDG(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_GetDuplexDG(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Oligowalk_object_GetDuplexDG",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_GetDuplexDG" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oligowalk_object_GetDuplexDG" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->GetDuplexDG(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_GetOligoOligoDG(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Oligowalk_object_GetOligoOligoDG",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_GetOligoOligoDG" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oligowalk_object_GetOligoOligoDG" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->GetOligoOligoDG(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_GetOligoSelfDG(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Oligowalk_object_GetOligoSelfDG",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_GetOligoSelfDG" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oligowalk_object_GetOligoSelfDG" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->GetOligoSelfDG(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_GetOverallDG(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Oligowalk_object_GetOverallDG",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_GetOverallDG" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oligowalk_object_GetOverallDG" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->GetOverallDG(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_GetTm(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Oligowalk_object_GetTm",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_GetTm" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oligowalk_object_GetTm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->GetTm(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_WriteReport(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  char *arg2 ;
  int arg3 ;
  bool arg4 ;
  int arg5 ;
  double arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outputfilename",(char *) "oligo_length",(char *) "isDNA",(char *) "option",(char *) "oligo_concentration",(char *) "usesub",(char *) "start",(char *) "stop", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOOO:Oligowalk_object_WriteReport",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_WriteReport" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oligowalk_object_WriteReport" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oligowalk_object_WriteReport" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Oligowalk_object_WriteReport" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Oligowalk_object_WriteReport" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Oligowalk_object_WriteReport" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Oligowalk_object_WriteReport" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Oligowalk_object_WriteReport" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Oligowalk_object_WriteReport" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  result = (int)(arg1)->WriteReport((char const (*))arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_OligoScreen(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  char *arg2 ;
  char *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "infilename",(char *) "outfilename", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:Oligowalk_object_OligoScreen",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_OligoScreen" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oligowalk_object_OligoScreen" "', argument " "2"" of type '" "char const []""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oligowalk_object_OligoScreen" "', argument " "3"" of type '" "char const []""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (int)(arg1)->OligoScreen((char const (*))arg2,(char const (*))arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oligowalk_object_GetErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "error", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Oligowalk_object_GetErrorMessage",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oligowalk_object_GetErrorMessage" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oligowalk_object_GetErrorMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (char *)(arg1)->GetErrorMessage(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Oligowalk_object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Oligowalk_object *arg1 = (Oligowalk_object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Oligowalk_object",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Oligowalk_object, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Oligowalk_object" "', argument " "1"" of type '" "Oligowalk_object *""'"); 
  }
  arg1 = reinterpret_cast< Oligowalk_object * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Oligowalk_object_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Oligowalk_object, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_hairpin_t_probability_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hp *arg1 = (hp *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:hairpin_t_probability_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hairpin_t_probability_set" "', argument " "1"" of type '" "hp *""'"); 
  }
  arg1 = reinterpret_cast< hp * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hairpin_t_probability_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->probability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hairpin_t_probability_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hp *arg1 = (hp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:hairpin_t_probability_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hairpin_t_probability_get" "', argument " "1"" of type '" "hp *""'"); 
  }
  arg1 = reinterpret_cast< hp * >(argp1);
  result = (double) ((arg1)->probability);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hairpin_t_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hp *arg1 = (hp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:hairpin_t_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hairpin_t_i_set" "', argument " "1"" of type '" "hp *""'"); 
  }
  arg1 = reinterpret_cast< hp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hairpin_t_i_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hairpin_t_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hp *arg1 = (hp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:hairpin_t_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hairpin_t_i_get" "', argument " "1"" of type '" "hp *""'"); 
  }
  arg1 = reinterpret_cast< hp * >(argp1);
  result = (int) ((arg1)->i);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hairpin_t_j_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hp *arg1 = (hp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:hairpin_t_j_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hairpin_t_j_set" "', argument " "1"" of type '" "hp *""'"); 
  }
  arg1 = reinterpret_cast< hp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hairpin_t_j_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->j = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hairpin_t_j_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hp *arg1 = (hp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:hairpin_t_j_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hairpin_t_j_get" "', argument " "1"" of type '" "hp *""'"); 
  }
  arg1 = reinterpret_cast< hp * >(argp1);
  result = (int) ((arg1)->j);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hairpin_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_hairpin_t")) SWIG_fail;
  result = (hp *)new hp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_hairpin_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hp *arg1 = (hp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_hairpin_t",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_hp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hairpin_t" "', argument " "1"" of type '" "hp *""'"); 
  }
  arg1 = reinterpret_cast< hp * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *hairpin_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_internal_loop_t_probability_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:internal_loop_t_probability_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_probability_set" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "internal_loop_t_probability_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->probability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_probability_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:internal_loop_t_probability_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_probability_get" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  result = (double) ((arg1)->probability);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:internal_loop_t_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_i_set" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "internal_loop_t_i_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:internal_loop_t_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_i_get" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  result = (int) ((arg1)->i);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_j_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:internal_loop_t_j_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_j_set" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "internal_loop_t_j_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->j = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_j_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:internal_loop_t_j_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_j_get" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  result = (int) ((arg1)->j);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_k_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:internal_loop_t_k_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_k_set" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "internal_loop_t_k_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->k = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_k_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:internal_loop_t_k_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_k_get" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  result = (int) ((arg1)->k);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_l_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:internal_loop_t_l_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_l_set" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "internal_loop_t_l_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->l = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop_t_l_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:internal_loop_t_l_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "internal_loop_t_l_get" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  result = (int) ((arg1)->l);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_internal_loop_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_internal_loop_t")) SWIG_fail;
  result = (il *)new il();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_il, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_internal_loop_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  il *arg1 = (il *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_internal_loop_t",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_il, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_internal_loop_t" "', argument " "1"" of type '" "il *""'"); 
  }
  arg1 = reinterpret_cast< il * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *internal_loop_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_il, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_basestack_t_probability_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:basestack_t_probability_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_probability_set" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basestack_t_probability_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->probability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_probability_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:basestack_t_probability_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_probability_get" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  result = (double) ((arg1)->probability);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:basestack_t_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_i_set" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basestack_t_i_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:basestack_t_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_i_get" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  result = (int) ((arg1)->i);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_j_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:basestack_t_j_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_j_set" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basestack_t_j_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->j = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_j_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:basestack_t_j_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_j_get" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  result = (int) ((arg1)->j);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_k_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:basestack_t_k_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_k_set" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basestack_t_k_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->k = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_k_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:basestack_t_k_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_k_get" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  result = (int) ((arg1)->k);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_l_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:basestack_t_l_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_l_set" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basestack_t_l_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->l = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack_t_l_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:basestack_t_l_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basestack_t_l_get" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  result = (int) ((arg1)->l);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_basestack_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_basestack_t")) SWIG_fail;
  result = (bp *)new bp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_basestack_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bp *arg1 = (bp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_basestack_t",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_basestack_t" "', argument " "1"" of type '" "bp *""'"); 
  }
  arg1 = reinterpret_cast< bp * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *basestack_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_multibranch_loop_t_probability_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb *arg1 = (mb *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:multibranch_loop_t_probability_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multibranch_loop_t_probability_set" "', argument " "1"" of type '" "mb *""'"); 
  }
  arg1 = reinterpret_cast< mb * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multibranch_loop_t_probability_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->probability = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multibranch_loop_t_probability_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb *arg1 = (mb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multibranch_loop_t_probability_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multibranch_loop_t_probability_get" "', argument " "1"" of type '" "mb *""'"); 
  }
  arg1 = reinterpret_cast< mb * >(argp1);
  result = (double) ((arg1)->probability);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multibranch_loop_t_branches_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb *arg1 = (mb *) 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *arg2 = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:multibranch_loop_t_branches_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multibranch_loop_t_branches_set" "', argument " "1"" of type '" "mb *""'"); 
  }
  arg1 = reinterpret_cast< mb * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "multibranch_loop_t_branches_set" "', argument " "2"" of type '" "std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > * >(argp2);
  if (arg1) (arg1)->branches = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multibranch_loop_t_branches_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb *arg1 = (mb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multibranch_loop_t_branches_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multibranch_loop_t_branches_get" "', argument " "1"" of type '" "mb *""'"); 
  }
  arg1 = reinterpret_cast< mb * >(argp1);
  result = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)& ((arg1)->branches);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_multibranch_loop_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_multibranch_loop_t")) SWIG_fail;
  result = (mb *)new mb();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mb, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_multibranch_loop_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb *arg1 = (mb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_multibranch_loop_t",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_multibranch_loop_t" "', argument " "1"" of type '" "mb *""'"); 
  }
  arg1 = reinterpret_cast< mb * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *multibranch_loop_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_hairpin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "p",(char *) "i",(char *) "j", NULL 
  };
  hairpin_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:hairpin",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairpin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hairpin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hairpin" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = hairpin(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new hairpin_t(static_cast< const hairpin_t& >(result))), SWIGTYPE_p_hp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_internal_loop(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "p",(char *) "i",(char *) "j",(char *) "k",(char *) "l", NULL 
  };
  internal_loop_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:internal_loop",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "internal_loop" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "internal_loop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "internal_loop" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "internal_loop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "internal_loop" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = internal_loop(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new internal_loop_t(static_cast< const internal_loop_t& >(result))), SWIGTYPE_p_il, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basestack(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "p",(char *) "i",(char *) "j",(char *) "k",(char *) "l", NULL 
  };
  basestack_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:basestack",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "basestack" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basestack" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "basestack" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "basestack" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "basestack" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = basestack(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new basestack_t(static_cast< const basestack_t& >(result))), SWIGTYPE_p_bp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multibranch_loop(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "i",(char *) "j", NULL 
  };
  multibranch_loop_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:multibranch_loop",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multibranch_loop" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multibranch_loop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = multibranch_loop(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new multibranch_loop_t(static_cast< const multibranch_loop_t& >(result))), SWIGTYPE_p_mb, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_add_branch(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  multibranch_loop_t *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "mb",(char *) "k",(char *) "l", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:add_branch",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mb,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_branch" "', argument " "1"" of type '" "multibranch_loop_t &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_branch" "', argument " "1"" of type '" "multibranch_loop_t &""'"); 
  }
  arg1 = reinterpret_cast< multibranch_loop_t * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "add_branch" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "add_branch" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  add_branch(*arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_show_hairpins(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t,std::allocator< hairpin_t > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "arg1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:show_hairpins",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "show_hairpins" "', argument " "1"" of type '" "std::vector< hairpin_t,std::allocator< hairpin_t > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "show_hairpins" "', argument " "1"" of type '" "std::vector< hairpin_t,std::allocator< hairpin_t > >""'");
    } else {
      std::vector< hairpin_t,std::allocator< hairpin_t > > * temp = reinterpret_cast< std::vector< hairpin_t,std::allocator< hairpin_t > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  show_hairpins(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_show_stacks(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< basestack_t,std::allocator< basestack_t > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "arg1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:show_stacks",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "show_stacks" "', argument " "1"" of type '" "std::vector< basestack_t,std::allocator< basestack_t > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "show_stacks" "', argument " "1"" of type '" "std::vector< basestack_t,std::allocator< basestack_t > >""'");
    } else {
      std::vector< basestack_t,std::allocator< basestack_t > > * temp = reinterpret_cast< std::vector< basestack_t,std::allocator< basestack_t > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  show_stacks(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_show_internal_loops(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t,std::allocator< internal_loop_t > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "arg1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:show_internal_loops",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "show_internal_loops" "', argument " "1"" of type '" "std::vector< internal_loop_t,std::allocator< internal_loop_t > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "show_internal_loops" "', argument " "1"" of type '" "std::vector< internal_loop_t,std::allocator< internal_loop_t > >""'");
    } else {
      std::vector< internal_loop_t,std::allocator< internal_loop_t > > * temp = reinterpret_cast< std::vector< internal_loop_t,std::allocator< internal_loop_t > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  show_internal_loops(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_show_bulge_loops(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t,std::allocator< internal_loop_t > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "arg1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:show_bulge_loops",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "show_bulge_loops" "', argument " "1"" of type '" "std::vector< internal_loop_t,std::allocator< internal_loop_t > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "show_bulge_loops" "', argument " "1"" of type '" "std::vector< internal_loop_t,std::allocator< internal_loop_t > >""'");
    } else {
      std::vector< internal_loop_t,std::allocator< internal_loop_t > > * temp = reinterpret_cast< std::vector< internal_loop_t,std::allocator< internal_loop_t > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  show_bulge_loops(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_show_mbl(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  multibranch_loop_t arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "mbl", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:show_mbl",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mb,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "show_mbl" "', argument " "1"" of type '" "multibranch_loop_t""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "show_mbl" "', argument " "1"" of type '" "multibranch_loop_t""'");
    } else {
      multibranch_loop_t * temp = reinterpret_cast< multibranch_loop_t * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  show_mbl(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mb_element_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb_element *arg1 = (mb_element *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mb_element_i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb_element, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mb_element_i_set" "', argument " "1"" of type '" "mb_element *""'"); 
  }
  arg1 = reinterpret_cast< mb_element * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mb_element_i_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mb_element_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb_element *arg1 = (mb_element *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mb_element_i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb_element, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mb_element_i_get" "', argument " "1"" of type '" "mb_element *""'"); 
  }
  arg1 = reinterpret_cast< mb_element * >(argp1);
  result = (int) ((arg1)->i);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mb_element_j_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb_element *arg1 = (mb_element *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mb_element_j_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb_element, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mb_element_j_set" "', argument " "1"" of type '" "mb_element *""'"); 
  }
  arg1 = reinterpret_cast< mb_element * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mb_element_j_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->j = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mb_element_j_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb_element *arg1 = (mb_element *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mb_element_j_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb_element, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mb_element_j_get" "', argument " "1"" of type '" "mb_element *""'"); 
  }
  arg1 = reinterpret_cast< mb_element * >(argp1);
  result = (int) ((arg1)->j);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mb_element_is_a_pair_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb_element *arg1 = (mb_element *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mb_element_is_a_pair_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb_element, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mb_element_is_a_pair_set" "', argument " "1"" of type '" "mb_element *""'"); 
  }
  arg1 = reinterpret_cast< mb_element * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mb_element_is_a_pair_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->is_a_pair = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mb_element_is_a_pair_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb_element *arg1 = (mb_element *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mb_element_is_a_pair_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb_element, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mb_element_is_a_pair_get" "', argument " "1"" of type '" "mb_element *""'"); 
  }
  arg1 = reinterpret_cast< mb_element * >(argp1);
  result = (bool) ((arg1)->is_a_pair);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mb_element__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > arg1 ;
  PyObject * obj0 = 0 ;
  mb_element *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mb_element",&obj0)) SWIG_fail;
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_mb_element" "', argument " "1"" of type '" "std::pair< int,int >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (mb_element *)new mb_element(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mb_element, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mb_element__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  mb_element *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mb_element",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_mb_element" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (mb_element *)new mb_element(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mb_element, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mb_element(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_mb_element__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< int,int >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mb_element__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_mb_element'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mb_element::mb_element(std::pair< int,int >)\n"
    "    mb_element::mb_element(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_mb_element(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  mb_element *arg1 = (mb_element *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mb_element",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mb_element, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mb_element" "', argument " "1"" of type '" "mb_element *""'"); 
  }
  arg1 = reinterpret_cast< mb_element * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mb_element_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mb_element, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ProbScan__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 = (bool) true ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ProbScan *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O|O:new_ProbScan",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProbScan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ProbScan" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  result = (ProbScan *)new ProbScan(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProbScan, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProbScan__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 ;
  bool arg2 ;
  bool arg3 = (bool) true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ProbScan *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|O:new_ProbScan",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ProbScan" "', argument " "1"" of type '" "char const []""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ProbScan" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ProbScan" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (ProbScan *)new ProbScan((char const (*))arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProbScan, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProbScan(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_ProbScan__SWIG_0(self, args);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ProbScan__SWIG_0(self, args);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_ProbScan__SWIG_1(self, args);
        }
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ProbScan__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ProbScan'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ProbScan::ProbScan(std::string,bool)\n"
    "    ProbScan::ProbScan(char const [],bool,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProbScan_probability_of_hairpin(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ProbScan_probability_of_hairpin",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbScan_probability_of_hairpin" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbScan_probability_of_hairpin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbScan_probability_of_hairpin" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->probability_of_hairpin(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbScan_probability_of_all_hairpins(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "min",(char *) "max",(char *) "threshold", NULL 
  };
  std::vector< hairpin_t,std::allocator< hairpin_t > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:ProbScan_probability_of_all_hairpins",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbScan_probability_of_all_hairpins" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbScan_probability_of_all_hairpins" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbScan_probability_of_all_hairpins" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ProbScan_probability_of_all_hairpins" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (arg1)->probability_of_all_hairpins(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::vector< hairpin_t,std::allocator< hairpin_t > >(static_cast< const std::vector< hairpin_t,std::allocator< hairpin_t > >& >(result))), SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbScan_probability_of_internal_loop(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "k",(char *) "l", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:ProbScan_probability_of_internal_loop",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbScan_probability_of_internal_loop" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbScan_probability_of_internal_loop" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbScan_probability_of_internal_loop" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ProbScan_probability_of_internal_loop" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ProbScan_probability_of_internal_loop" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (double)(arg1)->probability_of_internal_loop(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbScan_probability_of_all_internal_loops(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  double arg2 ;
  std::string arg3 = (std::string) std::string("both") ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "threshold",(char *) "mode", NULL 
  };
  std::vector< internal_loop_t,std::allocator< internal_loop_t > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:ProbScan_probability_of_all_internal_loops",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbScan_probability_of_all_internal_loops" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbScan_probability_of_all_internal_loops" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(obj2, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ProbScan_probability_of_all_internal_loops" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  result = (arg1)->probability_of_all_internal_loops(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::vector< internal_loop_t,std::allocator< internal_loop_t > >(static_cast< const std::vector< internal_loop_t,std::allocator< internal_loop_t > >& >(result))), SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbScan_probability_of_stack(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ProbScan_probability_of_stack",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbScan_probability_of_stack" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbScan_probability_of_stack" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbScan_probability_of_stack" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->probability_of_stack(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbScan_probability_of_helix(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "how_many_stacks", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:ProbScan_probability_of_helix",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbScan_probability_of_helix" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbScan_probability_of_helix" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbScan_probability_of_helix" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ProbScan_probability_of_helix" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (double)(arg1)->probability_of_helix(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbScan_probability_of_all_helices(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "threshold",(char *) "length", NULL 
  };
  std::vector< basestack_t,std::allocator< basestack_t > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ProbScan_probability_of_all_helices",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbScan_probability_of_all_helices" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProbScan_probability_of_all_helices" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProbScan_probability_of_all_helices" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->probability_of_all_helices(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::vector< basestack_t,std::allocator< basestack_t > >(static_cast< const std::vector< basestack_t,std::allocator< basestack_t > >& >(result))), SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProbScan_probability_of_multibranch_loop(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  multibranch_loop_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mb", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ProbScan_probability_of_multibranch_loop",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProbScan_probability_of_multibranch_loop" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProbScan_probability_of_multibranch_loop" "', argument " "2"" of type '" "multibranch_loop_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProbScan_probability_of_multibranch_loop" "', argument " "2"" of type '" "multibranch_loop_t const &""'"); 
  }
  arg2 = reinterpret_cast< multibranch_loop_t * >(argp2);
  result = (double)(arg1)->probability_of_multibranch_loop((multibranch_loop_t const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ProbScan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ProbScan *arg1 = (ProbScan *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ProbScan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProbScan, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProbScan" "', argument " "1"" of type '" "ProbScan *""'"); 
  }
  arg1 = reinterpret_cast< ProbScan * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProbScan_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ProbScan, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_show_mb_element_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< mb_element,std::allocator< mb_element > > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "arg1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:show_mb_element_array",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_mb_element_std__allocatorT_mb_element_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "show_mb_element_array" "', argument " "1"" of type '" "std::vector< mb_element,std::allocator< mb_element > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "show_mb_element_array" "', argument " "1"" of type '" "std::vector< mb_element,std::allocator< mb_element > >""'");
    } else {
      std::vector< mb_element,std::allocator< mb_element > > * temp = reinterpret_cast< std::vector< mb_element,std::allocator< mb_element > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  show_mb_element_array(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_iterator" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_hairpin_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___nonzero__" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (bool)std_vector_Sl_hairpin_t_Sg____nonzero__((std::vector< hp > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___bool__" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (bool)std_vector_Sl_hairpin_t_Sg____bool__((std::vector< hp > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< hp >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___len__" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = std_vector_Sl_hairpin_t_Sg____len__((std::vector< hp > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::difference_type arg2 ;
  std::vector< hp >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< hp,std::allocator< hp > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:HairpinLoopVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___getslice__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector___getslice__" "', argument " "2"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HairpinLoopVector___getslice__" "', argument " "3"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hp >::difference_type >(val3);
  try {
    result = (std::vector< hp,std::allocator< hp > > *)std_vector_Sl_hairpin_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::difference_type arg2 ;
  std::vector< hp >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HairpinLoopVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___setslice__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector___setslice__" "', argument " "2"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HairpinLoopVector___setslice__" "', argument " "3"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hp >::difference_type >(val3);
  try {
    std_vector_Sl_hairpin_t_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::difference_type arg2 ;
  std::vector< hp >::difference_type arg3 ;
  std::vector< hp,std::allocator< hp > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:HairpinLoopVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___setslice__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector___setslice__" "', argument " "2"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HairpinLoopVector___setslice__" "', argument " "3"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hp >::difference_type >(val3);
  {
    std::vector< hp,std::allocator< hp > > *ptr = (std::vector< hp,std::allocator< hp > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HairpinLoopVector___setslice__" "', argument " "4"" of type '" "std::vector< hp,std::allocator< hp > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector___setslice__" "', argument " "4"" of type '" "std::vector< hp,std::allocator< hp > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_hairpin_t_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< hp,std::allocator< hp > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HairpinLoopVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< hp,std::allocator< hp > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HairpinLoopVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HairpinLoopVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hairpin_t >::__setslice__(std::vector< hp >::difference_type,std::vector< hp >::difference_type)\n"
    "    std::vector< hairpin_t >::__setslice__(std::vector< hp >::difference_type,std::vector< hp >::difference_type,std::vector< hp,std::allocator< hp > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::difference_type arg2 ;
  std::vector< hp >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:HairpinLoopVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___delslice__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector___delslice__" "', argument " "2"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HairpinLoopVector___delslice__" "', argument " "3"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hp >::difference_type >(val3);
  try {
    std_vector_Sl_hairpin_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HairpinLoopVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___delitem__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector___delitem__" "', argument " "2"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::difference_type >(val2);
  try {
    std_vector_Sl_hairpin_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< hp,std::allocator< hp > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HairpinLoopVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___getitem__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< hp,std::allocator< hp > > *)std_vector_Sl_hairpin_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< hp,std::allocator< hp > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HairpinLoopVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< hp,std::allocator< hp > > *ptr = (std::vector< hp,std::allocator< hp > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HairpinLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< hp,std::allocator< hp > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< hp,std::allocator< hp > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_hairpin_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< hp,std::allocator< hp > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HairpinLoopVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_hairpin_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HairpinLoopVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___delitem__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_hairpin_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HairpinLoopVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HairpinLoopVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HairpinLoopVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hairpin_t >::__delitem__(std::vector< hp >::difference_type)\n"
    "    std::vector< hairpin_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< hp >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HairpinLoopVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___getitem__" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector___getitem__" "', argument " "2"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::difference_type >(val2);
  try {
    result = (std::vector< hp >::value_type *) &std_vector_Sl_hairpin_t_Sg____getitem____SWIG_1((std::vector< hp > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HairpinLoopVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HairpinLoopVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HairpinLoopVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hairpin_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< hairpin_t >::__getitem__(std::vector< hp >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::difference_type arg2 ;
  std::vector< hp >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HairpinLoopVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector___setitem__" "', argument " "2"" of type '" "std::vector< hp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_hp,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HairpinLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hp >::value_type * >(argp3);
  try {
    std_vector_Sl_hairpin_t_Sg____setitem____SWIG_2(arg1,arg2,(hp const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HairpinLoopVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< hp,std::allocator< hp > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HairpinLoopVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hp, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HairpinLoopVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HairpinLoopVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hairpin_t >::__setitem__(PySliceObject *,std::vector< hp,std::allocator< hp > > const &)\n"
    "    std::vector< hairpin_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< hairpin_t >::__setitem__(std::vector< hp >::difference_type,std::vector< hp >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< hp >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_pop" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  try {
    result = std_vector_Sl_hairpin_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< hp >::value_type(static_cast< const std::vector< hp >::value_type& >(result))), SWIGTYPE_p_hp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:HairpinLoopVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_append" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_hp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HairpinLoopVector_append" "', argument " "2"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector_append" "', argument " "2"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hp >::value_type * >(argp2);
  std_vector_Sl_hairpin_t_Sg__append(arg1,(hp const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HairpinLoopVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HairpinLoopVector")) SWIG_fail;
  result = (std::vector< hairpin_t > *)new std::vector< hairpin_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HairpinLoopVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< hairpin_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HairpinLoopVector",&obj0)) SWIG_fail;
  {
    std::vector< hp,std::allocator< hp > > *ptr = (std::vector< hp,std::allocator< hp > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HairpinLoopVector" "', argument " "1"" of type '" "std::vector< hairpin_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HairpinLoopVector" "', argument " "1"" of type '" "std::vector< hairpin_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< hairpin_t > *)new std::vector< hairpin_t >((std::vector< hairpin_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_empty" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (bool)((std::vector< hairpin_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< hp >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_size" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = ((std::vector< hairpin_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hairpin_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:HairpinLoopVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_swap" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HairpinLoopVector_swap" "', argument " "2"" of type '" "std::vector< hairpin_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector_swap" "', argument " "2"" of type '" "std::vector< hairpin_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hairpin_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_begin" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_end" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< hp >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_rbegin" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hp >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< hp >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_rend" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hp >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_clear" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< hp > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_get_allocator" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = ((std::vector< hairpin_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< hp >::allocator_type(static_cast< const std::vector< hp >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_hp_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HairpinLoopVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hp >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< hairpin_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HairpinLoopVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HairpinLoopVector" "', argument " "1"" of type '" "std::vector< hp >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hp >::size_type >(val1);
  result = (std::vector< hairpin_t > *)new std::vector< hairpin_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_pop_back" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HairpinLoopVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_resize" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector_resize" "', argument " "2"" of type '" "std::vector< hp >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HairpinLoopVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_erase" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_erase" "', argument " "2"" of type '" "std::vector< hp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_erase" "', argument " "2"" of type '" "std::vector< hp >::iterator""'");
    }
  }
  result = std_vector_Sl_hairpin_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > arg2 ;
  SwigValueWrapper< std::vector< hp >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HairpinLoopVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_erase" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_erase" "', argument " "2"" of type '" "std::vector< hp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_erase" "', argument " "2"" of type '" "std::vector< hp >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_erase" "', argument " "3"" of type '" "std::vector< hp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_erase" "', argument " "3"" of type '" "std::vector< hp >::iterator""'");
    }
  }
  result = std_vector_Sl_hairpin_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HairpinLoopVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HairpinLoopVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HairpinLoopVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hairpin_t >::erase(std::vector< hp >::iterator)\n"
    "    std::vector< hairpin_t >::erase(std::vector< hp >::iterator,std::vector< hp >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_HairpinLoopVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hp >::size_type arg1 ;
  std::vector< hp >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< hairpin_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_HairpinLoopVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HairpinLoopVector" "', argument " "1"" of type '" "std::vector< hp >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hp >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_hp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HairpinLoopVector" "', argument " "2"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HairpinLoopVector" "', argument " "2"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hp >::value_type * >(argp2);
  result = (std::vector< hairpin_t > *)new std::vector< hairpin_t >(arg1,(std::vector< hp >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HairpinLoopVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_HairpinLoopVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_HairpinLoopVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HairpinLoopVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hp, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HairpinLoopVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HairpinLoopVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hairpin_t >::vector()\n"
    "    std::vector< hairpin_t >::vector(std::vector< hairpin_t > const &)\n"
    "    std::vector< hairpin_t >::vector(std::vector< hp >::size_type)\n"
    "    std::vector< hairpin_t >::vector(std::vector< hp >::size_type,std::vector< hp >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:HairpinLoopVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_push_back" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_hp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HairpinLoopVector_push_back" "', argument " "2"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector_push_back" "', argument " "2"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hp >::value_type * >(argp2);
  (arg1)->push_back((std::vector< hp >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< hp >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_front" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (std::vector< hp >::value_type *) &((std::vector< hairpin_t > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< hp >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_back" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = (std::vector< hp >::value_type *) &((std::vector< hairpin_t > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::size_type arg2 ;
  std::vector< hp >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:HairpinLoopVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_assign" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector_assign" "', argument " "2"" of type '" "std::vector< hp >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_hp,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HairpinLoopVector_assign" "', argument " "3"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector_assign" "', argument " "3"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hp >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< hp >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::size_type arg2 ;
  std::vector< hp >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HairpinLoopVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_resize" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector_resize" "', argument " "2"" of type '" "std::vector< hp >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_hp,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HairpinLoopVector_resize" "', argument " "3"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector_resize" "', argument " "3"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hp >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< hp >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HairpinLoopVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hp, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HairpinLoopVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HairpinLoopVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hairpin_t >::resize(std::vector< hp >::size_type)\n"
    "    std::vector< hairpin_t >::resize(std::vector< hp >::size_type,std::vector< hp >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > arg2 ;
  std::vector< hp >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HairpinLoopVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_insert" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_insert" "', argument " "2"" of type '" "std::vector< hp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_insert" "', argument " "2"" of type '" "std::vector< hp >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_hp,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HairpinLoopVector_insert" "', argument " "3"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector_insert" "', argument " "3"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hp >::value_type * >(argp3);
  result = std_vector_Sl_hairpin_t_Sg__insert__SWIG_0(arg1,arg2,(hp const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  SwigValueWrapper< std::vector< hp >::iterator > arg2 ;
  std::vector< hp >::size_type arg3 ;
  std::vector< hp >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:HairpinLoopVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_insert" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_insert" "', argument " "2"" of type '" "std::vector< hp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HairpinLoopVector_insert" "', argument " "2"" of type '" "std::vector< hp >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HairpinLoopVector_insert" "', argument " "3"" of type '" "std::vector< hp >::size_type""'");
  } 
  arg3 = static_cast< std::vector< hp >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_hp,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HairpinLoopVector_insert" "', argument " "4"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HairpinLoopVector_insert" "', argument " "4"" of type '" "std::vector< hp >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< hp >::value_type * >(argp4);
  std_vector_Sl_hairpin_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(hp const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hp, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HairpinLoopVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hp,std::allocator< hp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hp >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_hp, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HairpinLoopVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HairpinLoopVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hairpin_t >::insert(std::vector< hp >::iterator,std::vector< hp >::value_type const &)\n"
    "    std::vector< hairpin_t >::insert(std::vector< hp >::iterator,std::vector< hp >::size_type,std::vector< hp >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  std::vector< hp >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:HairpinLoopVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_reserve" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairpinLoopVector_reserve" "', argument " "2"" of type '" "std::vector< hp >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hp >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HairpinLoopVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< hp >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HairpinLoopVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairpinLoopVector_capacity" "', argument " "1"" of type '" "std::vector< hairpin_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  result = ((std::vector< hairpin_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HairpinLoopVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hairpin_t > *arg1 = (std::vector< hairpin_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HairpinLoopVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HairpinLoopVector" "', argument " "1"" of type '" "std::vector< hairpin_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hairpin_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HairpinLoopVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_hp_std__allocatorT_hp_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InternalLoopVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_iterator" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_internal_loop_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___nonzero__" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (bool)std_vector_Sl_internal_loop_t_Sg____nonzero__((std::vector< il > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___bool__" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (bool)std_vector_Sl_internal_loop_t_Sg____bool__((std::vector< il > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< il >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___len__" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = std_vector_Sl_internal_loop_t_Sg____len__((std::vector< il > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::difference_type arg2 ;
  std::vector< il >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< il,std::allocator< il > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:InternalLoopVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___getslice__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector___getslice__" "', argument " "2"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< il >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InternalLoopVector___getslice__" "', argument " "3"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< il >::difference_type >(val3);
  try {
    result = (std::vector< il,std::allocator< il > > *)std_vector_Sl_internal_loop_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::difference_type arg2 ;
  std::vector< il >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InternalLoopVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___setslice__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector___setslice__" "', argument " "2"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< il >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InternalLoopVector___setslice__" "', argument " "3"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< il >::difference_type >(val3);
  try {
    std_vector_Sl_internal_loop_t_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::difference_type arg2 ;
  std::vector< il >::difference_type arg3 ;
  std::vector< il,std::allocator< il > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:InternalLoopVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___setslice__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector___setslice__" "', argument " "2"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< il >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InternalLoopVector___setslice__" "', argument " "3"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< il >::difference_type >(val3);
  {
    std::vector< il,std::allocator< il > > *ptr = (std::vector< il,std::allocator< il > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InternalLoopVector___setslice__" "', argument " "4"" of type '" "std::vector< il,std::allocator< il > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector___setslice__" "', argument " "4"" of type '" "std::vector< il,std::allocator< il > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_internal_loop_t_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< il,std::allocator< il > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InternalLoopVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< il,std::allocator< il > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InternalLoopVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InternalLoopVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< internal_loop_t >::__setslice__(std::vector< il >::difference_type,std::vector< il >::difference_type)\n"
    "    std::vector< internal_loop_t >::__setslice__(std::vector< il >::difference_type,std::vector< il >::difference_type,std::vector< il,std::allocator< il > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::difference_type arg2 ;
  std::vector< il >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:InternalLoopVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___delslice__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector___delslice__" "', argument " "2"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< il >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InternalLoopVector___delslice__" "', argument " "3"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< il >::difference_type >(val3);
  try {
    std_vector_Sl_internal_loop_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InternalLoopVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___delitem__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector___delitem__" "', argument " "2"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< il >::difference_type >(val2);
  try {
    std_vector_Sl_internal_loop_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< il,std::allocator< il > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InternalLoopVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___getitem__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< il,std::allocator< il > > *)std_vector_Sl_internal_loop_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< il,std::allocator< il > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InternalLoopVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< il,std::allocator< il > > *ptr = (std::vector< il,std::allocator< il > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InternalLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< il,std::allocator< il > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< il,std::allocator< il > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_internal_loop_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< il,std::allocator< il > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InternalLoopVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_internal_loop_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InternalLoopVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___delitem__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_internal_loop_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_InternalLoopVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InternalLoopVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InternalLoopVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< internal_loop_t >::__delitem__(std::vector< il >::difference_type)\n"
    "    std::vector< internal_loop_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< il >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InternalLoopVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___getitem__" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector___getitem__" "', argument " "2"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< il >::difference_type >(val2);
  try {
    result = (std::vector< il >::value_type *) &std_vector_Sl_internal_loop_t_Sg____getitem____SWIG_1((std::vector< il > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_il, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_InternalLoopVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InternalLoopVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InternalLoopVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< internal_loop_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< internal_loop_t >::__getitem__(std::vector< il >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::difference_type arg2 ;
  std::vector< il >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InternalLoopVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector___setitem__" "', argument " "2"" of type '" "std::vector< il >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< il >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_il,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InternalLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< il >::value_type * >(argp3);
  try {
    std_vector_Sl_internal_loop_t_Sg____setitem____SWIG_2(arg1,arg2,(il const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_InternalLoopVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< il,std::allocator< il > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InternalLoopVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_il, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InternalLoopVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InternalLoopVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< internal_loop_t >::__setitem__(PySliceObject *,std::vector< il,std::allocator< il > > const &)\n"
    "    std::vector< internal_loop_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< internal_loop_t >::__setitem__(std::vector< il >::difference_type,std::vector< il >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< il >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_pop" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  try {
    result = std_vector_Sl_internal_loop_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< il >::value_type(static_cast< const std::vector< il >::value_type& >(result))), SWIGTYPE_p_il, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:InternalLoopVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_append" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_il,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InternalLoopVector_append" "', argument " "2"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector_append" "', argument " "2"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< il >::value_type * >(argp2);
  std_vector_Sl_internal_loop_t_Sg__append(arg1,(il const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InternalLoopVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InternalLoopVector")) SWIG_fail;
  result = (std::vector< internal_loop_t > *)new std::vector< internal_loop_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InternalLoopVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< internal_loop_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InternalLoopVector",&obj0)) SWIG_fail;
  {
    std::vector< il,std::allocator< il > > *ptr = (std::vector< il,std::allocator< il > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InternalLoopVector" "', argument " "1"" of type '" "std::vector< internal_loop_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InternalLoopVector" "', argument " "1"" of type '" "std::vector< internal_loop_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< internal_loop_t > *)new std::vector< internal_loop_t >((std::vector< internal_loop_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_empty" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (bool)((std::vector< internal_loop_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< il >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_size" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = ((std::vector< internal_loop_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< internal_loop_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:InternalLoopVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_swap" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InternalLoopVector_swap" "', argument " "2"" of type '" "std::vector< internal_loop_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector_swap" "', argument " "2"" of type '" "std::vector< internal_loop_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< internal_loop_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< il >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_begin" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< il >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< il >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_end" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< il >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< il >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_rbegin" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< il >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< il >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_rend" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< il >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_clear" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< il > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_get_allocator" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = ((std::vector< internal_loop_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< il >::allocator_type(static_cast< const std::vector< il >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_il_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InternalLoopVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< il >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< internal_loop_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InternalLoopVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InternalLoopVector" "', argument " "1"" of type '" "std::vector< il >::size_type""'");
  } 
  arg1 = static_cast< std::vector< il >::size_type >(val1);
  result = (std::vector< internal_loop_t > *)new std::vector< internal_loop_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_pop_back" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InternalLoopVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_resize" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector_resize" "', argument " "2"" of type '" "std::vector< il >::size_type""'");
  } 
  arg2 = static_cast< std::vector< il >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  SwigValueWrapper< std::vector< il >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< il >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InternalLoopVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_erase" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_erase" "', argument " "2"" of type '" "std::vector< il >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< il >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_erase" "', argument " "2"" of type '" "std::vector< il >::iterator""'");
    }
  }
  result = std_vector_Sl_internal_loop_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< il >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  SwigValueWrapper< std::vector< il >::iterator > arg2 ;
  SwigValueWrapper< std::vector< il >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< il >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InternalLoopVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_erase" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_erase" "', argument " "2"" of type '" "std::vector< il >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< il >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_erase" "', argument " "2"" of type '" "std::vector< il >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_erase" "', argument " "3"" of type '" "std::vector< il >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< il >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_erase" "', argument " "3"" of type '" "std::vector< il >::iterator""'");
    }
  }
  result = std_vector_Sl_internal_loop_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< il >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_InternalLoopVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_InternalLoopVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InternalLoopVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< internal_loop_t >::erase(std::vector< il >::iterator)\n"
    "    std::vector< internal_loop_t >::erase(std::vector< il >::iterator,std::vector< il >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_InternalLoopVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< il >::size_type arg1 ;
  std::vector< il >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< internal_loop_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InternalLoopVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InternalLoopVector" "', argument " "1"" of type '" "std::vector< il >::size_type""'");
  } 
  arg1 = static_cast< std::vector< il >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_il,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_InternalLoopVector" "', argument " "2"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InternalLoopVector" "', argument " "2"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< il >::value_type * >(argp2);
  result = (std::vector< internal_loop_t > *)new std::vector< internal_loop_t >(arg1,(std::vector< il >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InternalLoopVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InternalLoopVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InternalLoopVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InternalLoopVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_il, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InternalLoopVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_InternalLoopVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< internal_loop_t >::vector()\n"
    "    std::vector< internal_loop_t >::vector(std::vector< internal_loop_t > const &)\n"
    "    std::vector< internal_loop_t >::vector(std::vector< il >::size_type)\n"
    "    std::vector< internal_loop_t >::vector(std::vector< il >::size_type,std::vector< il >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:InternalLoopVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_push_back" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_il,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InternalLoopVector_push_back" "', argument " "2"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector_push_back" "', argument " "2"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< il >::value_type * >(argp2);
  (arg1)->push_back((std::vector< il >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< il >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_front" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (std::vector< il >::value_type *) &((std::vector< internal_loop_t > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_il, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< il >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_back" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = (std::vector< il >::value_type *) &((std::vector< internal_loop_t > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_il, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::size_type arg2 ;
  std::vector< il >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:InternalLoopVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_assign" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector_assign" "', argument " "2"" of type '" "std::vector< il >::size_type""'");
  } 
  arg2 = static_cast< std::vector< il >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_il,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InternalLoopVector_assign" "', argument " "3"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector_assign" "', argument " "3"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< il >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< il >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::size_type arg2 ;
  std::vector< il >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InternalLoopVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_resize" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector_resize" "', argument " "2"" of type '" "std::vector< il >::size_type""'");
  } 
  arg2 = static_cast< std::vector< il >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_il,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InternalLoopVector_resize" "', argument " "3"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector_resize" "', argument " "3"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< il >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< il >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InternalLoopVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_il, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InternalLoopVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InternalLoopVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< internal_loop_t >::resize(std::vector< il >::size_type)\n"
    "    std::vector< internal_loop_t >::resize(std::vector< il >::size_type,std::vector< il >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  SwigValueWrapper< std::vector< il >::iterator > arg2 ;
  std::vector< il >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< il >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InternalLoopVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_insert" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_insert" "', argument " "2"" of type '" "std::vector< il >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< il >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_insert" "', argument " "2"" of type '" "std::vector< il >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_il,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InternalLoopVector_insert" "', argument " "3"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector_insert" "', argument " "3"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< il >::value_type * >(argp3);
  result = std_vector_Sl_internal_loop_t_Sg__insert__SWIG_0(arg1,arg2,(il const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< il >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  SwigValueWrapper< std::vector< il >::iterator > arg2 ;
  std::vector< il >::size_type arg3 ;
  std::vector< il >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:InternalLoopVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_insert" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_insert" "', argument " "2"" of type '" "std::vector< il >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< il >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "InternalLoopVector_insert" "', argument " "2"" of type '" "std::vector< il >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InternalLoopVector_insert" "', argument " "3"" of type '" "std::vector< il >::size_type""'");
  } 
  arg3 = static_cast< std::vector< il >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_il,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InternalLoopVector_insert" "', argument " "4"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalLoopVector_insert" "', argument " "4"" of type '" "std::vector< il >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< il >::value_type * >(argp4);
  std_vector_Sl_internal_loop_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(il const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_il, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InternalLoopVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< il,std::allocator< il > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< il >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_il, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InternalLoopVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'InternalLoopVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< internal_loop_t >::insert(std::vector< il >::iterator,std::vector< il >::value_type const &)\n"
    "    std::vector< internal_loop_t >::insert(std::vector< il >::iterator,std::vector< il >::size_type,std::vector< il >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  std::vector< il >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:InternalLoopVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_reserve" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InternalLoopVector_reserve" "', argument " "2"" of type '" "std::vector< il >::size_type""'");
  } 
  arg2 = static_cast< std::vector< il >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalLoopVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< il >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InternalLoopVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InternalLoopVector_capacity" "', argument " "1"" of type '" "std::vector< internal_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  result = ((std::vector< internal_loop_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InternalLoopVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< internal_loop_t > *arg1 = (std::vector< internal_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InternalLoopVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InternalLoopVector" "', argument " "1"" of type '" "std::vector< internal_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< internal_loop_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InternalLoopVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_il_std__allocatorT_il_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MultibranchLoopVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_iterator" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_multibranch_loop_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___nonzero__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (bool)std_vector_Sl_multibranch_loop_t_Sg____nonzero__((std::vector< mb > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___bool__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (bool)std_vector_Sl_multibranch_loop_t_Sg____bool__((std::vector< mb > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mb >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___len__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = std_vector_Sl_multibranch_loop_t_Sg____len__((std::vector< mb > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::difference_type arg2 ;
  std::vector< mb >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< mb,std::allocator< mb > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:MultibranchLoopVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___getslice__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector___getslice__" "', argument " "2"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultibranchLoopVector___getslice__" "', argument " "3"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mb >::difference_type >(val3);
  try {
    result = (std::vector< mb,std::allocator< mb > > *)std_vector_Sl_multibranch_loop_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::difference_type arg2 ;
  std::vector< mb >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultibranchLoopVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___setslice__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector___setslice__" "', argument " "2"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultibranchLoopVector___setslice__" "', argument " "3"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mb >::difference_type >(val3);
  try {
    std_vector_Sl_multibranch_loop_t_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::difference_type arg2 ;
  std::vector< mb >::difference_type arg3 ;
  std::vector< mb,std::allocator< mb > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MultibranchLoopVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___setslice__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector___setslice__" "', argument " "2"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultibranchLoopVector___setslice__" "', argument " "3"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mb >::difference_type >(val3);
  {
    std::vector< mb,std::allocator< mb > > *ptr = (std::vector< mb,std::allocator< mb > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MultibranchLoopVector___setslice__" "', argument " "4"" of type '" "std::vector< mb,std::allocator< mb > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector___setslice__" "', argument " "4"" of type '" "std::vector< mb,std::allocator< mb > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_multibranch_loop_t_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< mb,std::allocator< mb > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MultibranchLoopVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< mb,std::allocator< mb > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MultibranchLoopVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultibranchLoopVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< multibranch_loop_t >::__setslice__(std::vector< mb >::difference_type,std::vector< mb >::difference_type)\n"
    "    std::vector< multibranch_loop_t >::__setslice__(std::vector< mb >::difference_type,std::vector< mb >::difference_type,std::vector< mb,std::allocator< mb > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::difference_type arg2 ;
  std::vector< mb >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:MultibranchLoopVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___delslice__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector___delslice__" "', argument " "2"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultibranchLoopVector___delslice__" "', argument " "3"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< mb >::difference_type >(val3);
  try {
    std_vector_Sl_multibranch_loop_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultibranchLoopVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___delitem__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector___delitem__" "', argument " "2"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::difference_type >(val2);
  try {
    std_vector_Sl_multibranch_loop_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mb,std::allocator< mb > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultibranchLoopVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___getitem__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< mb,std::allocator< mb > > *)std_vector_Sl_multibranch_loop_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< mb,std::allocator< mb > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultibranchLoopVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< mb,std::allocator< mb > > *ptr = (std::vector< mb,std::allocator< mb > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultibranchLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< mb,std::allocator< mb > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< mb,std::allocator< mb > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_multibranch_loop_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< mb,std::allocator< mb > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultibranchLoopVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_multibranch_loop_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultibranchLoopVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___delitem__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_multibranch_loop_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MultibranchLoopVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MultibranchLoopVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultibranchLoopVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< multibranch_loop_t >::__delitem__(std::vector< mb >::difference_type)\n"
    "    std::vector< multibranch_loop_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< mb >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultibranchLoopVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___getitem__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector___getitem__" "', argument " "2"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::difference_type >(val2);
  try {
    result = (std::vector< mb >::value_type *) &std_vector_Sl_multibranch_loop_t_Sg____getitem____SWIG_1((std::vector< mb > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MultibranchLoopVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MultibranchLoopVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultibranchLoopVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< multibranch_loop_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< multibranch_loop_t >::__getitem__(std::vector< mb >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::difference_type arg2 ;
  std::vector< mb >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultibranchLoopVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector___setitem__" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector___setitem__" "', argument " "2"" of type '" "std::vector< mb >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultibranchLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector___setitem__" "', argument " "3"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mb >::value_type * >(argp3);
  try {
    std_vector_Sl_multibranch_loop_t_Sg____setitem____SWIG_2(arg1,arg2,(mb const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MultibranchLoopVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< mb,std::allocator< mb > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MultibranchLoopVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mb, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MultibranchLoopVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultibranchLoopVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< multibranch_loop_t >::__setitem__(PySliceObject *,std::vector< mb,std::allocator< mb > > const &)\n"
    "    std::vector< multibranch_loop_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< multibranch_loop_t >::__setitem__(std::vector< mb >::difference_type,std::vector< mb >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mb >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_pop" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  try {
    result = std_vector_Sl_multibranch_loop_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< mb >::value_type(static_cast< const std::vector< mb >::value_type& >(result))), SWIGTYPE_p_mb, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MultibranchLoopVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_append" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultibranchLoopVector_append" "', argument " "2"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector_append" "', argument " "2"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mb >::value_type * >(argp2);
  std_vector_Sl_multibranch_loop_t_Sg__append(arg1,(mb const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MultibranchLoopVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MultibranchLoopVector")) SWIG_fail;
  result = (std::vector< multibranch_loop_t > *)new std::vector< multibranch_loop_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MultibranchLoopVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< multibranch_loop_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MultibranchLoopVector",&obj0)) SWIG_fail;
  {
    std::vector< mb,std::allocator< mb > > *ptr = (std::vector< mb,std::allocator< mb > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MultibranchLoopVector" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultibranchLoopVector" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< multibranch_loop_t > *)new std::vector< multibranch_loop_t >((std::vector< multibranch_loop_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_empty" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (bool)((std::vector< multibranch_loop_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mb >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_size" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = ((std::vector< multibranch_loop_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< multibranch_loop_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MultibranchLoopVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_swap" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultibranchLoopVector_swap" "', argument " "2"" of type '" "std::vector< multibranch_loop_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector_swap" "', argument " "2"" of type '" "std::vector< multibranch_loop_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_begin" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mb >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_end" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mb >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< mb >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_rbegin" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mb >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< mb >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_rend" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mb >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_clear" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< mb > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_get_allocator" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = ((std::vector< multibranch_loop_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< mb >::allocator_type(static_cast< const std::vector< mb >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_mb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MultibranchLoopVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mb >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< multibranch_loop_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MultibranchLoopVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MultibranchLoopVector" "', argument " "1"" of type '" "std::vector< mb >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mb >::size_type >(val1);
  result = (std::vector< multibranch_loop_t > *)new std::vector< multibranch_loop_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_pop_back" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultibranchLoopVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_resize" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector_resize" "', argument " "2"" of type '" "std::vector< mb >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultibranchLoopVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_erase" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_erase" "', argument " "2"" of type '" "std::vector< mb >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mb >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_erase" "', argument " "2"" of type '" "std::vector< mb >::iterator""'");
    }
  }
  result = std_vector_Sl_multibranch_loop_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mb >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > arg2 ;
  SwigValueWrapper< std::vector< mb >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultibranchLoopVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_erase" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_erase" "', argument " "2"" of type '" "std::vector< mb >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mb >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_erase" "', argument " "2"" of type '" "std::vector< mb >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_erase" "', argument " "3"" of type '" "std::vector< mb >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mb >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_erase" "', argument " "3"" of type '" "std::vector< mb >::iterator""'");
    }
  }
  result = std_vector_Sl_multibranch_loop_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mb >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_MultibranchLoopVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_MultibranchLoopVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultibranchLoopVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< multibranch_loop_t >::erase(std::vector< mb >::iterator)\n"
    "    std::vector< multibranch_loop_t >::erase(std::vector< mb >::iterator,std::vector< mb >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_MultibranchLoopVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< mb >::size_type arg1 ;
  std::vector< mb >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< multibranch_loop_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MultibranchLoopVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MultibranchLoopVector" "', argument " "1"" of type '" "std::vector< mb >::size_type""'");
  } 
  arg1 = static_cast< std::vector< mb >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MultibranchLoopVector" "', argument " "2"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultibranchLoopVector" "', argument " "2"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mb >::value_type * >(argp2);
  result = (std::vector< multibranch_loop_t > *)new std::vector< multibranch_loop_t >(arg1,(std::vector< mb >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MultibranchLoopVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MultibranchLoopVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MultibranchLoopVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MultibranchLoopVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mb, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MultibranchLoopVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MultibranchLoopVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< multibranch_loop_t >::vector()\n"
    "    std::vector< multibranch_loop_t >::vector(std::vector< multibranch_loop_t > const &)\n"
    "    std::vector< multibranch_loop_t >::vector(std::vector< mb >::size_type)\n"
    "    std::vector< multibranch_loop_t >::vector(std::vector< mb >::size_type,std::vector< mb >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MultibranchLoopVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_push_back" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultibranchLoopVector_push_back" "', argument " "2"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector_push_back" "', argument " "2"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< mb >::value_type * >(argp2);
  (arg1)->push_back((std::vector< mb >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mb >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_front" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (std::vector< mb >::value_type *) &((std::vector< multibranch_loop_t > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mb >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_back" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = (std::vector< mb >::value_type *) &((std::vector< multibranch_loop_t > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::size_type arg2 ;
  std::vector< mb >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:MultibranchLoopVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_assign" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector_assign" "', argument " "2"" of type '" "std::vector< mb >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultibranchLoopVector_assign" "', argument " "3"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector_assign" "', argument " "3"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mb >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< mb >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::size_type arg2 ;
  std::vector< mb >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultibranchLoopVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_resize" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector_resize" "', argument " "2"" of type '" "std::vector< mb >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultibranchLoopVector_resize" "', argument " "3"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector_resize" "', argument " "3"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mb >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< mb >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MultibranchLoopVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mb, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MultibranchLoopVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultibranchLoopVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< multibranch_loop_t >::resize(std::vector< mb >::size_type)\n"
    "    std::vector< multibranch_loop_t >::resize(std::vector< mb >::size_type,std::vector< mb >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > arg2 ;
  std::vector< mb >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultibranchLoopVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_insert" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_insert" "', argument " "2"" of type '" "std::vector< mb >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mb >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_insert" "', argument " "2"" of type '" "std::vector< mb >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultibranchLoopVector_insert" "', argument " "3"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector_insert" "', argument " "3"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< mb >::value_type * >(argp3);
  result = std_vector_Sl_multibranch_loop_t_Sg__insert__SWIG_0(arg1,arg2,(mb const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< mb >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  SwigValueWrapper< std::vector< mb >::iterator > arg2 ;
  std::vector< mb >::size_type arg3 ;
  std::vector< mb >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MultibranchLoopVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_insert" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_insert" "', argument " "2"" of type '" "std::vector< mb >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< mb >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MultibranchLoopVector_insert" "', argument " "2"" of type '" "std::vector< mb >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultibranchLoopVector_insert" "', argument " "3"" of type '" "std::vector< mb >::size_type""'");
  } 
  arg3 = static_cast< std::vector< mb >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mb,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MultibranchLoopVector_insert" "', argument " "4"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultibranchLoopVector_insert" "', argument " "4"" of type '" "std::vector< mb >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< mb >::value_type * >(argp4);
  std_vector_Sl_multibranch_loop_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(mb const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mb, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MultibranchLoopVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< mb,std::allocator< mb > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< mb >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mb, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MultibranchLoopVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultibranchLoopVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< multibranch_loop_t >::insert(std::vector< mb >::iterator,std::vector< mb >::value_type const &)\n"
    "    std::vector< multibranch_loop_t >::insert(std::vector< mb >::iterator,std::vector< mb >::size_type,std::vector< mb >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  std::vector< mb >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MultibranchLoopVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_reserve" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultibranchLoopVector_reserve" "', argument " "2"" of type '" "std::vector< mb >::size_type""'");
  } 
  arg2 = static_cast< std::vector< mb >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultibranchLoopVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< mb >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultibranchLoopVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultibranchLoopVector_capacity" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  result = ((std::vector< multibranch_loop_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultibranchLoopVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< multibranch_loop_t > *arg1 = (std::vector< multibranch_loop_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MultibranchLoopVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultibranchLoopVector" "', argument " "1"" of type '" "std::vector< multibranch_loop_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< multibranch_loop_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultibranchLoopVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_mb_std__allocatorT_mb_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BaseStackVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_iterator" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_basestack_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___nonzero__" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (bool)std_vector_Sl_basestack_t_Sg____nonzero__((std::vector< bp > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___bool__" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (bool)std_vector_Sl_basestack_t_Sg____bool__((std::vector< bp > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bp >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___len__" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = std_vector_Sl_basestack_t_Sg____len__((std::vector< bp > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::difference_type arg2 ;
  std::vector< bp >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< bp,std::allocator< bp > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:BaseStackVector___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___getslice__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector___getslice__" "', argument " "2"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseStackVector___getslice__" "', argument " "3"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< bp >::difference_type >(val3);
  try {
    result = (std::vector< bp,std::allocator< bp > > *)std_vector_Sl_basestack_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::difference_type arg2 ;
  std::vector< bp >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseStackVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___setslice__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector___setslice__" "', argument " "2"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseStackVector___setslice__" "', argument " "3"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< bp >::difference_type >(val3);
  try {
    std_vector_Sl_basestack_t_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::difference_type arg2 ;
  std::vector< bp >::difference_type arg3 ;
  std::vector< bp,std::allocator< bp > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BaseStackVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___setslice__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector___setslice__" "', argument " "2"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseStackVector___setslice__" "', argument " "3"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< bp >::difference_type >(val3);
  {
    std::vector< bp,std::allocator< bp > > *ptr = (std::vector< bp,std::allocator< bp > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BaseStackVector___setslice__" "', argument " "4"" of type '" "std::vector< bp,std::allocator< bp > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector___setslice__" "', argument " "4"" of type '" "std::vector< bp,std::allocator< bp > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_basestack_t_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< bp,std::allocator< bp > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BaseStackVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< bp,std::allocator< bp > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BaseStackVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BaseStackVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< basestack_t >::__setslice__(std::vector< bp >::difference_type,std::vector< bp >::difference_type)\n"
    "    std::vector< basestack_t >::__setslice__(std::vector< bp >::difference_type,std::vector< bp >::difference_type,std::vector< bp,std::allocator< bp > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::difference_type arg2 ;
  std::vector< bp >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:BaseStackVector___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___delslice__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector___delslice__" "', argument " "2"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseStackVector___delslice__" "', argument " "3"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< bp >::difference_type >(val3);
  try {
    std_vector_Sl_basestack_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseStackVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___delitem__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector___delitem__" "', argument " "2"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::difference_type >(val2);
  try {
    std_vector_Sl_basestack_t_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bp,std::allocator< bp > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseStackVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___getitem__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< bp,std::allocator< bp > > *)std_vector_Sl_basestack_t_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< bp,std::allocator< bp > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseStackVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___setitem__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< bp,std::allocator< bp > > *ptr = (std::vector< bp,std::allocator< bp > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BaseStackVector___setitem__" "', argument " "3"" of type '" "std::vector< bp,std::allocator< bp > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector___setitem__" "', argument " "3"" of type '" "std::vector< bp,std::allocator< bp > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_basestack_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< bp,std::allocator< bp > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseStackVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___setitem__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_basestack_t_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseStackVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___delitem__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_basestack_t_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BaseStackVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BaseStackVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BaseStackVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< basestack_t >::__delitem__(std::vector< bp >::difference_type)\n"
    "    std::vector< basestack_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bp >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseStackVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___getitem__" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector___getitem__" "', argument " "2"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::difference_type >(val2);
  try {
    result = (std::vector< bp >::value_type *) &std_vector_Sl_basestack_t_Sg____getitem____SWIG_1((std::vector< bp > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BaseStackVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BaseStackVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BaseStackVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< basestack_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< basestack_t >::__getitem__(std::vector< bp >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::difference_type arg2 ;
  std::vector< bp >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseStackVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector___setitem__" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector___setitem__" "', argument " "2"" of type '" "std::vector< bp >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bp,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BaseStackVector___setitem__" "', argument " "3"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector___setitem__" "', argument " "3"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< bp >::value_type * >(argp3);
  try {
    std_vector_Sl_basestack_t_Sg____setitem____SWIG_2(arg1,arg2,(bp const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BaseStackVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< bp,std::allocator< bp > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BaseStackVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_bp, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BaseStackVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BaseStackVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< basestack_t >::__setitem__(PySliceObject *,std::vector< bp,std::allocator< bp > > const &)\n"
    "    std::vector< basestack_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< basestack_t >::__setitem__(std::vector< bp >::difference_type,std::vector< bp >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bp >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_pop" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  try {
    result = std_vector_Sl_basestack_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< bp >::value_type(static_cast< const std::vector< bp >::value_type& >(result))), SWIGTYPE_p_bp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BaseStackVector_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_append" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseStackVector_append" "', argument " "2"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector_append" "', argument " "2"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bp >::value_type * >(argp2);
  std_vector_Sl_basestack_t_Sg__append(arg1,(bp const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BaseStackVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BaseStackVector")) SWIG_fail;
  result = (std::vector< basestack_t > *)new std::vector< basestack_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BaseStackVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< basestack_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BaseStackVector",&obj0)) SWIG_fail;
  {
    std::vector< bp,std::allocator< bp > > *ptr = (std::vector< bp,std::allocator< bp > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BaseStackVector" "', argument " "1"" of type '" "std::vector< basestack_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BaseStackVector" "', argument " "1"" of type '" "std::vector< basestack_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< basestack_t > *)new std::vector< basestack_t >((std::vector< basestack_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_empty" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (bool)((std::vector< basestack_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bp >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_size" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = ((std::vector< basestack_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< basestack_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BaseStackVector_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_swap" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseStackVector_swap" "', argument " "2"" of type '" "std::vector< basestack_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector_swap" "', argument " "2"" of type '" "std::vector< basestack_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< basestack_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_begin" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_end" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< bp >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_rbegin" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bp >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< bp >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_rend" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bp >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_clear" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< bp > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_get_allocator" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = ((std::vector< basestack_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< bp >::allocator_type(static_cast< const std::vector< bp >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_bp_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BaseStackVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bp >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< basestack_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BaseStackVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseStackVector" "', argument " "1"" of type '" "std::vector< bp >::size_type""'");
  } 
  arg1 = static_cast< std::vector< bp >::size_type >(val1);
  result = (std::vector< basestack_t > *)new std::vector< basestack_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_pop_back" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseStackVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_resize" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector_resize" "', argument " "2"" of type '" "std::vector< bp >::size_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseStackVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_erase" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_erase" "', argument " "2"" of type '" "std::vector< bp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_erase" "', argument " "2"" of type '" "std::vector< bp >::iterator""'");
    }
  }
  result = std_vector_Sl_basestack_t_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > arg2 ;
  SwigValueWrapper< std::vector< bp >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseStackVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_erase" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_erase" "', argument " "2"" of type '" "std::vector< bp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_erase" "', argument " "2"" of type '" "std::vector< bp >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_erase" "', argument " "3"" of type '" "std::vector< bp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_erase" "', argument " "3"" of type '" "std::vector< bp >::iterator""'");
    }
  }
  result = std_vector_Sl_basestack_t_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BaseStackVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BaseStackVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BaseStackVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< basestack_t >::erase(std::vector< bp >::iterator)\n"
    "    std::vector< basestack_t >::erase(std::vector< bp >::iterator,std::vector< bp >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BaseStackVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bp >::size_type arg1 ;
  std::vector< bp >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< basestack_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BaseStackVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseStackVector" "', argument " "1"" of type '" "std::vector< bp >::size_type""'");
  } 
  arg1 = static_cast< std::vector< bp >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BaseStackVector" "', argument " "2"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BaseStackVector" "', argument " "2"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bp >::value_type * >(argp2);
  result = (std::vector< basestack_t > *)new std::vector< basestack_t >(arg1,(std::vector< bp >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BaseStackVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BaseStackVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BaseStackVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BaseStackVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bp, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BaseStackVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BaseStackVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< basestack_t >::vector()\n"
    "    std::vector< basestack_t >::vector(std::vector< basestack_t > const &)\n"
    "    std::vector< basestack_t >::vector(std::vector< bp >::size_type)\n"
    "    std::vector< basestack_t >::vector(std::vector< bp >::size_type,std::vector< bp >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BaseStackVector_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_push_back" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseStackVector_push_back" "', argument " "2"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector_push_back" "', argument " "2"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bp >::value_type * >(argp2);
  (arg1)->push_back((std::vector< bp >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bp >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_front" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (std::vector< bp >::value_type *) &((std::vector< basestack_t > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bp >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_back" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = (std::vector< bp >::value_type *) &((std::vector< basestack_t > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bp, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::size_type arg2 ;
  std::vector< bp >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:BaseStackVector_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_assign" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector_assign" "', argument " "2"" of type '" "std::vector< bp >::size_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bp,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BaseStackVector_assign" "', argument " "3"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector_assign" "', argument " "3"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< bp >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< bp >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::size_type arg2 ;
  std::vector< bp >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseStackVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_resize" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector_resize" "', argument " "2"" of type '" "std::vector< bp >::size_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bp,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BaseStackVector_resize" "', argument " "3"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector_resize" "', argument " "3"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< bp >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< bp >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BaseStackVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_bp, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BaseStackVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BaseStackVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< basestack_t >::resize(std::vector< bp >::size_type)\n"
    "    std::vector< basestack_t >::resize(std::vector< bp >::size_type,std::vector< bp >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > arg2 ;
  std::vector< bp >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseStackVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_insert" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_insert" "', argument " "2"" of type '" "std::vector< bp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_insert" "', argument " "2"" of type '" "std::vector< bp >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bp,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BaseStackVector_insert" "', argument " "3"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector_insert" "', argument " "3"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< bp >::value_type * >(argp3);
  result = std_vector_Sl_basestack_t_Sg__insert__SWIG_0(arg1,arg2,(bp const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bp >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  SwigValueWrapper< std::vector< bp >::iterator > arg2 ;
  std::vector< bp >::size_type arg3 ;
  std::vector< bp >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BaseStackVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_insert" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_insert" "', argument " "2"" of type '" "std::vector< bp >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bp >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BaseStackVector_insert" "', argument " "2"" of type '" "std::vector< bp >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseStackVector_insert" "', argument " "3"" of type '" "std::vector< bp >::size_type""'");
  } 
  arg3 = static_cast< std::vector< bp >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_bp,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BaseStackVector_insert" "', argument " "4"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseStackVector_insert" "', argument " "4"" of type '" "std::vector< bp >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< bp >::value_type * >(argp4);
  std_vector_Sl_basestack_t_Sg__insert__SWIG_1(arg1,arg2,arg3,(bp const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_bp, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BaseStackVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< bp,std::allocator< bp > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bp >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_bp, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BaseStackVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BaseStackVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< basestack_t >::insert(std::vector< bp >::iterator,std::vector< bp >::value_type const &)\n"
    "    std::vector< basestack_t >::insert(std::vector< bp >::iterator,std::vector< bp >::size_type,std::vector< bp >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  std::vector< bp >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:BaseStackVector_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_reserve" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseStackVector_reserve" "', argument " "2"" of type '" "std::vector< bp >::size_type""'");
  } 
  arg2 = static_cast< std::vector< bp >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseStackVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bp >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseStackVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseStackVector_capacity" "', argument " "1"" of type '" "std::vector< basestack_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  result = ((std::vector< basestack_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseStackVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< basestack_t > *arg1 = (std::vector< basestack_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseStackVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseStackVector" "', argument " "1"" of type '" "std::vector< basestack_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< basestack_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseStackVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_bp_std__allocatorT_bp_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", (PyCFunction) _wrap_SwigPyIterator_incr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_decr", (PyCFunction) _wrap_SwigPyIterator_decr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_distance", (PyCFunction) _wrap_SwigPyIterator_distance, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_equal", (PyCFunction) _wrap_SwigPyIterator_equal, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", (PyCFunction) _wrap_SwigPyIterator_advance, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___eq__", (PyCFunction) _wrap_SwigPyIterator___eq__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___ne__", (PyCFunction) _wrap_SwigPyIterator___ne__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___iadd__", (PyCFunction) _wrap_SwigPyIterator___iadd__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___isub__", (PyCFunction) _wrap_SwigPyIterator___isub__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___add__", (PyCFunction) _wrap_SwigPyIterator___add__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IntPair", _wrap_new_IntPair, METH_VARARGS, NULL},
	 { (char *)"IntPair_first_set", _wrap_IntPair_first_set, METH_VARARGS, NULL},
	 { (char *)"IntPair_first_get", _wrap_IntPair_first_get, METH_VARARGS, NULL},
	 { (char *)"IntPair_second_set", _wrap_IntPair_second_set, METH_VARARGS, NULL},
	 { (char *)"IntPair_second_get", _wrap_IntPair_second_get, METH_VARARGS, NULL},
	 { (char *)"delete_IntPair", _wrap_delete_IntPair, METH_VARARGS, NULL},
	 { (char *)"IntPair_swigregister", IntPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"PairVector_iterator", _wrap_PairVector_iterator, METH_VARARGS, NULL},
	 { (char *)"PairVector___nonzero__", _wrap_PairVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"PairVector___bool__", _wrap_PairVector___bool__, METH_VARARGS, NULL},
	 { (char *)"PairVector___len__", _wrap_PairVector___len__, METH_VARARGS, NULL},
	 { (char *)"PairVector___getslice__", (PyCFunction) _wrap_PairVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PairVector___setslice__", _wrap_PairVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"PairVector___delslice__", (PyCFunction) _wrap_PairVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PairVector___delitem__", _wrap_PairVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"PairVector___getitem__", _wrap_PairVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"PairVector___setitem__", _wrap_PairVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"PairVector_pop", _wrap_PairVector_pop, METH_VARARGS, NULL},
	 { (char *)"PairVector_append", (PyCFunction) _wrap_PairVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PairVector_empty", _wrap_PairVector_empty, METH_VARARGS, NULL},
	 { (char *)"PairVector_size", _wrap_PairVector_size, METH_VARARGS, NULL},
	 { (char *)"PairVector_swap", (PyCFunction) _wrap_PairVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PairVector_begin", _wrap_PairVector_begin, METH_VARARGS, NULL},
	 { (char *)"PairVector_end", _wrap_PairVector_end, METH_VARARGS, NULL},
	 { (char *)"PairVector_rbegin", _wrap_PairVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"PairVector_rend", _wrap_PairVector_rend, METH_VARARGS, NULL},
	 { (char *)"PairVector_clear", _wrap_PairVector_clear, METH_VARARGS, NULL},
	 { (char *)"PairVector_get_allocator", _wrap_PairVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"PairVector_pop_back", _wrap_PairVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"PairVector_erase", _wrap_PairVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_PairVector", _wrap_new_PairVector, METH_VARARGS, NULL},
	 { (char *)"PairVector_push_back", (PyCFunction) _wrap_PairVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PairVector_front", _wrap_PairVector_front, METH_VARARGS, NULL},
	 { (char *)"PairVector_back", _wrap_PairVector_back, METH_VARARGS, NULL},
	 { (char *)"PairVector_assign", (PyCFunction) _wrap_PairVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PairVector_resize", _wrap_PairVector_resize, METH_VARARGS, NULL},
	 { (char *)"PairVector_insert", _wrap_PairVector_insert, METH_VARARGS, NULL},
	 { (char *)"PairVector_reserve", (PyCFunction) _wrap_PairVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PairVector_capacity", _wrap_PairVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_PairVector", _wrap_delete_PairVector, METH_VARARGS, NULL},
	 { (char *)"PairVector_swigregister", PairVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"StringVector_iterator", _wrap_StringVector_iterator, METH_VARARGS, NULL},
	 { (char *)"StringVector___nonzero__", _wrap_StringVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StringVector___bool__", _wrap_StringVector___bool__, METH_VARARGS, NULL},
	 { (char *)"StringVector___len__", _wrap_StringVector___len__, METH_VARARGS, NULL},
	 { (char *)"StringVector___getslice__", (PyCFunction) _wrap_StringVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVector___setslice__", _wrap_StringVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"StringVector___delslice__", (PyCFunction) _wrap_StringVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVector___delitem__", _wrap_StringVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"StringVector___getitem__", _wrap_StringVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"StringVector___setitem__", _wrap_StringVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"StringVector_pop", _wrap_StringVector_pop, METH_VARARGS, NULL},
	 { (char *)"StringVector_append", (PyCFunction) _wrap_StringVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVector_empty", _wrap_StringVector_empty, METH_VARARGS, NULL},
	 { (char *)"StringVector_size", _wrap_StringVector_size, METH_VARARGS, NULL},
	 { (char *)"StringVector_swap", (PyCFunction) _wrap_StringVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVector_begin", _wrap_StringVector_begin, METH_VARARGS, NULL},
	 { (char *)"StringVector_end", _wrap_StringVector_end, METH_VARARGS, NULL},
	 { (char *)"StringVector_rbegin", _wrap_StringVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"StringVector_rend", _wrap_StringVector_rend, METH_VARARGS, NULL},
	 { (char *)"StringVector_clear", _wrap_StringVector_clear, METH_VARARGS, NULL},
	 { (char *)"StringVector_get_allocator", _wrap_StringVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StringVector_pop_back", _wrap_StringVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"StringVector_erase", _wrap_StringVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_StringVector", _wrap_new_StringVector, METH_VARARGS, NULL},
	 { (char *)"StringVector_push_back", (PyCFunction) _wrap_StringVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVector_front", _wrap_StringVector_front, METH_VARARGS, NULL},
	 { (char *)"StringVector_back", _wrap_StringVector_back, METH_VARARGS, NULL},
	 { (char *)"StringVector_assign", (PyCFunction) _wrap_StringVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVector_resize", _wrap_StringVector_resize, METH_VARARGS, NULL},
	 { (char *)"StringVector_insert", _wrap_StringVector_insert, METH_VARARGS, NULL},
	 { (char *)"StringVector_reserve", (PyCFunction) _wrap_StringVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVector_capacity", _wrap_StringVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StringVector", _wrap_delete_StringVector, METH_VARARGS, NULL},
	 { (char *)"StringVector_swigregister", StringVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_iterator", _wrap_StringVectorVector_iterator, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector___nonzero__", _wrap_StringVectorVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector___bool__", _wrap_StringVectorVector___bool__, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector___len__", _wrap_StringVectorVector___len__, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector___getslice__", (PyCFunction) _wrap_StringVectorVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVectorVector___setslice__", _wrap_StringVectorVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector___delslice__", (PyCFunction) _wrap_StringVectorVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVectorVector___delitem__", _wrap_StringVectorVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector___getitem__", _wrap_StringVectorVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector___setitem__", _wrap_StringVectorVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_pop", _wrap_StringVectorVector_pop, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_append", (PyCFunction) _wrap_StringVectorVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVectorVector_empty", _wrap_StringVectorVector_empty, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_size", _wrap_StringVectorVector_size, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_swap", (PyCFunction) _wrap_StringVectorVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVectorVector_begin", _wrap_StringVectorVector_begin, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_end", _wrap_StringVectorVector_end, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_rbegin", _wrap_StringVectorVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_rend", _wrap_StringVectorVector_rend, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_clear", _wrap_StringVectorVector_clear, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_get_allocator", _wrap_StringVectorVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_pop_back", _wrap_StringVectorVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_erase", _wrap_StringVectorVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_StringVectorVector", _wrap_new_StringVectorVector, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_push_back", (PyCFunction) _wrap_StringVectorVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVectorVector_front", _wrap_StringVectorVector_front, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_back", _wrap_StringVectorVector_back, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_assign", (PyCFunction) _wrap_StringVectorVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVectorVector_resize", _wrap_StringVectorVector_resize, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_insert", _wrap_StringVectorVector_insert, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_reserve", (PyCFunction) _wrap_StringVectorVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StringVectorVector_capacity", _wrap_StringVectorVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StringVectorVector", _wrap_delete_StringVectorVector, METH_VARARGS, NULL},
	 { (char *)"StringVectorVector_swigregister", StringVectorVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Thermodynamics", _wrap_new_Thermodynamics, METH_VARARGS, (char *)"Thermodynamics::Thermodynamics(const bool ISRNA=true) "},
	 { (char *)"Thermodynamics_SetTemperature", (PyCFunction) _wrap_Thermodynamics_SetTemperature, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Thermodynamics::SetTemperature(double temperature)\n"
		"\n"
		"Set the temperature of folding in K.\n"
		"\n"
		"This function allows the user to specify folding temperatures other\n"
		"than 310.15 K (37 degrees C). This changes folding free energy changes\n"
		"that would be returned for existing structures and would alter the set\n"
		"of structures predicted. When this function is called, the\n"
		"thermodynamic parameter files are immediately read from disk. These\n"
		"include both enthalpy parameters (.dh files) and free energy changes\n"
		"at 310.15 (.dat files). The files must either be at a location\n"
		"indicated by the $DATAPATH environment variable or in pwd. Changing\n"
		"the temperature only alters subsequent calculations. For example, if a\n"
		"structure prediction method has been called, the set of predicted\n"
		"structures are not changed at the time of a call to SetTemperature.\n"
		"Likewise, SetTemperature must be called before calling a structure\n"
		"prediction method if a temperature other than the 310.15 K default is\n"
		"desired. The function returns an error code where 0 is no error and\n"
		"non-zero errors can be parsed by by GetErrorMessage() or\n"
		"GetErrorMessageString() in an inheriting class. \n"
		""},
	 { (char *)"Thermodynamics_GetTemperature", _wrap_Thermodynamics_GetTemperature, METH_VARARGS, (char *)"\n"
		"double\n"
		"Thermodynamics::GetTemperature()\n"
		"\n"
		"Get the current folding temperature in K.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that indicates the folding temperature in K. \n"
		""},
	 { (char *)"Thermodynamics_GetAlphabetName", _wrap_Thermodynamics_GetAlphabetName, METH_VARARGS, NULL},
	 { (char *)"Thermodynamics_ReadThermodynamic", (PyCFunction) _wrap_Thermodynamics_ReadThermodynamic, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Thermodynamics::ReadThermodynamic(const char *pathname=NULL)\n"
		"\n"
		"Function to read the thermodynamic parameters.\n"
		"\n"
		"This function depends on temp, the current temperature, to determine\n"
		"in the folding free energies need to be set to other than those read\n"
		"in files for 310.15 K. Return of zero => no error and a return of non-\n"
		"zero indicates error. Public functions that need the thermodynamic\n"
		"parameters call this function automatically. By default, the path to\n"
		"the thermodynamic paramaters is fetched from the $DATAPATH environment\n"
		"variable. If a specific path is needed, $DATAPATH is overridden by\n"
		"specifying the pathname explicitly here as a parameter.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates whether an error occured.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"pathname:  is a pointer to cstring that indicates the pathname to the\n"
		"thermodynamnic parameters. By default, this is NULL and the\n"
		"environment variable $DATAPATH is consulted to get this path. \n"
		""},
	 { (char *)"Thermodynamics_ReloadDataTables", (PyCFunction) _wrap_Thermodynamics_ReloadDataTables, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Thermodynamics_VerifyThermodynamic", _wrap_Thermodynamics_VerifyThermodynamic, METH_VARARGS, NULL},
	 { (char *)"Thermodynamics_GetDatatable", _wrap_Thermodynamics_GetDatatable, METH_VARARGS, (char *)"\n"
		"datatable *\n"
		"Thermodynamics::GetDatatable()\n"
		"\n"
		"This function is used during inheritance o provide access to the free\n"
		"energy change parameters. This function generates no error codes.\n"
		"(Error checking was done for this during construction).\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to datatable with free energy change parameters. \n"
		""},
	 { (char *)"Thermodynamics_GetEnthalpyTable", (PyCFunction) _wrap_Thermodynamics_GetEnthalpyTable, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"datatable *\n"
		"Thermodynamics::GetEnthalpyTable()\n"
		"\n"
		"This function is used to provide an enthalpy table. This function will\n"
		"return a NULL pointer if there is an error reading the tables from\n"
		"disk. It is important that programs check the status of the pointer\n"
		"before using it, i.e. make sure it is not NULL.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to datatable with the enthalpy change parameters. \n"
		""},
	 { (char *)"Thermodynamics_ClearEnergies", _wrap_Thermodynamics_ClearEnergies, METH_VARARGS, NULL},
	 { (char *)"Thermodynamics_ClearEnthalpies", _wrap_Thermodynamics_ClearEnthalpies, METH_VARARGS, NULL},
	 { (char *)"Thermodynamics_GetEnergyRead", _wrap_Thermodynamics_GetEnergyRead, METH_VARARGS, (char *)"\n"
		"bool\n"
		"Thermodynamics::GetEnergyRead()\n"
		"\n"
		"Return whether this instance of Thermodynamics has the paremters\n"
		"populated (either from disk or from another Thermodynamics class).\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A bool yjay indicates whether the parameters are populated (true =\n"
		"yes). \n"
		""},
	 { (char *)"Thermodynamics_IsAlphabetRead", _wrap_Thermodynamics_IsAlphabetRead, METH_VARARGS, NULL},
	 { (char *)"delete_Thermodynamics", _wrap_delete_Thermodynamics, METH_VARARGS, (char *)"Thermodynamics::~Thermodynamics() "},
	 { (char *)"Thermodynamics_isrna_set", _wrap_Thermodynamics_isrna_set, METH_VARARGS, NULL},
	 { (char *)"Thermodynamics_isrna_get", _wrap_Thermodynamics_isrna_get, METH_VARARGS, NULL},
	 { (char *)"Thermodynamics_swigregister", Thermodynamics_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RNA", _wrap_new_RNA, METH_VARARGS, (char *)"\n"
		"RNA::RNA(const bool IsRNA=true)\n"
		"\n"
		"Default Constructor - user provides nothing. This basic constructor is\n"
		"provided for bimolecular folding and should not generally need to be\n"
		"accessed by end users of the RNA class.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"IsRNA:  is a bool that indicates whether this sequence is RNA or DNA.\n"
		"true= RNA. false=DNA. Default is true. \n"
		""},
	 { (char *)"RNA_GetErrorCode", _wrap_RNA_GetErrorCode, METH_VARARGS, (char *)"\n"
		"int RNA::GetErrorCode()\n"
		"\n"
		"Return an error code, where a return of zero is no error.\n"
		"\n"
		"This function returns and error flag that is generated during\n"
		"construction by RNA(const char &filename, const int type, const bool\n"
		"IsRNA=true) or from CalculateFreeEnergy(). An error of zero is always\n"
		"no error. Other codes are errors and a c-string can be fetched for the\n"
		"error with GetErrorMessage().\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that provides the error code. \n"
		""},
	 { (char *)"RNA_GetErrorMessage", (PyCFunction) _wrap_RNA_GetErrorMessage, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"char *\n"
		"RNA::GetErrorMessage(const int error)\n"
		"\n"
		"Return error messages based on code from GetErrorCode and other error\n"
		"codes.\n"
		"\n"
		"0 = no error 1 = input file not found 2 = error opening file 3 =\n"
		"structure number out of range 4 = nucleotide number out of range 5 =\n"
		"error reading thermodynamic parameters 6 = pseudoknot formation 7 =\n"
		"non-canonical pair 8 = too many restraints specified 9 = same\n"
		"nucleotide in conflicting restraint 10 = no structures to write 11 =\n"
		"nucleotide not a U (caused by ForceFMNCleavage() 12 = distance too\n"
		"short 13 = error reading constraint file 14 = traceback error 15 = no\n"
		"partition function data present 16 = incorrect save file version used\n"
		"17 = cannot be performed without having read a save file (.sav) 18 =\n"
		"threshold is too low to be valid 19 = drawing coordinates have not\n"
		"been determined 20 = no sequence has been read 21 = over 1 probability\n"
		"error on stochastic traceback 22 = programming error, unrecognized\n"
		"input to constructor 23 = no structures present 24 = too few\n"
		"iterations 25 = index (for drawing) is not a multiple of 10\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"error:  is the integer error code provided by GetErrorCode() or from\n"
		"other functions that return integer error codes.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to a c string that provides an error message. \n"
		""},
	 { (char *)"RNA_GetFullErrorMessage", _wrap_RNA_GetFullErrorMessage, METH_VARARGS, NULL},
	 { (char *)"RNA_GetErrorDetails", _wrap_RNA_GetErrorDetails, METH_VARARGS, NULL},
	 { (char *)"RNA_SetErrorDetails", (PyCFunction) _wrap_RNA_SetErrorDetails, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RNA_SetSequenceLabel", (PyCFunction) _wrap_RNA_SetSequenceLabel, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RNA_GetErrorMessageString", (PyCFunction) _wrap_RNA_GetErrorMessageString, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"std::string\n"
		"RNA::GetErrorMessageString(const int error)\n"
		"\n"
		"Return error messages based on code from GetErrorCode and other error\n"
		"codes.\n"
		"\n"
		"Although RNA generally uses c strings, this member function returns a\n"
		"string that is suitable for interfacing with JAVA, etc. See the error\n"
		"list in the GetErrorMessage() entry.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"error:  is the integer error code provided by GetErrorCode() or from\n"
		"other functions that return integer error codes.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A string that provides an error message. \n"
		""},
	 { (char *)"RNA_ResetError", _wrap_RNA_ResetError, METH_VARARGS, NULL},
	 { (char *)"RNA_EnsureStructureCapcacity", (PyCFunction) _wrap_RNA_EnsureStructureCapcacity, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RNA_SpecifyPair", (PyCFunction) _wrap_RNA_SpecifyPair, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::SpecifyPair(const\n"
		"int i, const int j, const int structurenumber=1)\n"
		"\n"
		"Specify a base pair between nucleotides i and j.\n"
		"\n"
		"The base pair is in structure number structurenumber, which is assumed\n"
		"to be structure 1. Return 0 if there is no problem, otherwise return\n"
		"an error code: error = 3 -> structurenumber out of range. error = 4 ->\n"
		"nucleotide number out of range. A c string or string description of\n"
		"the error are available using GetErrorMessage() or\n"
		"GetErrorMessageString(). Note!: Sequences with the 5' end = nucleotide\n"
		"1. Note!: Structures start at structure 1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is an integer for the position of the first nucleotide in the\n"
		"pair.\n"
		"\n"
		"j:  in an integer for the position of the second nucleotide in the\n"
		"pair.\n"
		"\n"
		"structurenumber:  is the structure that has the pair. This defaults to\n"
		"1.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString(), 0 = no error. \n"
		""},
	 { (char *)"RNA_RemovePairs", (PyCFunction) _wrap_RNA_RemovePairs, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::RemovePairs(const\n"
		"int structurenumber=1)\n"
		"\n"
		"Remove all the current base pairs in a specified structure.\n"
		"\n"
		"Return 0 if there is no error. Return 5 if structurenumber never had\n"
		"pairs specified.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"structurenumber:  is an integer specifying the structure from which to\n"
		"remove the pairs.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString(), 0 = no error. \n"
		""},
	 { (char *)"RNA_RemoveBasePair", (PyCFunction) _wrap_RNA_RemoveBasePair, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::RemoveBasePair(const int i, const int structurenumber=1)\n"
		"\n"
		"Remove a specified pair in a specified structure.\n"
		"\n"
		"Break the pair between i and i's pairing partner Return 0 if there is\n"
		"no error. Return 3 if structurenumber out of range. Return 4 if\n"
		"nucleotide number out of range.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of a nucleotide in a pair that will be broken.\n"
		"\n"
		"structurenumber:  is an integer specifying the structure from which to\n"
		"remove the pairs.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString(), 0 = no error. \n"
		""},
	 { (char *)"RNA_CalculateFreeEnergy", (PyCFunction) _wrap_RNA_CalculateFreeEnergy, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"RNA::CalculateFreeEnergy(const int structurenumber=1, const bool\n"
		"UseSimpleMBLoopRules=false)\n"
		"\n"
		"Return the predicted Gibb's free energy change for structure #\n"
		"structurenumber, defaulted to 1.\n"
		"\n"
		"Free energies are in kcal/mol. The first time this is called, if no\n"
		"other free energy calculation has been performed and the folding\n"
		"temperature has not been specifed, thermodynamic parameter files\n"
		"(.dat) files will be read from disk. The parameter files should be\n"
		"located in the directory specified by environment variable $DATAPATH,\n"
		"or the pwd. In case of error, the function returns a free energy\n"
		"change of zero. Note!: That a free energy change of zero is also a\n"
		"valid folding free energy change. Errors will also generate an\n"
		"internal error code, accessible with GetErrorCode(). GetErrorCode()\n"
		"will return 0 when there is no error and other codes can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"structurenumber:  is an integer that refers to the index of the\n"
		"structure for which to calculate the folding free energy change. This\n"
		"defaults to 1.\n"
		"\n"
		"UseSimpleMBLoopRules:  is a bool that indicates what energy rules to\n"
		"use. The default, false, uses the complete nearest neighbor model for\n"
		"multibranch loops. When true is passed, the energy model is instead a\n"
		"simplified model that is the one used by the dynamic programming\n"
		"algorithms.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double which is the folding free energy change in kcal/mol. \n"
		""},
	 { (char *)"RNA_WriteThermodynamicDetails", (PyCFunction) _wrap_RNA_WriteThermodynamicDetails, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::WriteThermodynamicDetails(const char filename[], const bool\n"
		"UseSimpleMBLoopRules=false)\n"
		"\n"
		"Calculate the folding free energy change for all structures and write\n"
		"the details of the calculation to a file.\n"
		"\n"
		"Free energies are in kcal/mol. The first time this is called, if no\n"
		"other free energy calculation has been performed and the folding\n"
		"temperature has not been specifed, thermodynamic parameter files\n"
		"(.dat) files will be read from disk. The parameter files should be\n"
		"located in the directory specified by environment variable $DATAPATH,\n"
		"or the pwd. In case of error, the function returns a non-zero.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a NULL terminated c string that provides the name of the\n"
		"output file to be written.\n"
		"\n"
		"UseSimpleMBLoopRules:  is a bool that indicates what energy rules to\n"
		"use. The default, false, uses the complete nearest neighbor model for\n"
		"multibranch loops. When true is passed, the energy model is instead a\n"
		"simplified model that is the one used by the dynamic programming\n"
		"algorithms.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates whether an error occurred (0 = no error; 5 =\n"
		"error reading parameter files). \n"
		""},
	 { (char *)"RNA_FoldSingleStrand", (PyCFunction) _wrap_RNA_FoldSingleStrand, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::FoldSingleStrand(const float percent=20, const int\n"
		"maximumstructures=20, const int window=5, const char savefile[]=\"\",\n"
		"const int maxinternalloopsize=30, bool mfeonly=false)\n"
		"\n"
		"Predict the lowest free energy secondary structure and generate\n"
		"suboptimal structures using a heuristic.\n"
		"\n"
		"This function predicts the lowest free energy structure and suboptimal\n"
		"structures. If the temperature has not been specified using\n"
		"SetTemperature and no free energies have been calculated, the\n"
		"thermodynamic parameters have not been read and therefore they will be\n"
		"read by this function call. The parameter files should be located in\n"
		"the directory specified by the environment variable $DATAPATH of the\n"
		"pwd. In case of error, the function returns a non-zero that can be\n"
		"parsed by GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"percent:  is the maximum % difference in free energy in suboptimal\n"
		"structures from the lowest free energy structure. The default is 20.\n"
		"\n"
		"maximumstructures:  is the maximum number of suboptimal structures to\n"
		"generate. The default is 20.\n"
		"\n"
		"window:  is a parameter that specifies how different the suboptimal\n"
		"structures should be from each other (0=no restriction and larger\n"
		"integers require structures to be more different). The defaults is 5,\n"
		"but this should be customized based on sequence length.\n"
		"\n"
		"savefile:  is c string containing a file path and name for a savefile\n"
		"(.sav)that can be used to generate energy dot plots and to refold the\n"
		"secondary structure using different suboptimal structure parameters.\n"
		"The default is \"\", which results in no save file written.\n"
		"\n"
		"maxinternalloopsize:  is the maximum number of unpaired nucleotides in\n"
		"bulge and internal loops. This is used to accelerate the prediction\n"
		"speed. The default is 30.\n"
		"\n"
		"mfeonly:  is a bool that indicates whether only the minimum free\n"
		"energy structure will be generated. This saves half the calculation\n"
		"time, but no save file can be generated. Default is false.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, 5 = error reading\n"
		"thermodynamic parameter files, 14 = traceback error). \n"
		""},
	 { (char *)"RNA_GenerateAllSuboptimalStructures", (PyCFunction) _wrap_RNA_GenerateAllSuboptimalStructures, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GenerateAllSuboptimalStructures(const float percent=5, const\n"
		"double deltaG=0.6)\n"
		"\n"
		"Predict the lowest free energy secondary structure and generate all\n"
		"suboptimal structures.\n"
		"\n"
		"This function predicts the lowest free energy structure and suboptimal\n"
		"structures. If the temperature has not been specified using\n"
		"SetTemperature and no free energies have been calculated, the\n"
		"thermodynamic parameters have not been read and therefore they will be\n"
		"read by this function call. The parameter files should be located in\n"
		"the directory specified by the environment variable $DATAPATH of the\n"
		"pwd. In case of error, the function returns a non-zero that can be\n"
		"parsed by GetErrorMessage() or GetErrorMessageString(). Two controls\n"
		"are available for limiting the number of structures, the maximum %\n"
		"difference in energy (percent) and the maximum absolute change in\n"
		"energy (deltaG). The smaller of the two will be used as the limit.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"percent:  is the maximum % difference in free energy in suboptimal\n"
		"structures from the lowest free energy structure. The default is 5.\n"
		"\n"
		"deltaG:  is the maximum difference in free energy change above the\n"
		"lowest free energy structure (in kcal/mol). The defaults is 0.6\n"
		"kcal/mol.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, non-zero = error).\n"
		"\n"
		""},
	 { (char *)"RNA_MaximizeExpectedAccuracy", (PyCFunction) _wrap_RNA_MaximizeExpectedAccuracy, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::MaximizeExpectedAccuracy(const double maxPercent=20, const int\n"
		"maxStructures=20, const int window=1, const double gamma=1.0)\n"
		"\n"
		"Predict the structure with maximum expected accuracy and suboptimal\n"
		"structures.\n"
		"\n"
		"This function predicts structures composed of probable base pairs and\n"
		"single-srtranded nucleotide, weighted by gamma. The score for a\n"
		"structure is = gamma * 2 * (sum of pairing probabilities for pairs) +\n"
		"(sum of unpairing probabilities for single stranded nucleotides). This\n"
		"function requires partition function data from either a previous\n"
		"partition function calculations or from having read a partition\n"
		"function save file during construction of the class. In case of error,\n"
		"the function returns a non-zero that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"maxPercent:  is the maximum percent difference is score in generating\n"
		"suboptimal structures. The default is 20.\n"
		"\n"
		"maxStructures:  is the maximum number of suboptimal structures to\n"
		"generate. The default is 20.\n"
		"\n"
		"window:  is the window parameter, where a higher value generates\n"
		"suboptimal structures that are more different from each other. The\n"
		"default is 1.\n"
		"\n"
		"gamma:  is the weight given to base pairs\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, non-zero = error).\n"
		"\n"
		""},
	 { (char *)"RNA_PartitionFunction", (PyCFunction) _wrap_RNA_PartitionFunction, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::PartitionFunction(const char savefile[]=\"\", double\n"
		"temperature=-10.0)\n"
		"\n"
		"Predict the partition function for a sequence.\n"
		"\n"
		"This function must be called to predict base pair probabilities,\n"
		"perform stochastic traceback, or for maximizing expected accuracy. If\n"
		"the temperature has not been specified using SetTemperature and no\n"
		"free energies have been calculated, the thermodynamic parameters have\n"
		"not been read and therefore they will be read by this function call.\n"
		"The parameter files should be located in the directory specified by\n"
		"the environment variable $DATAPATH of the pwd. In case of error, the\n"
		"function returns a non-zero that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString(). Note that the parameter temperature is used\n"
		"when calculating equilibrium constants, but does not change the\n"
		"temperature at which the free energies are determined. SetTemperature,\n"
		"from the underlying base class Thermodynamics, should be used to\n"
		"change the temperature for most calculations. This parameter should\n"
		"generally not be used. The default is -10.0 and values below zero\n"
		"cause this parameter to be ignored (the correct default behavior).\n"
		"Note also that if SetTemperature is not used, the temperature defaults\n"
		"to 310.15 K (37 deg. C), which is the desired behavior for most\n"
		"purposes.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"savefile:  is a c string that contains the path and filename for\n"
		"creating a save file. This defaults to \"\", which indicates no file\n"
		"is to be written.\n"
		"\n"
		"temperature:  is a double that indicates a pseudo-temperature for\n"
		"calculating equilibrium constants from free energies at fixed\n"
		"temperature previously specified.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, 5 = error reading\n"
		"thermodynamic parameter files). \n"
		""},
	 { (char *)"RNA_Rsample", (PyCFunction) _wrap_RNA_Rsample, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RNA_PredictProbablePairs", (PyCFunction) _wrap_RNA_PredictProbablePairs, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::PredictProbablePairs(const float probability=0)\n"
		"\n"
		"Predict structures containing highly probable pairs.\n"
		"\n"
		"This function predicts structures composed of probable base pairs.\n"
		"This function requires partition function data from either a previous\n"
		"partition function calculations or from having read a partition\n"
		"function save file during construction of the class. In case of error,\n"
		"the function returns a non-zero that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"probability:  is the pairing probability threshold, where pairs will\n"
		"be predicted if they have a higher probability. Note that a value of\n"
		"less than 0.5 (50%), will cause an error. The default value of zero\n"
		"will trigger the creation of 8 structures, with thresholds of >=0.99,\n"
		">=0.97, >=0.95, >=0.90, >=0.80, >=0.70, >=0.60, >0.50.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, non-zero = error).\n"
		"\n"
		""},
	 { (char *)"RNA_ProbKnot", (PyCFunction) _wrap_RNA_ProbKnot, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::ProbKnot(int\n"
		"iterations=1, int MinHelixLength=1)\n"
		"\n"
		"Predict maximum expected accuracy structures that contain pseudoknots\n"
		"from either a sequence or a partition function save file.\n"
		"\n"
		"This function uses base pair probabilities to predict structures that\n"
		"contains pseudoknots. This function requires partition function data\n"
		"from either a previous partition function calculations or from having\n"
		"read a partition function save file during construction of the class.\n"
		"In case of error, the function returns a non-zero that can be parsed\n"
		"by GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"iterations:  is the number of iterations of pair selection that are\n"
		"performed. The default and recommended value is 1.\n"
		"\n"
		"MinHelixLength:  is the shortest helix that is allowed. If this is set\n"
		">1, a post- processing step is performed to remove short helices.\n"
		"Default = 1, i.e. no post-processing.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, non-zero = error).\n"
		"\n"
		""},
	 { (char *)"RNA_ProbKnotFromSample", (PyCFunction) _wrap_RNA_ProbKnotFromSample, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ProbKnotFromSample(int iterations=1, int MinHelixLength=1)\n"
		"\n"
		"Predict maximum expected accuracy structures that contain pseudoknots\n"
		"from a file containing ensemble of structures.\n"
		"\n"
		"This function uses base pair probabilities to predict structures that\n"
		"contains pseudoknots. This function requires a file with ensemble of\n"
		"structures. This function processes the file to calculate pair\n"
		"probabilities. In case of error, the function returns a non-zero that\n"
		"can be parsed by GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"iterations:  is the number of iterations of pair selection that are\n"
		"performed. The default and recommended value is 1.\n"
		"\n"
		"MinHelixLength:  is the shortest helix that is allowed. If this is set\n"
		">1, a post- processing step is performed to remove short helices.\n"
		"Default = 1, i.e. no post-processing.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, non-zero = error).\n"
		"\n"
		""},
	 { (char *)"RNA_ReFoldSingleStrand", (PyCFunction) _wrap_RNA_ReFoldSingleStrand, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ReFoldSingleStrand(const float percent=20, const int\n"
		"maximumstructures=20, const int window=5)\n"
		"\n"
		"Re-predict the lowest free energy secondary structure and generate\n"
		"suboptimal structures using a heuristic.\n"
		"\n"
		"This function predicts the lowest free energy structure and suboptimal\n"
		"structure after a save file (.sav) was specified to the constructor.\n"
		"The step of predicting structures from the save file is rapid, so this\n"
		"is laregely a method to quickly generate a different set of suboptimal\n"
		"structures. Refolding can only be performed if the RNA constructor was\n"
		"called with a save file name. (That is, you cannot call this after\n"
		"calling fold single strand, without loading the data from disk with a\n"
		"new instance of RNA. This is for historical reasons.) In case of\n"
		"error, the function returns a non-zero that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"percent:  is the maximum % difference in free energy in suboptimal\n"
		"structures from the lowest free energy structure. The default is 20.\n"
		"\n"
		"maximumstructures:  is the maximum number of suboptimal structures to\n"
		"generate. The default is 20.\n"
		"\n"
		"window:  is a parameter that specifies how different the suboptimal\n"
		"structures should be from each other (0=no restriction and larger\n"
		"integers require structures to be more different). The default is 5.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, 5 = error reading\n"
		"thermodynamic parameter files, 14 = traceback error). \n"
		""},
	 { (char *)"RNA_Stochastic", (PyCFunction) _wrap_RNA_Stochastic, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::Stochastic(const int\n"
		"structures=1000, const int seed=1)\n"
		"\n"
		"Sample structures from the Boltzman ensemable.\n"
		"\n"
		"This function requires partition function data from either a previous\n"
		"partition function calculations or from having read a partition\n"
		"function save file during construction of the class. In case of error,\n"
		"the function returns a non-zero that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"structures:  is the number of structures to be sampled. The default is\n"
		"1000.\n"
		"\n"
		"seed:  is an integer that seeds the random number generator that is\n"
		"required for sampling, which defaults to 1.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, non-zero = error).\n"
		"\n"
		""},
	 { (char *)"RNA_ForceDoubleStranded", (PyCFunction) _wrap_RNA_ForceDoubleStranded, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ForceDoubleStranded(const int i)\n"
		"\n"
		"Force a nucleotide to be double stranded (base paired).\n"
		"\n"
		"This function indicates a nucleotide that is double stranded (paired).\n"
		"In subsequent structure prediction, this nucleotide will be double\n"
		"stranded. The function returns 0 with no error and a non-zero\n"
		"otherwise that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of the paired nucleotide.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 4 = nucleotide\n"
		"out of range, 8 = too many restraints specified, 9 = same nucleotide\n"
		"in conflicting restraint). \n"
		""},
	 { (char *)"RNA_ForceFMNCleavage", (PyCFunction) _wrap_RNA_ForceFMNCleavage, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ForceFMNCleavage(const int i)\n"
		"\n"
		"Indicate a nucleotide that is accessible to FMN cleavage (a U in GU\n"
		"pair).\n"
		"\n"
		"In subsequent structure prediction, this nucleotide will be in a GU\n"
		"pair. The function returns 0 with no error and a non-zero otherwise\n"
		"that can be parsed by GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of the FMN-cleaved nucleotide.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 4 = nucleotide\n"
		"out of range, 8 = too many restraints specified, 9 = same nucleotide\n"
		"in conflicting restraint, 11 = nucleotide not U). \n"
		""},
	 { (char *)"RNA_ForceMaximumPairingDistance", (PyCFunction) _wrap_RNA_ForceMaximumPairingDistance, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ForceMaximumPairingDistance(const int distance)\n"
		"\n"
		"Force a maximum distance between apired nucleotides.\n"
		"\n"
		"In a subsequent structure prediction, there will be no pairs allowed\n"
		"between nucleotides more distant than distance, i.e. |j-i| < distance\n"
		"for i to pair to j. The function returns and error code; 0==no error,\n"
		"12== too long or too short distance.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"distance:  is the maximum pairing distance.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 12 = too\n"
		"short). \n"
		""},
	 { (char *)"RNA_ForceModification", (PyCFunction) _wrap_RNA_ForceModification, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ForceModification(const int i)\n"
		"\n"
		"Force modification for a nucleotide.\n"
		"\n"
		"This function indicates a nucleotide that is accessible to chemical\n"
		"modification. In subsequent structure prediction, this nucleotide will\n"
		"be single stranded, at the end of a helix, or in or adjacent to a GU\n"
		"pair. The function returns 0 with no error and a non-zero otherwise\n"
		"that can be parsed by GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of the nucleotide accessible to chemical\n"
		"modification.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 4 = nucleotide\n"
		"out of range, 8 = too many restraints specified). \n"
		""},
	 { (char *)"RNA_ForcePair", (PyCFunction) _wrap_RNA_ForcePair, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::ForcePair(const int\n"
		"i, const int j)\n"
		"\n"
		"Force a pair between two nucleotides.\n"
		"\n"
		"This function forces a pair between two nucleotides in subsequent\n"
		"structure predictions. When multiple pairs are specified, the pairs\n"
		"must not force a pseudoknot. The function returns 0 with no error and\n"
		"a non-zero otherwise that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of one nucleotide in the pair.\n"
		"\n"
		"j:  is the index of the second nucleotide in the pair.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 4 = nucleotide\n"
		"out of range, 6 = pseudoknot formation, 7 = non-canonical pair, 8 =\n"
		"too many restraints specified, 9 = same nucleotide in conflicting\n"
		"restraint). \n"
		""},
	 { (char *)"RNA_ForceProhibitPair", (PyCFunction) _wrap_RNA_ForceProhibitPair, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ForceProhibitPair(const int i, const int j)\n"
		"\n"
		"Prohibit a pair between two nucleotides.\n"
		"\n"
		"This function prevents a pair between two nucleotides in subsequent\n"
		"structure predictions. The function returns 0 with no error and a non-\n"
		"zero otherwise that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of one nucleotide in the pair.\n"
		"\n"
		"j:  is the index of the second nucleotide in the pair.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 4 = nucleotide\n"
		"out of range, 8 = too many restraints specified, 9 = nucleotide in\n"
		"conflicting restraint). \n"
		""},
	 { (char *)"RNA_ForceSingleStranded", (PyCFunction) _wrap_RNA_ForceSingleStranded, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ForceSingleStranded(const int i)\n"
		"\n"
		"Force a nucleotide to be single stranded.\n"
		"\n"
		"This function indicates a nucleotide that is single stranded. In\n"
		"subsequent structure prediction, this nucleotide will be single\n"
		"stranded. The function returns 0 with no error and a non-zero\n"
		"otherwise that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of the nucleotide that is single stranded.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 4 = nucleotide\n"
		"out of range, 8 = too many restraints specified, 9 = same nucleotide\n"
		"in conflicting restraint). \n"
		""},
	 { (char *)"RNA_GetForcedDoubleStranded", (PyCFunction) _wrap_RNA_GetForcedDoubleStranded, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetForcedDoubleStranded(const int constraintnumber)\n"
		"\n"
		"Return a nucleotide that is forced double stranded.\n"
		"\n"
		"This function returns a nucleotide that is constrainted to be paired.\n"
		"Constraints are numbered from zero to\n"
		"GetNumberofForcedDoubleStranded()-1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"constraintnumber:  is the index to the constraint number.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that is the nucleotide index. If the constraintnumber is\n"
		"for a constraint that does not exist, zero is returned. \n"
		""},
	 { (char *)"RNA_GetForcedFMNCleavage", (PyCFunction) _wrap_RNA_GetForcedFMNCleavage, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetForcedFMNCleavage(const int constraintnumber)\n"
		"\n"
		"Return a nucleotide that is accessible to FMN cleavage.\n"
		"\n"
		"This function returns a nucleotide that is constrainted to be\n"
		"accessible to FMN cleavage (a U in a GU pair). Constraints are\n"
		"numbered from zero to GetNumberofForcedFMNCleavages()-1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"constraintnumber:  is the index to the constraint number.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that is the nucleotide index. If the constraintnumber is\n"
		"for a constraint that does not exist, zero is returned. \n"
		""},
	 { (char *)"RNA_GetForcedModification", (PyCFunction) _wrap_RNA_GetForcedModification, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetForcedModification(const int constraintnumber)\n"
		"\n"
		"Return a nucleotide that is accessible to modification.\n"
		"\n"
		"This function returns a nucleotide that is constrainted to be\n"
		"accessible to chemical modification. Constraints are numbered from\n"
		"zero to GetNumberofModifications()-1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"constraintnumber:  is the index to the constraint number.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that is the nucleotide index. If the constraintnumber is\n"
		"for a constraint that does not exist, zero is returned. \n"
		""},
	 { (char *)"RNA_GetForcedPair", (PyCFunction) _wrap_RNA_GetForcedPair, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetForcedPair(const int constraintnumber, const bool fiveprime)\n"
		"\n"
		"Return a nucleotide in a forced pair.\n"
		"\n"
		"This function returns either the five prime or three prime nucleotide\n"
		"in a forced pair constraint, depending on the value of fiveprime.\n"
		"Constraints are numbered from zero to GetNumberofForcedPairs()-1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"constraintnumber:  is the index to the constraint number.\n"
		"\n"
		"fiveprime:  determines if the nucleotide is the five prime or the\n"
		"three prime nucleotide in the constraint. true = five prime\n"
		"nucleotide.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that is the nucleotide index. If the constraintnumber is\n"
		"for a constraint that does not exist, zero is returned. \n"
		""},
	 { (char *)"RNA_GetForcedProhibitedPair", (PyCFunction) _wrap_RNA_GetForcedProhibitedPair, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetForcedProhibitedPair(const int constraintnumber, const bool\n"
		"fiveprime)\n"
		"\n"
		"Return a nucleotide in a prohibited pair.\n"
		"\n"
		"This function returns either the five prime or three prime nucleotide\n"
		"in a prohibited pair constraint, depending on the value of fiveprime.\n"
		"Constraints are numbered from zero to GetNumberofForcedProhibited()-1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"constraintnumber:  is the index to the constraint number.\n"
		"\n"
		"fiveprime:  determines if the nucleotide is the five prime or the\n"
		"three prime nucleotide in the constraint. true = five prime\n"
		"nucleotide.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that is the nucleotide index. If the constraintnumber is\n"
		"for a constraint that does not exist, zero is returned. \n"
		""},
	 { (char *)"RNA_GetForcedSingleStranded", (PyCFunction) _wrap_RNA_GetForcedSingleStranded, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetForcedSingleStranded(const int constraintnumber)\n"
		"\n"
		"Return a nucleotide that is forced single stranded.\n"
		"\n"
		"This function returns a nucleotide that is constrainted to be single\n"
		"stranded. Constraints are numbered from zero to\n"
		"GetNumberofForcedSingleStranded()-1.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"constraintnumber:  is the index to the constraint number.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that is the nucleotide index. If the constraintnumber is\n"
		"for a constraint that does not exist, zero is returned. \n"
		""},
	 { (char *)"RNA_GetMaximumPairingDistance", _wrap_RNA_GetMaximumPairingDistance, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetMaximumPairingDistance()\n"
		"\n"
		"Return the maximum pairing distance.\n"
		"\n"
		"return An integer that indicates the maximum distance allowed between\n"
		"paired nucleotides, where -1 indicates that the maximum distance is\n"
		"not set. \n"
		""},
	 { (char *)"RNA_GetNumberOfForcedDoubleStranded", _wrap_RNA_GetNumberOfForcedDoubleStranded, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetNumberOfForcedDoubleStranded()\n"
		"\n"
		"Return the number of nucletides forced to be paired.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates the number of nucleotides that are forced\n"
		"pair. \n"
		""},
	 { (char *)"RNA_GetNumberOfForcedFMNCleavages", _wrap_RNA_GetNumberOfForcedFMNCleavages, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetNumberOfForcedFMNCleavages()\n"
		"\n"
		"Return the number of nucleotides accessible to FMN cleavage.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates the number of FMN cleavage nucleotides (Us\n"
		"in GU pairs). \n"
		""},
	 { (char *)"RNA_GetNumberOfForcedModifications", _wrap_RNA_GetNumberOfForcedModifications, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetNumberOfForcedModifications()\n"
		"\n"
		"Return the number of nucleotides accessible to chemical modification.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates the number of modified nucleotides. \n"
		""},
	 { (char *)"RNA_GetNumberOfForcedPairs", _wrap_RNA_GetNumberOfForcedPairs, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetNumberOfForcedPairs()\n"
		"\n"
		"Return the number of forced base pairs.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates the number of forced pairs. \n"
		""},
	 { (char *)"RNA_GetNumberOfForcedProhibitedPairs", _wrap_RNA_GetNumberOfForcedProhibitedPairs, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetNumberOfForcedProhibitedPairs()\n"
		"\n"
		"Return the number of prohibited base pairs.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates the number of pairs that are prohibited. \n"
		""},
	 { (char *)"RNA_GetNumberOfForcedSingleStranded", _wrap_RNA_GetNumberOfForcedSingleStranded, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetNumberOfForcedSingleStranded()\n"
		"\n"
		"Return the number of nucleotides that are not allowed to pair.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates the number of nucleotides not allowed to\n"
		"pair. \n"
		""},
	 { (char *)"RNA_ReadConstraints", (PyCFunction) _wrap_RNA_ReadConstraints, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ReadConstraints(const char filename[])\n"
		"\n"
		"Read a set of folding constraints to disk in a plain text file.\n"
		"\n"
		"The file format for constraints is that generated by the\n"
		"WriteConstraints() function. The function returns 0 with no error and\n"
		"a non-zero otherwise that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString(). Note that calling ReadConstraints() will\n"
		"erase previously defined constraints (except for SHAPE pseudoenergy\n"
		"restraints).\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a c string that is the file name to be read.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 1 = file not\n"
		"found, 13 = error reading constraint file). \n"
		""},
	 { (char *)"RNA_ReadSHAPE", _wrap_RNA_ReadSHAPE, METH_VARARGS, (char *)"\n"
		"int RNA::ReadSHAPE(const char\n"
		"filename[], const double parameter1, const double parameter2, const\n"
		"double ssm, const double ssb, std::string modifier=\"SHAPE\")\n"
		"\n"
		"Read SHAPE data from disk including single-stranded SHAPE pseudo free\n"
		"energys.\n"
		"\n"
		"The SHAPE data is used to constrain structure prediction on subsequent\n"
		"structure predictions. This version of the overloaded function\n"
		"includes a single-stranded pseudo free energy change. The function\n"
		"returns 0 with no error and a non-zero otherwise that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString(). Pseudo folding free\n"
		"energy change parameters should be in units of kcal/mol.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a c string that indicates a file that contains SHAPE\n"
		"data.\n"
		"\n"
		"parameter1:  is the double-stranded slope.\n"
		"\n"
		"parameter2:  is the double-stranded intercept.\n"
		"\n"
		"modifier:  is the type of chemical modification probe that was used\n"
		"(currently accepted values are SHAPE, DMS, and CMCT). Defaults to\n"
		"SHAPE.\n"
		"\n"
		"ssm:  is the single-stranded slope.\n"
		"\n"
		"ssb:  is the single-stranded intercept.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 1 = input file\n"
		"not found). \n"
		""},
	 { (char *)"RNA_ReadDMS", (PyCFunction) _wrap_RNA_ReadDMS, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RNA_ReadDSO", (PyCFunction) _wrap_RNA_ReadDSO, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::ReadDSO(const char\n"
		"filename[])\n"
		"\n"
		"Read double strand offset data from disk.\n"
		"\n"
		"The double strand offset is data that is used to constrain structure\n"
		"prediction on subsequent structure predictions. This is a free energy\n"
		"in kcal/mol that is added to a specific nucleotide that is double\n"
		"stranded. The function returns 0 with no error and a non-zero\n"
		"otherwise that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a c string that indicates a file that contains data, in\n"
		"a raw format with nucleotide index and offset (one set per line).\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 1 = input file\n"
		"not found). \n"
		""},
	 { (char *)"RNA_ReadSSO", (PyCFunction) _wrap_RNA_ReadSSO, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::ReadSSO(const char\n"
		"filename[])\n"
		"\n"
		"Read single strand offset data from disk.\n"
		"\n"
		"The single strand offset is data that is used to constrain structure\n"
		"prediction on subsequent structure predictions. This is a free energy\n"
		"in kcal/mol that is added to a specific nucleotide that is single\n"
		"stranded. The function returns 0 with no error and a non-zero\n"
		"otherwise that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a c string that indicates a file that contains data, in\n"
		"a raw format with nucleotide index and offset (one set per line).\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 1 = input file\n"
		"not found). \n"
		""},
	 { (char *)"RNA_ReadExperimentalPairBonus", (PyCFunction) _wrap_RNA_ReadExperimentalPairBonus, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::ReadExperimentalPairBonus(const char filename[], double const\n"
		"experimentalOffset, double const experimentalScaling)\n"
		"\n"
		"Read experimental pair bonuses from disk.\n"
		"\n"
		"This is a quantity that results in a bonus added to a specific pair,\n"
		"once per stack, so that pairs in the middle of a helix get the bonus\n"
		"twice and those at the end of a helix get the bonus once. The bonus is\n"
		"in the form of experimentalScaling*value + experimentalOffset. The\n"
		"data is formatted using a simple square matrix of values and no\n"
		"headers. The format requires that there be N^2 entries for a sequence\n"
		"of N nucleotides.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a c string that indicates a file that contains data.\n"
		"\n"
		"experimentalOffset:  is a double that is added to each value.\n"
		"\n"
		"experimentalScaling:  is a double by which each value is multiplied.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 1 = input file\n"
		"not found). \n"
		""},
	 { (char *)"RNA_RemoveConstraints", _wrap_RNA_RemoveConstraints, METH_VARARGS, (char *)"\n"
		"void\n"
		"RNA::RemoveConstraints()\n"
		"\n"
		"Remove all folding constraints.\n"
		"\n"
		"This function strips all previously assigned folding constraints. Note\n"
		"that this function does not delete SHAPE constraints or pseudo free\n"
		"energies. \n"
		""},
	 { (char *)"RNA_SetExtrinsic", (PyCFunction) _wrap_RNA_SetExtrinsic, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::SetExtrinsic(int\n"
		"i, int j, double k)\n"
		"\n"
		"Add extrinsic restraints for partition function calculations.\n"
		"\n"
		"This function multiplies the equilibrium constant for structures\n"
		"including the i-j basepair by k. This applies only to partition\n"
		"functions and to stochastic traceback. If k>1, then the i-j pair is\n"
		"favored and if k<1, the i-j pair is disfavored. k should always be >=\n"
		"0. In case of error, the function returns a non-zero that can be\n"
		"parsed by GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of a nucleotide in the i-j pair.\n"
		"\n"
		"j:  is the index of the other nucleotide in the i-j pair.\n"
		"\n"
		"k:  is an equilibrium constant that is >= 0.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, >0 indicates an\n"
		"error). \n"
		""},
	 { (char *)"RNA_WriteConstraints", (PyCFunction) _wrap_RNA_WriteConstraints, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::WriteConstraints(const char filename[])\n"
		"\n"
		"Write the current set of folding constraints to disk in a plain text\n"
		"file.\n"
		"\n"
		"This function does not write SHAPE pseudo energies.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a c string that is the file name to be written.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error). Currently,\n"
		"this function does not generate errors, but the return is provided to\n"
		"add error handling in the future. \n"
		""},
	 { (char *)"RNA_AddComment", (PyCFunction) _wrap_RNA_AddComment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::AddComment(const\n"
		"char comment[], const int structurenumber=1)\n"
		"\n"
		"Add a comment associated with a structure.\n"
		"\n"
		"This comment will appear in a written .ct file. The comment is\n"
		"appended to any existing comments, like titles read from .seq files.\n"
		"This function is especially useful if the constructor is used in which\n"
		"a character array is provided with the sequence. In that case, there\n"
		"is no sequence title read. The function returns 0 in the case of no\n"
		"errors, or 3 if the structurenumber is invalid. An error message can\n"
		"be retrieved using GetErrorMessage() called with the errorcode.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"comment:  is a character array that contains a null terminated\n"
		"c-string with the comment to be registered.\n"
		"\n"
		"structurenumber:  is an integer that specifies to which structure the\n"
		"comment should be added.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that contains an error code, where 0 is no error and non-\n"
		"zero is an error. \n"
		""},
	 { (char *)"RNA_WriteCt", (PyCFunction) _wrap_RNA_WriteCt, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::WriteCt(const char\n"
		"filename[], bool append=false)\n"
		"\n"
		"Write a ct file of the structures.\n"
		"\n"
		"Return 0 if no error and non-zero errors can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a NULL terminated c string that specifies the name of\n"
		"the ct file to be written.\n"
		"\n"
		"append:  is a bool that indiactes whether the ct data should be\n"
		"appended to an existing file. If true, data will be appended if the\n"
		"file exists, or a new file created if the file does not exist. If\n"
		"false, any esiting file is overwritten. This is false by default.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that provides an error code. 0 = no error, 10 = no\n"
		"structure to write. \n"
		""},
	 { (char *)"RNA_WriteDotBracket", (PyCFunction) _wrap_RNA_WriteDotBracket, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::WriteDotBracket(const char filename[])\n"
		"\n"
		"Write dot-bracket file of structures.\n"
		"\n"
		"Return 0 if no error and non-zero errors can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a NULL terminated c string that specified the name of\n"
		"the file to be written.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that provides an error code. 0 = no error. \n"
		""},
	 { (char *)"RNA_BreakPseudoknot", (PyCFunction) _wrap_RNA_BreakPseudoknot, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::BreakPseudoknot(const bool minimum_energy=true, const int\n"
		"structurenumber=0)\n"
		"\n"
		"Break any pseudoknots that might be in a structure.\n"
		"\n"
		"This function uses the method of Smit et al. to break pseudoknots by\n"
		"running a dynamic programming algorithm that cannot predict\n"
		"pseudoknots while only allowing the pairs that already exist in the\n"
		"structure. When minimum_energy = true (the default), this function\n"
		"predicts the lowest free energy structure that has no pseudoknots.\n"
		"Note that when minimum_energy = true, this function might additionally\n"
		"break pairs that are not pseudoknotted if the pairs increase the\n"
		"folding free energy change or are forbidden (as in an isolated pair).\n"
		"Also note that when minum_energy=true, this function uses the\n"
		"GenerateAllSuboptimalStructures methodology behind the scenes, so\n"
		"large internal loops in the input would lead to a loss of pairs. When\n"
		"minumum_energy is set to false, this function maximizes the number of\n"
		"base pairs in the pseudoknot free structure. Return 0 if no error and\n"
		"non-zero errors can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"minimum_energy:  is a bool thgat indicates where the structure should\n"
		"be minimum in free energy (true) or maximize pairs (false).\n"
		"\n"
		"structurenumber:  is an int that indicates a specific structure for\n"
		"which to break pseudoknots (indexed from 1). The default value, 0,\n"
		"indicates that all structures should have pseudoknots broken.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an int that provides an error code. 0 = no error. \n"
		""},
	 { (char *)"RNA_ContainsPseudoknot", (PyCFunction) _wrap_RNA_ContainsPseudoknot, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"bool\n"
		"RNA::ContainsPseudoknot(const int structurenumber)\n"
		"\n"
		"Report if there are any pseudoknots in a structure.\n"
		"\n"
		"This method checks for any \"crossing pairs,\" i.e. i-j and i'-j' s.t.\n"
		"i < i' < j < jp. If there is at least one crossing pair set, then\n"
		"there is a pseudoknot and the function returns true. This function\n"
		"generates internal error codes that can be accessed by GetErrorCode()\n"
		"after the constructor is called: 0 = no error, nonzero = error. The\n"
		"errorcode can be resolved to a c string using GetErrorMessage.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"structurenumber:  is an int that indicates the structure number to\n"
		"check. Note that indexing of structures starts with structure #1.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A bool that indicates whether there is a pseudoknot. \n"
		""},
	 { (char *)"RNA_GetEnsembleEnergy", _wrap_RNA_GetEnsembleEnergy, METH_VARARGS, (char *)"\n"
		"double\n"
		"RNA::GetEnsembleEnergy()\n"
		"\n"
		"Get the ensemble folding free energy change.\n"
		"\n"
		"Returns the ensemble folding free energy change as determined by the\n"
		"partition function. This is a handy way of getting the size of the\n"
		"partition function Q, which itself is too large to fit in a double for\n"
		"all but the shortest sequences. The ensemble folding free energy\n"
		"change = -RT ln (Q). Function requires that the partition function\n"
		"data be present either because PartitionFunction() has been called or\n"
		"the constructor that reads a partition function save was used. This\n"
		"function generates internal error codes that can be accessed by\n"
		"GetErrorCode() after the constructor is called: 0 = no error, nonzero\n"
		"= error. The errorcode can be resolved to a c string using\n"
		"GetErrorMessage.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the ensemble folding free energy change in kcal/mol.\n"
		"\n"
		""},
	 { (char *)"RNA_GetEnsembleDefect", (PyCFunction) _wrap_RNA_GetEnsembleDefect, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RNA_GetFreeEnergy", (PyCFunction) _wrap_RNA_GetFreeEnergy, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"RNA::GetFreeEnergy(const int structurenumber)\n"
		"\n"
		"Get the folding free energy change for a predicted structure.\n"
		"\n"
		"Returns the folding free energy change of structure i as determined by\n"
		"a previous folding calculation. Function requires that the structure\n"
		"be predicted by a structure prediction method. This function generates\n"
		"internal error codes that can be accessed by GetErrorCode() after the\n"
		"constructor is called: 0 = no error, nonzero = error. The errorcode\n"
		"can be resolved to a c string using GetErrorMessage.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"structurenumber:  is an integer indicating the predicted structure\n"
		"number.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the folding free energy change in kcal/mol. \n"
		""},
	 { (char *)"RNA_GetPair", (PyCFunction) _wrap_RNA_GetPair, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int RNA::GetPair(const int i,\n"
		"const int structurenumber=1)\n"
		"\n"
		"Get the nucleotide to which the specified nucleotide is paired.\n"
		"\n"
		"Returns the pairing partner of the ith nucleotide in structure number\n"
		"structurenumber. Zero means the nucleotide is unpaired. This function\n"
		"generates internal error codes that can be accessed by GetErrorCode()\n"
		"after the constructor is called: 0 = no error, nonzero = error. The\n"
		"errorcode can be resolved to a c string using GetErrorMessage.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is an int that indicates the nucleotide to which the pairing\n"
		"partner is being queried.\n"
		"\n"
		"structurenumber:  is an int that indicates the structure number, where\n"
		"the default is 1.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates the other nucleotide in pair, where 0 is no\n"
		"paired. \n"
		""},
	 { (char *)"RNA_GetPairEnergy", (PyCFunction) _wrap_RNA_GetPairEnergy, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"RNA::GetPairEnergy(const int i, const int j)\n"
		"\n"
		"Get the lowest folding free energy possible for a structure containing\n"
		"pair i-j.\n"
		"\n"
		"Returns a folding free energy change in kcal/mol for use in energy dot\n"
		"plots. This function requires that the RNA constructor be called with\n"
		"a save file (.sav) name. (That is, for historical resaons, this cannot\n"
		"be called after FoldSingleStrand without writing the data to disk.)\n"
		"This function generates internal error codes that can be accessed by\n"
		"GetErrorCode() after the constructor is called: 0 = no error, nonzero\n"
		"= error. The errorcode can be resolved to a c string using\n"
		"GetErrorMessage. param i and j are ints that provide indexes the 5'\n"
		"and 3' nucleotides, respectively, in a pair. return A double that is\n"
		"the folding free energy change in kcal/mol. \n"
		""},
	 { (char *)"RNA_GetPairProbability", (PyCFunction) _wrap_RNA_GetPairProbability, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"RNA::GetPairProbability(const int i, const int j)\n"
		"\n"
		"Get a base pair probability.\n"
		"\n"
		"Returns the base pair probability for the pair between i and j.\n"
		"Function requires that the partition function data be present either\n"
		"because PartitionFunction() has been called or the constructor that\n"
		"reads a partition function save was used. This function generates\n"
		"internal error codes that can be accessed by GetErrorCode(): 0 = no\n"
		"error, nonzero = error. The errorcode can be resolved to a c string\n"
		"using GetErrorMessage.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  provides the 5' nucleotide in a pair.\n"
		"\n"
		"j:  provides the 3' nucleotides in a pair.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the base pair probability. If i and j cannot pair,\n"
		"0.0 is returned. If an error occurs, 0.0 is returned. \n"
		""},
	 { (char *)"RNA_GetPairProbabilities", (PyCFunction) _wrap_RNA_GetPairProbabilities, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RNA_GetStructureNumber", _wrap_RNA_GetStructureNumber, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetStructureNumber()\n"
		"\n"
		"Get the total number of specified or predicted structures.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer specify the total number of structures. \n"
		""},
	 { (char *)"RNA_DetermineDrawingCoordinates", (PyCFunction) _wrap_RNA_DetermineDrawingCoordinates, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::DetermineDrawingCoordinates(const int height, const int width,\n"
		"const int structurenumber=1)\n"
		"\n"
		"Determine the coordinates for drawing a secondary structure.\n"
		"\n"
		"This function determines drawing coordinates for all nucleotides in\n"
		"structure number structurenumber. User must specify the height and\n"
		"width of a character (use the largest of nucleotides). The coordinates\n"
		"are in an abstract palette; the user must determine the minimum and\n"
		"maximum coordinate in both the x and y direction. The actual\n"
		"coordinates are fetched using GetNucleotideXCoordinate(int i) and\n"
		"GetNucleotideYCoordinate(int i). This function returns are error code,\n"
		"where 0=no error and other messages can be resolved to a c string\n"
		"using GetErrorMessage. The structure to be drawn must be free of\n"
		"pseudoknots.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"height:  is an integer that refers to the height of a nucleotide.\n"
		"\n"
		"width:  is an integer that refers to the width of a nucleotide, where\n"
		"the largest nucleotide should be provided or a non-proportional font\n"
		"should be used.\n"
		"\n"
		"structurenumber:  is an integer that refers to the structure to be\n"
		"drawn.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that provides an error code, 0 = no error and other errors can\n"
		"be resolved to a c string using GetErrorMessage. \n"
		""},
	 { (char *)"RNA_GetCommentString", (PyCFunction) _wrap_RNA_GetCommentString, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"std::string\n"
		"RNA::GetCommentString(const int structurenumber=1)\n"
		"\n"
		"Provide the comment from the ct file as a string.\n"
		"\n"
		"This function provides the comment from the CT file for a structure as\n"
		"a string. This function generates internal error codes that can be\n"
		"accessed by GetErrorCode() after the function is called: 0 = no error,\n"
		"nonzero = error. The errorcode can be resolved to a c string using\n"
		"GetErrorMessage.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"structurenumber:  is the structure for which the comment is to be\n"
		"provided.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A string that provides the comment. \n"
		""},
	 { (char *)"RNA_GetNucleotideXCoordinate", (PyCFunction) _wrap_RNA_GetNucleotideXCoordinate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetNucleotideXCoordinate(const int i)\n"
		"\n"
		"Get the X coordinate for nucleotide i for drawing a structure.\n"
		"\n"
		"This function gets the X coordinate for placing the nucleotide\n"
		"specified by i. The user needs to have determined the coordinates for\n"
		"a complete structure using DetermineDrawingCoordinates prior to making\n"
		"this call. This function generates internal error codes that can be\n"
		"accessed by GetErrorCode(): 0 = no error, nonzero = error. The\n"
		"errorcode can be resolved to a c string using GetErrorMessage. Zero is\n"
		"returned in case of error, but note that zero is also a valid\n"
		"coordinate.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is an integer refering to the nucleotide to be drawn.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that gives the X coordinate. \n"
		""},
	 { (char *)"RNA_GetNucleotideYCoordinate", (PyCFunction) _wrap_RNA_GetNucleotideYCoordinate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetNucleotideYCoordinate(const int i)\n"
		"\n"
		"Get the Y coordinate for nucleotide i for drawing a structure.\n"
		"\n"
		"This function gets the Y coordinate for placing the nucleotide\n"
		"specified by i. The user needs to have determined the coordinates for\n"
		"a complete structure using DetermineDrawingCoordinates prior to making\n"
		"this call. This function generates internal error codes that can be\n"
		"accessed by GetErrorCode(): 0 = no error, nonzero = error. The\n"
		"errorcode can be resolved to a c string using GetErrorMessage. Zero is\n"
		"returned in case of error, but note that zero is also a valid\n"
		"coordinate.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is an integer refering to the nucleotide to be drawn.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that gives the Y coordinate. \n"
		""},
	 { (char *)"RNA_GetLabelXCoordinate", (PyCFunction) _wrap_RNA_GetLabelXCoordinate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetLabelXCoordinate(const int i)\n"
		"\n"
		"Get the X coordinate for placing the nucleotide index label specified\n"
		"by i.\n"
		"\n"
		"This function gets the X coordinate for placing the nucleotide index\n"
		"label specified by i. The user needs to have determined the\n"
		"coordinates for a complete structure using DetermineDrawingCoordinates\n"
		"prior to making this call. This function generates internal error\n"
		"codes that can be accessed by GetErrorCode(): 0 = no error, nonzero =\n"
		"error. The errorcode can be resolved to a c string using\n"
		"GetErrorMessage. Zero is returned in case of error, but note that zero\n"
		"is also a valid coordinate. One additiona caveat: Labels that are\n"
		"placed at 0,0 are lables that would have overlapped nucleotides. These\n"
		"labels should not be drawn.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is an integer refering to the label to be drawn. This needs to be\n"
		"a multiple of 10.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that gives the X coordinate. \n"
		""},
	 { (char *)"RNA_GetLabelYCoordinate", (PyCFunction) _wrap_RNA_GetLabelYCoordinate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"RNA::GetLabelYCoordinate(const int i)\n"
		"\n"
		"Get the Y coordinate for placing the nucleotide index label specified\n"
		"by i.\n"
		"\n"
		"This function gets the Y coordinate for placing the nucleotide index\n"
		"label specified by i. The user needs to have determined the\n"
		"coordinates for a complete structure using DetermineDrawingCoordinates\n"
		"prior to making this call. This function generates internal error\n"
		"codes that can be accessed by GetErrorCode(): 0 = no error, nonzero =\n"
		"error. The errorcode can be resolved to a c string using\n"
		"GetErrorMessage. Zero is returned in case of error, but note that zero\n"
		"is also a valid coordinate. One additiona caveat: Labels that are\n"
		"placed at 0,0 are lables that would have overlapped nucleotides. These\n"
		"labels should not be drawn.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is an integer refering to the label to be drawn. This needs to be\n"
		"a multiple of 10.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that gives the Y coordinate. \n"
		""},
	 { (char *)"RNA_GetNucleotide", (PyCFunction) _wrap_RNA_GetNucleotide, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"char\n"
		"RNA::GetNucleotide(const int i)\n"
		"\n"
		"param An integer specifying the nucleotide index (starting at 1 and\n"
		"ending at GetSequenceLength()). This function generates internal error\n"
		"codes that can be accessed by GetErrorCode(): 0 = no error, nonzero =\n"
		"error. The errorcode can be resolved to a c string using\n"
		"GetErrorMessage. Note that nucleotides are numbered starting at an\n"
		"index of 1. return The char representing the nucleotide at index i or\n"
		"'-' if an error occured. \n"
		""},
	 { (char *)"RNA_GetSequenceLength", _wrap_RNA_GetSequenceLength, METH_VARARGS, (char *)"\n"
		"int\n"
		"RNA::GetSequenceLength()\n"
		"\n"
		"Get the total length of the sequence.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that specifies the total length of the sequence. \n"
		""},
	 { (char *)"RNA_GetSequence", _wrap_RNA_GetSequence, METH_VARARGS, NULL},
	 { (char *)"RNA_GetBackboneType", _wrap_RNA_GetBackboneType, METH_VARARGS, (char *)"\n"
		"bool\n"
		"RNA::GetBackboneType()\n"
		"\n"
		"Get the backbone type.\n"
		"\n"
		"This function returns whether the backbone is RNA or DNA. Note that\n"
		"backbone type is set when calling the constructor.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A bool that indicates the backbone (true = RNA, false = DNA). \n"
		""},
	 { (char *)"RNA_GetStructure", _wrap_RNA_GetStructure, METH_VARARGS, (char *)"\n"
		"structure *\n"
		"RNA::GetStructure()\n"
		"\n"
		"Access the underlying structure class. This is provided for use with\n"
		"two sequence methods. Generally, there is no need for end users to use\n"
		"this function because the RNA class provides an convenient wrapper for\n"
		"accessing the information in an RNA class.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to structure. \n"
		""},
	 { (char *)"RNA_SetProgress", (PyCFunction) _wrap_RNA_SetProgress, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"RNA::SetProgress(TProgressDialog &Progress)\n"
		"\n"
		"Provide a TProgressDialog for following calculation progress. A\n"
		"TProgressDialog class has a public function void update(int percent)\n"
		"that indicates the progress of a long calculation.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Progress:  is a TProgressDialog class. \n"
		""},
	 { (char *)"RNA_StopProgress", _wrap_RNA_StopProgress, METH_VARARGS, (char *)"\n"
		"void RNA::StopProgress()\n"
		"\n"
		"Provide a means to stop using a TProgressDialog. StopProgress tells\n"
		"the RNA class to no longer follow progress. This should be called if\n"
		"the TProgressDialog is deleted, so that this class does not make\n"
		"reference to it. \n"
		""},
	 { (char *)"RNA_GetProgress", _wrap_RNA_GetProgress, METH_VARARGS, (char *)"\n"
		"TProgressDialog *\n"
		"RNA::GetProgress()\n"
		"\n"
		"Return the current pointer to TProgressDialog. This is used during\n"
		"inheritance to provide access to the underlying TProgressDialog. \n"
		""},
	 { (char *)"delete_RNA", _wrap_delete_RNA, METH_VARARGS, (char *)"\n"
		"RNA::~RNA()\n"
		"\n"
		"Destructor.\n"
		"\n"
		"The destructor automatically cleans up all allocated memory for\n"
		"predicted or specified structures. \n"
		""},
	 { (char *)"RNA_CopyThermo", (PyCFunction) _wrap_RNA_CopyThermo, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"RNA_swigregister", RNA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HybridRNA", _wrap_new_HybridRNA, METH_VARARGS, (char *)"\n"
		"HybridRNA::HybridRNA(const char filename1[], const int type1, const\n"
		"char filename2[], const int type2, const bool IsRNA=true) \n"
		""},
	 { (char *)"HybridRNA_AccessFold", (PyCFunction) _wrap_HybridRNA_AccessFold, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"HybridRNA::AccessFold(const double gamma=0.4, const float percent=50,\n"
		"const int maximumstructures=20, const int window=0, const int\n"
		"maxinternalloopsize=30)\n"
		"\n"
		"Predict the lowest free energy secondary structure for two interacting\n"
		"strands and generate suboptimal structures. Thuis method does not\n"
		"allow intramolecular pairs. It considers accessibility with a\n"
		"heuristic that uses tge partition function. If the temperature has not\n"
		"been specified using the RNA base class SetTemperature and no free\n"
		"energies have been calculated, the thermodynamic parameters have not\n"
		"been read and therefore they will be read by this function call. The\n"
		"parameter files should be located in the directory specified by the\n"
		"environment variable $DATAPATH of the pwd. In case of error, the\n"
		"function returns a non- zero that can be parsed by GetErrorMessage()\n"
		"or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"gamma:  is a scaling factor that weights accessibility. The defaults\n"
		"is 0.4\n"
		"\n"
		"percent:  is the maximum % difference in free energy in suboptimal\n"
		"structures from the lowest free energy structure. The default is 50.\n"
		"\n"
		"maximumstructures:  is the maximum number of suboptimal structures to\n"
		"generate. The fefault is 20.\n"
		"\n"
		"window:  is a parameter that specifies how different the suboptimal\n"
		"structures should be from each other (0=no restriction and larger\n"
		"integers require structures to be more different). The default is 0.\n"
		"\n"
		"maxinternalloopsize:  is the maximum number of unpaired nucleotides in\n"
		"bulge and internal loops. This is used to accelerate the prediction\n"
		"speed. The default is 30.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, 5 = error reading\n"
		"thermodynamic parameter files, 14 = traceback error). \n"
		""},
	 { (char *)"HybridRNA_FoldBimolecular", (PyCFunction) _wrap_HybridRNA_FoldBimolecular, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"HybridRNA::FoldBimolecular(const float percent=10, const int\n"
		"maximumstructures=20, const int window=0, const char savefile[]=\"\",\n"
		"const int maxinternalloopsize=30)\n"
		"\n"
		"Predict the lowest free energy secondary structure and generate\n"
		"suboptimal structures using a heuristic.\n"
		"\n"
		"This function predicts the lowest free energy structure and suboptimal\n"
		"structures. If the temperature has not been specified using the RNA\n"
		"base class SetTemperature and no free energies have been calculated,\n"
		"the thermodynamic parameters have not been read and therefore they\n"
		"will be read by this function call. The parameter files should be\n"
		"located in the directory specified by the environment variable\n"
		"$DATAPATH of the pwd. In case of error, the function returns a non-\n"
		"zero that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"percent:  is the maximum % difference in free energy in suboptimal\n"
		"structures from the lowest free energy structure. The default is 10.\n"
		"\n"
		"maximumstructures:  is the maximum number of suboptimal structures to\n"
		"generate. The defaults is 20.\n"
		"\n"
		"window:  is a parameter that specifies how different the suboptimal\n"
		"structures should be from each other (0=no restriction and larger\n"
		"integers require structures to be more different). The default is 0.\n"
		"\n"
		"savefile:  is c string containing a file path and name for a savefile\n"
		"(.sav)that can be used to generate energy dot plots and to refold the\n"
		"secondary structure using different suboptimal structure parameters.\n"
		"The default is \"\", which results in no save file written.\n"
		"\n"
		"maxinternalloopsize:  is the maximum number of unpaired nucleotides in\n"
		"bulge and internal loops. This is used to accelerate the prediction\n"
		"speed. The default is 30.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, 5 = error reading\n"
		"thermodynamic parameter files, 14 = traceback error). \n"
		""},
	 { (char *)"HybridRNA_FoldDuplex", (PyCFunction) _wrap_HybridRNA_FoldDuplex, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"HybridRNA::FoldDuplex(const float percent=40, const int\n"
		"maximumstructures=10, const int window=0, const int\n"
		"maxinternalloopsize=30)\n"
		"\n"
		"Predict the lowest free energy secondary structure for two strands\n"
		"that cannot form intramolecular pairs and generate suboptimal\n"
		"structures using a heuristic.\n"
		"\n"
		"This function predicts the lowest free energy bimolecular structure\n"
		"and suboptimal structures. This function does not allow any folding\n"
		"constraints. If the temperature has not been specified using\n"
		"SetTemperature and no free energies have been calculated, the\n"
		"thermodynamic parameters have not been read and therefore they will be\n"
		"read by this function call. The parameter files should be located in\n"
		"the directory specified by the environment variable $DATAPATH of the\n"
		"pwd. In case of error, the function returns a non-zero that can be\n"
		"parsed by GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"percent:  is the maximum % difference in free energy in suboptimal\n"
		"structures from the lowest free energy structure. The default is 40.\n"
		"\n"
		"maximumstructures:  is the maximum number of suboptimal structures to\n"
		"generate. The default is 10.\n"
		"\n"
		"window:  is a parameter that specifies how different the suboptimal\n"
		"structures should be from each other (0=no restriction and larger\n"
		"integers require structures to be more different). The default is 0.\n"
		"\n"
		"maxinternalloopsize:  is the maximum number of unpaired nucleotides in\n"
		"bulge and internal loops. This is used to accelerate the prediction\n"
		"speed. The default is 30.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, 5 = error reading\n"
		"thermodynamic parameter files, 14 = traceback error). \n"
		""},
	 { (char *)"HybridRNA_PartitionFunctionBimolecular", (PyCFunction) _wrap_HybridRNA_PartitionFunctionBimolecular, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"HybridRNA::PartitionFunctionBimolecular(const char savefile[]=\"\")\n"
		"\n"
		"Predict the bimolecular partition function for a sequence (with no\n"
		"intramolecular pairs).\n"
		"\n"
		"This function must be called to predict base pair probabilities,\n"
		"perform stochastic traceback, or for maximizing expected accuracy.\n"
		"This predicts the partition function without intramolecular pairs. If\n"
		"the temperature has not been specified using SetTemperature and no\n"
		"free energies have been calculated, the thermodynamic parameters have\n"
		"not been read and therefore they will be read by this function call.\n"
		"The parameter files should be located in the directory specified by\n"
		"the environment variable $DATAPATH of the pwd. In case of error, the\n"
		"function returns a non-zero that can be parsed by GetErrorMessage() or\n"
		"GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"savefile:  is a c string that contains the path and filename for\n"
		"creating a save file. This defaults to \"\", which indicates no file\n"
		"is to be written.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, 5 = error reading\n"
		"thermodynamic parameter files). \n"
		""},
	 { (char *)"HybridRNA_GetRNA1", _wrap_HybridRNA_GetRNA1, METH_VARARGS, (char *)"\n"
		"RNA * HybridRNA::GetRNA1()\n"
		"\n"
		"Access the underlying RNA class from an instance of TwoRNA. This is\n"
		"provided for use with two sequence methods. Generally, there is no\n"
		"need for end users to use this function.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to the underlying RNA class for sequence 1. \n"
		""},
	 { (char *)"HybridRNA_GetRNA2", _wrap_HybridRNA_GetRNA2, METH_VARARGS, (char *)"\n"
		"RNA * HybridRNA::GetRNA2()\n"
		"\n"
		"Access the underlying RNA class from an instance of TwoRNA. This is\n"
		"provided for use with two sequence methods. Generally, there is no\n"
		"need for end users to use this function.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to the underlying RNA class for sequence 2. \n"
		""},
	 { (char *)"HybridRNA_GetErrorCode", _wrap_HybridRNA_GetErrorCode, METH_VARARGS, (char *)"\n"
		"int\n"
		"HybridRNA::GetErrorCode()\n"
		"\n"
		"Return an error code, where a return of zero is no error.\n"
		"\n"
		"This function returns and error flag that is generated during\n"
		"construction by RNA(const char &filename, const int type, const bool\n"
		"IsRNA=true) or from CalculateFreeEnergy(). An error of zero is always\n"
		"no error. Other codes are errors and a c-string can be fetched for the\n"
		"error with GetErrorMessage().\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that provides the error code. \n"
		""},
	 { (char *)"HybridRNA_GetErrorMessage", (PyCFunction) _wrap_HybridRNA_GetErrorMessage, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"char *\n"
		"HybridRNA::GetErrorMessage(const int error)\n"
		"\n"
		"Return error messages based on code from GetErrorCode and other error\n"
		"codes.\n"
		"\n"
		"0 = no error <100 = Error to be fetched from RNA base class. 100-999 =\n"
		"Error associated with bimolecular folding, to be handled here. >=1000\n"
		"= Errors for underlying sequence, get message from TwoRNA base class.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"error:  is the integer error code provided by GetErrorCode().\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to a c string that provides an error message or from other\n"
		"functions that return integer error codes. \n"
		""},
	 { (char *)"HybridRNA_GetForbidIntramolecular", _wrap_HybridRNA_GetForbidIntramolecular, METH_VARARGS, (char *)"\n"
		"bool\n"
		"HybridRNA::GetForbidIntramolecular()\n"
		"\n"
		"Get whether intramolecular pairs are allowed.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A bool that indicates whether intramolecular pairs are forbidden (true\n"
		"= forbidden, false = not). \n"
		""},
	 { (char *)"HybridRNA_SetForbidIntramolecular", (PyCFunction) _wrap_HybridRNA_SetForbidIntramolecular, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"HybridRNA::SetForbidIntramolecular(const bool forbid)\n"
		"\n"
		"Set whether intramolecular pairs are allowed.\n"
		"\n"
		"If true is passed to this function, intramolecular pairs will be\n"
		"forbidden in FoldBimolecular.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"forbid:  is a bool that indicates whether intramolecular pairs are\n"
		"forbid. \n"
		""},
	 { (char *)"HybridRNA_SetProgress", (PyCFunction) _wrap_HybridRNA_SetProgress, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"HybridRNA::SetProgress(TProgressDialog &Progress)\n"
		"\n"
		"Provide a TProgressDialog for following calculation progress. A\n"
		"TProgressDialog class has a public function void update(int percent)\n"
		"that indicates the progress of a long calculation.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Progress:  is a TProgressDialog class. \n"
		""},
	 { (char *)"HybridRNA_StopProgress", _wrap_HybridRNA_StopProgress, METH_VARARGS, (char *)"\n"
		"void\n"
		"HybridRNA::StopProgress()\n"
		"\n"
		"Provide a means to stop using a TProgressDialog. StopProgress tells\n"
		"the RNA class to no longer follow progress. This should be called if\n"
		"the TProgressDialog is deleted, so that this class does not make\n"
		"reference to it. \n"
		""},
	 { (char *)"delete_HybridRNA", _wrap_delete_HybridRNA, METH_VARARGS, (char *)"\n"
		"HybridRNA::~HybridRNA()\n"
		"\n"
		""},
	 { (char *)"HybridRNA_swigregister", HybridRNA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TwoRNA", _wrap_new_TwoRNA, METH_VARARGS, (char *)"\n"
		"TwoRNA::TwoRNA()\n"
		"\n"
		"Constructor Default constructor that requires no parameters. \n"
		""},
	 { (char *)"TwoRNA_SetTemperature", (PyCFunction) _wrap_TwoRNA_SetTemperature, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"TwoRNA::SetTemperature(double temperature)\n"
		"\n"
		"Set the temperature at which the calculation will be performed in K.\n"
		"\n"
		"This function allows the user to specify folding temperatures other\n"
		"than 310.15 K (37 degrees C). This changes folding free energy changes\n"
		"that would be returned for existing structures and would alter the set\n"
		"of structures predicted. When this function is called, the\n"
		"thermodynamic parameter files are immediately read from disk. These\n"
		"include both enthalpy parameters (.dh files) and free energy changes\n"
		"at 310.15 (.dat files). The files must either be at a location\n"
		"indicated by the $DATAPATH environment variable or in pwd. Changing\n"
		"the temperature only alters subsequent calculations. For example, if a\n"
		"structure prediction method has been called, the set of predicted\n"
		"structures are not changed at the time of a call to SetTemperature.\n"
		"Likewise, SetTemperature must be called before calling a structure\n"
		"prediction method if a temperature other than the 310.15 K default is\n"
		"desired. The function returns an error code where 0 is no error and\n"
		"non-zero errors can be parsed by by GetErrorMessage() or\n"
		"GetErrorMessageString() in an inheriting class. \n"
		""},
	 { (char *)"TwoRNA_GetTemperature", _wrap_TwoRNA_GetTemperature, METH_VARARGS, (char *)"\n"
		"double\n"
		"TwoRNA::GetTemperature()\n"
		"\n"
		"Get the current folding temperature in K.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that indicates the folding temperature in K. \n"
		""},
	 { (char *)"TwoRNA_GetErrorCode", _wrap_TwoRNA_GetErrorCode, METH_VARARGS, (char *)"\n"
		"int\n"
		"TwoRNA::GetErrorCode()\n"
		"\n"
		"Return an error code, where a return of zero is no error.\n"
		"\n"
		"This function returns and error flag that is generated during\n"
		"construction by RNA(const char &filename, const int type, const bool\n"
		"IsRNA=true) or from CalculateFreeEnergy(). An error of zero is always\n"
		"no error. Other codes are errors and a c-string can be fetched for the\n"
		"error with GetErrorMessage().\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that provides the error code. \n"
		""},
	 { (char *)"TwoRNA_GetErrorMessage", (PyCFunction) _wrap_TwoRNA_GetErrorMessage, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"char *\n"
		"TwoRNA::GetErrorMessage(const int error)\n"
		"\n"
		"Return error messages based on code from GetErrorCode and other error\n"
		"codes.\n"
		"\n"
		"0 = no error 1000 = Error associated with sequence 1 or with a\n"
		"procedure, function will get message from sequence 1 (the inherited\n"
		"RNA class). 2000 = Error associated with sequence 2, function will get\n"
		"message from sequence 2 (the RNA2 class). 3000 = Errors with each\n"
		"sequence, function will get messages from each.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"error:  is the integer error code provided by GetErrorCode().\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to a c string that provides an error message or from other\n"
		"functions that return integer error codes. \n"
		""},
	 { (char *)"TwoRNA_GetErrorDetails", _wrap_TwoRNA_GetErrorDetails, METH_VARARGS, NULL},
	 { (char *)"TwoRNA_SetErrorDetails", (PyCFunction) _wrap_TwoRNA_SetErrorDetails, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"TwoRNA_GetErrorMessageString", (PyCFunction) _wrap_TwoRNA_GetErrorMessageString, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"std::string\n"
		"TwoRNA::GetErrorMessageString(const int error)\n"
		"\n"
		"Return error messages based on code from GetErrorCode and other error\n"
		"codes.\n"
		"\n"
		"Although RNA generally uses c strings, this member function returns a\n"
		"string that is suitable for interfacing with JAVA, etc. See the error\n"
		"list in the GetErrorMessage() entry.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"error:  is the integer error code provided by GetErrorCode() or from\n"
		"other functions that return integer error codes.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A string that provides an error message. \n"
		""},
	 { (char *)"TwoRNA_ResetError", _wrap_TwoRNA_ResetError, METH_VARARGS, NULL},
	 { (char *)"TwoRNA_GetRNA1", _wrap_TwoRNA_GetRNA1, METH_VARARGS, (char *)"\n"
		"RNA * TwoRNA::GetRNA1()\n"
		"\n"
		"return A pointer to the underlying structure class for sequence 1.\n"
		"\n"
		"Access the underlying RNA class. This is provided for use with two\n"
		"sequence methods. Generally, there is no need for end users to use\n"
		"this function.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to the underlying RNA class for sequence 1. \n"
		""},
	 { (char *)"TwoRNA_GetRNA2", _wrap_TwoRNA_GetRNA2, METH_VARARGS, (char *)"\n"
		"RNA * TwoRNA::GetRNA2()\n"
		"\n"
		"return A pointer to the underlying structure class for sequence 2.\n"
		"\n"
		"Access the underlying RNA class. This is provided for use with two\n"
		"sequence methods. Generally, there is no need for end users to use\n"
		"this function.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to the underlying RNA class for sequence 2. \n"
		""},
	 { (char *)"delete_TwoRNA", _wrap_delete_TwoRNA, METH_VARARGS, (char *)"\n"
		"TwoRNA::~TwoRNA()\n"
		"\n"
		"Destructor.\n"
		"\n"
		"The destructor cleans up all memory allocation. \n"
		""},
	 { (char *)"TwoRNA_compoundmessage_set", _wrap_TwoRNA_compoundmessage_set, METH_VARARGS, NULL},
	 { (char *)"TwoRNA_compoundmessage_get", _wrap_TwoRNA_compoundmessage_get, METH_VARARGS, NULL},
	 { (char *)"TwoRNA_swigregister", TwoRNA_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Dynalign_object", _wrap_new_Dynalign_object, METH_VARARGS, (char *)"\n"
		"Dynalign_object::Dynalign_object(const char *filename, const short\n"
		"maxtrace, const short bpwin, const short awin, const short percent)\n"
		"\n"
		"Constructor This constructor is used to perform Dynaligh refolding.\n"
		"This does not allow any changes in constraints, but does allow the\n"
		"creation of different set of suboptimal structures. This constructor\n"
		"generates internal error codes that can be accessed by GetErrorCode()\n"
		"after the constructor is called. 0 = no error. The errorcode can be\n"
		"resolved to a c string using GetErrorMessage.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is the name of a Dynalign save file name (.dsv).\n"
		"\n"
		"maxtrace:  is the maximum number of common structures to be\n"
		"determined. The recommended default is 20.\n"
		"\n"
		"bpwin:  the the base pair window parameter, where 0 allows the\n"
		"structures to have similar pairs and larger windows make the\n"
		"structures more diverse. The recommended default is 5.\n"
		"\n"
		"awin:  is the alignment window parameter, where 0 allows the\n"
		"alignments to be similar and larger values make the alignments more\n"
		"diverse. The recommended default is 1.\n"
		"\n"
		"percent:  is the maximum percent difference in total folding free\n"
		"energy change above the lowest for suboptimal common structures. The\n"
		"recommended default is 20. \n"
		""},
	 { (char *)"Dynalign_object_Dynalign", (PyCFunction) _wrap_Dynalign_object_Dynalign, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Dynalign_object::Dynalign(const short int maxtrace=20, const short int\n"
		"bpwin=5, const short int awin=1, const short int percent=20, const\n"
		"short int imaxseparation=-99, const float gap=0.4, const bool\n"
		"singleinsert=true, const char savefile[]=NULL, const bool\n"
		"optimalonly=false, const short int singlefold_subopt_percent=30, const\n"
		"bool local=false, const short int numProcessors=1, const int\n"
		"maxpairs=-1)\n"
		"\n"
		"Predict the lowest free energy structure common to two sequences and\n"
		"suboptimal solutions with the Dynalign algorithm.\n"
		"\n"
		"In case of error, the function returns a non-zero that can be parsed\n"
		"by GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"maxtrace:  is the maximum number of common structures to be\n"
		"determined. The defaults is 20.\n"
		"\n"
		"bpwin:  the the base pair window parameter, where 0 allows the\n"
		"structures to have similar pairs and larger windows make the\n"
		"structures more diverse. The default is 5.\n"
		"\n"
		"awin:  is the alignment window parameter, where 0 allows the\n"
		"alignments to be similar and larger values make the alignments more\n"
		"diverse. The default is 1.\n"
		"\n"
		"percent:  is the maximum percent difference in total folding free\n"
		"energy change above the lowest for suboptimal common structures. The\n"
		"defaults is 20.\n"
		"\n"
		"imaxseparation:  is the maximum separation between aligned\n"
		"nucleotides. Values >= 0 are the traditional parameter, those below\n"
		"zero trigger the HMM alignment method, which is now prefered.\n"
		"\n"
		"gap:  is the cost of adding gap nucleotides in the alignment in\n"
		"kcal/mol.\n"
		"\n"
		"singleinsert:  is whether single basepair inserts are allowed in one\n"
		"sequence vs the other.\n"
		"\n"
		"savefile:  is c-string with the name of a dynalign savefile (*.dsv) to\n"
		"be created.\n"
		"\n"
		"optimalonly:  can be used to turn on a calculation of only the energy\n"
		"(when true) and not the structures.\n"
		"\n"
		"singlefold_subopt_percent:  is the maximum % difference of folding\n"
		"energy above the lowest free energy structure for pairs in single\n"
		"sequence folding that will be allowed in the dynalign calculation.\n"
		"\n"
		"local:  is whether Dynalign is being run in local (true) or global\n"
		"mode (false).\n"
		"\n"
		"numProcessors:  is the number of processors to use for the\n"
		"calculation. This requires a compilation for SMP.\n"
		"\n"
		"maxpairs:  is under development for multiple sequence folding. Use -1\n"
		"(default) for now.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code (0 = no error, non-zero = error\n"
		"occurred). \n"
		""},
	 { (char *)"Dynalign_object_WriteAlignment", (PyCFunction) _wrap_Dynalign_object_WriteAlignment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"Dynalign_object::WriteAlignment(const char filename[])\n"
		"\n"
		"Write the alignment to disk.\n"
		"\n"
		"This function should be called after loading a dynalign save file or\n"
		"after a dynalign calculation has been performed. This function\n"
		"generates no error flag. Nothing can go wrong...\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is the file to which the alignment should be written. \n"
		""},
	 { (char *)"Dynalign_object_ForceAlignment", (PyCFunction) _wrap_Dynalign_object_ForceAlignment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Dynalign_object::ForceAlignment(const int i, const int k)\n"
		"\n"
		"Force an alignment during a Dynalign calculation).\n"
		"\n"
		"Nucleotide i from sequence 1 will be aligned to nucleotide k in\n"
		"sequence 2 in subsequent Dynalign calculation. The function returns 0\n"
		"with no error and a non-zero otherwise that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the index of nucleotide from sequence 1.\n"
		"\n"
		"k:  is the index of nucleotide from sequence 2.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 100 =\n"
		"nucleotide i out of range, 101 = nucleotide k out of range). \n"
		""},
	 { (char *)"Dynalign_object_GetForcedAlignment", (PyCFunction) _wrap_Dynalign_object_GetForcedAlignment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Dynalign_object::GetForcedAlignment(const int i, const int seq)\n"
		"\n"
		"Get an alignment constraint.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is the nucleotide number.\n"
		"\n"
		"seq:  is the sequence (1 or 2) from which i is derived.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates the nucleotide to which i is forced to be\n"
		"aligned, where 0 indicates no alignment. \n"
		""},
	 { (char *)"Dynalign_object_ReadAlignmentConstraints", (PyCFunction) _wrap_Dynalign_object_ReadAlignmentConstraints, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Dynalign_object::ReadAlignmentConstraints(const char filename[])\n"
		"\n"
		"Read alignment constraints from disk.\n"
		"\n"
		"The file format is: i1 k1 i2 k2 -1 -1 Where each line gives a aligned\n"
		"pair (i from sequence 1 and k from sequence 2). The file terminates\n"
		"with -1 -1 to indicate the file end. The function returns 0 with no\n"
		"error and a non-zero otherwise that can be parsed by GetErrorMessage()\n"
		"or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is a c string that is the file name to be read.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0 = no error, 102 = file not\n"
		"found, 103 = error reading constraint file). \n"
		""},
	 { (char *)"Dynalign_object_Templatefromct", (PyCFunction) _wrap_Dynalign_object_Templatefromct, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Dynalign_object::Templatefromct(const char ctfilename[])\n"
		"\n"
		"Read a ct file to determine what pairs will be allowed for sequence 1\n"
		"in a subsequent dynalign calculation.\n"
		"\n"
		"This results in all pairs but those in the ct being disallowed.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"ctfilename:  is the name of the ct file to be read to provide the\n"
		"template.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0=no error, 104=file not\n"
		"found, 105=template is already specified) \n"
		""},
	 { (char *)"Dynalign_object_Templatefromdsv", (PyCFunction) _wrap_Dynalign_object_Templatefromdsv, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Dynalign_object::Templatefromdsv(const char dsvfilename[], const float\n"
		"maxdsvchange)\n"
		"\n"
		"This reads a dsv file and only allows pairs with folding free energy\n"
		"change between the lowest and lowest + maxdsvchange in a subsequent\n"
		"dynalign calculation.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"dsvfilename:  is the name of the ct file to be read to provide the\n"
		"template.\n"
		"\n"
		"maxdsvchange:  in a float that gives a percent difference in free\n"
		"energy above the lowest free energy change.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code (0=no error, 106=file not\n"
		"found, 105=template is already specified) \n"
		""},
	 { (char *)"Dynalign_object_GetBestPairEnergy", (PyCFunction) _wrap_Dynalign_object_GetBestPairEnergy, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"Dynalign_object::GetBestPairEnergy(const int sequence, const int i,\n"
		"const int j)\n"
		"\n"
		"Report the best energy for pair i-j from sequence number sequence (1\n"
		"or 2).\n"
		"\n"
		"This function reports the lowest ffolding free energy for any pairs\n"
		"between i-j in sequence number sequence (1 or 2). This requires a\n"
		"search over all possible pairs in the second sequence. NOTE: This\n"
		"function ONLY works after reading a Dynalign save file (.dsv) using\n"
		"the constructor. This is because the Dynalign energies are not\n"
		"normally stored after calling Dynalign. This function generates\n"
		"internal error codes that can be accessed by GetErrorCode() after the\n"
		"constructor is called. 0 = no error, 107 = Data not available, 108 =\n"
		"nucleotide out of range. The errorcode can be resolved to a c string\n"
		"using GetErrorMessage.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"sequence:  is an integer indicating the sequence # (must be 1 or 2).\n"
		"\n"
		"i:  is the 5' nucleotide in a pair.\n"
		"\n"
		"j:  is the 3' nucleotide in a pair.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that gives an energy in kcal/mol. \n"
		""},
	 { (char *)"Dynalign_object_GetLowestEnergy", _wrap_Dynalign_object_GetLowestEnergy, METH_VARARGS, (char *)"\n"
		"double\n"
		"Dynalign_object::GetLowestEnergy()\n"
		"\n"
		"Report the lowest total free energy change from a Dynalign\n"
		"calculation.\n"
		"\n"
		"NOTE: This function ONLY works after reading a Dynalign save file\n"
		"(.dsv) using the constructor. This is because the Dynalign energies\n"
		"are not normally stored after calling Dynalign. This function\n"
		"generates internal error codes that can be accessed by GetErrorCode()\n"
		"after the constructor is called. 0 = no error, 107 = Data not\n"
		"available, 108 = nucleotide out of range. The errorcode can be\n"
		"resolved to a c string using GetErrorMessage.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"a double that gives an energy in kcal/mol. \n"
		""},
	 { (char *)"Dynalign_object_GetErrorMessage", (PyCFunction) _wrap_Dynalign_object_GetErrorMessage, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"char *\n"
		"Dynalign_object::GetErrorMessage(const int error)\n"
		"\n"
		"Return error messages based on code from GetErrorCode and other error\n"
		"codes.\n"
		"\n"
		"0 = no error 100-999 = Error associated with Dynalign, to be handled\n"
		"here. >=1000 = Errors for underlying sequence, get message from TwoRNA\n"
		"base class. Current errors handled here are: 100 \"Nucleotide from\n"
		"sequence 1 is out of range.\\\\n\"; 101 \"Nucleotide from sequence 2\n"
		"is out of range.\\\\n\"; 102 \"Alignment constraint file not\n"
		"found.\\\\n\"; 103 \"Error reading alignment constraint file.\\\\n\";\n"
		"104 \"CT file not found.\\\\n\"; 105 \"A template has already been\n"
		"specified; only one is allowed.\\\\n\"; 106 \"DSV file not\n"
		"found.\\\\n\"; 107 \"Data not available to calculate energy.\\\\n\"\n"
		"108 \"Nucleotide out of range.\\\\n\"; 109 \"Value of maxpairs is too\n"
		"large to be achievable.\\\\n\" 110 \"Error reading thermodynamic\n"
		"parameters.\"\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"error:  is the integer error code provided by GetErrorCode() or by a\n"
		"call to a function that returns an error.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to a c string that provides an error message or from other\n"
		"functions that return integer error codes. \n"
		""},
	 { (char *)"Dynalign_object_SetProgress", (PyCFunction) _wrap_Dynalign_object_SetProgress, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"Dynalign_object::SetProgress(TProgressDialog &Progress)\n"
		"\n"
		"Provide a TProgressDialog for following calculation progress. A\n"
		"TProgressDialog class has a public function void update(int percent)\n"
		"that indicates the progress of a long calculation.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Progress:  is a TProgressDialog class. \n"
		""},
	 { (char *)"Dynalign_object_StopProgress", _wrap_Dynalign_object_StopProgress, METH_VARARGS, (char *)"\n"
		"void\n"
		"Dynalign_object::StopProgress()\n"
		"\n"
		"Provide a means to stop using a TProgressDialog. StopProgress tells\n"
		"the RNA class to no longer follow progress. This should be called if\n"
		"the TProgressDialog is deleted, so that this class does not make\n"
		"reference to it. \n"
		""},
	 { (char *)"delete_Dynalign_object", _wrap_delete_Dynalign_object, METH_VARARGS, (char *)"Dynalign_object::~Dynalign_object() "},
	 { (char *)"Dynalign_object_swigregister", Dynalign_object_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Multilign_object", _wrap_new_Multilign_object, METH_VARARGS, (char *)"\n"
		"Multilign_object::Multilign_object(const bool Multifind, const string\n"
		"&outputmultifind, const vector< string > &ctfiles, TProgressDialog\n"
		"*progress=NULL, const bool isrna=true) \n"
		""},
	 { (char *)"delete_Multilign_object", _wrap_delete_Multilign_object, METH_VARARGS, (char *)"Multilign_object::~Multilign_object() "},
	 { (char *)"Multilign_object_CountBP", (PyCFunction) _wrap_Multilign_object_CountBP, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Multilign_object::CountBP(const int i=0, const int j=0, const double\n"
		"percent=0.8) const\n"
		"\n"
		"count the number of basepairs with the lowest free energies below the\n"
		"percent of the miminal free energy. Dsv file is used for the counting.\n"
		"By default, the first dsv file in the progressive dynalign\n"
		"calculations is used, i.e. i = 0 and j = 0.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  is an int value indicating which one in the iteration.\n"
		"\n"
		"j:  is an int value indicating which iteration.\n"
		"\n"
		"percent:  is threshold of double value in percentage.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an int of the number of basepairs counted. \n"
		""},
	 { (char *)"Multilign_object_ProgressiveMultilign", (PyCFunction) _wrap_Multilign_object_ProgressiveMultilign, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Multilign_object::ProgressiveMultilign(const short int\n"
		"numProcessors=1, const bool Dsv=1, const bool Ali=1, const short int\n"
		"maxtrace=750, const short int bpwin=2, const short int awin=1, const\n"
		"short int percent=20, const short int imaxseparation=-99, const float\n"
		"gap=0.4, const bool singleinsert=true, const short int\n"
		"singlefold_subopt_percent=30, const bool local=false)\n"
		"\n"
		"The core function doing dynalign calculation and templating In case of\n"
		"error, the function returns a non-zero that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Dsv:  is a boolean value indicating to output pairwise dsv files or\n"
		"not. It has to be set to true currently.\n"
		"\n"
		"Ali:  is a boolean value indicating to output pairwise ali files or\n"
		"not. It has to be set to true currently.\n"
		"\n"
		"maxtrace:  is the maximum number of common structures to be\n"
		"determined.\n"
		"\n"
		"bpwin:  the the base pair window parameter, where 0 allows the\n"
		"structures to have similar pairs and larger windows make the\n"
		"structures more diverse.\n"
		"\n"
		"awin:  is the alignment window parameter, where 0 allows the\n"
		"alignments to be similar and larger values make the alignments more\n"
		"diverse.\n"
		"\n"
		"percent:  is the maximum percent difference in total folding free\n"
		"energy change above the lowest for suboptimal common structures.\n"
		"\n"
		"imaxseparation:  is the maximum separation between aligned\n"
		"nucleotides. Values >= 0 are the traditional parameter, those below\n"
		"zero trigger the HMM alignment method, which is now prefered.\n"
		"\n"
		"gap:  is the cost of adding gap nucleotides in the alignment in\n"
		"kcal/mol.\n"
		"\n"
		"singleinsert:  is whether single basepair inserts are allowed in one\n"
		"sequence vs the other.\n"
		"\n"
		"singlefold_subopt_percent:  is the maximum % difference of folding\n"
		"energy above the lowest free energy structure for pairs in single\n"
		"sequence folding that will be allowed in the dynalign calculation.\n"
		"\n"
		"local:  is whether Dynalign is being run in local (true) or global\n"
		"mode (false).\n"
		"\n"
		"numProcessors:  is the number of processors to use for the\n"
		"calculation. This requires a compilation for SMP.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an int that indicates an error code (0 = no error, non-zero = error\n"
		"occurred). \n"
		""},
	 { (char *)"Multilign_object_MultiTempMultilign", _wrap_Multilign_object_MultiTempMultilign, METH_VARARGS, (char *)"\n"
		"int\n"
		"Multilign_object::MultiTempMultilign() \n"
		""},
	 { (char *)"Multilign_object_WriteAlignment", (PyCFunction) _wrap_Multilign_object_WriteAlignment, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Multilign_object::WriteAlignment(const string allali=\"all.ali\")\n"
		"const\n"
		"\n"
		"calculate and output multiple alignment\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"allali:  is the output filename of multiple alignment\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an int of error code. \n"
		""},
	 { (char *)"Multilign_object_GetErrorCode", _wrap_Multilign_object_GetErrorCode, METH_VARARGS, (char *)"\n"
		"int\n"
		"Multilign_object::GetErrorCode() const\n"
		"\n"
		"Return an error code, where a return of zero is no error.\n"
		"\n"
		"This function returns and error flag that is generated during\n"
		"construction by RNA(const char &filename, const int type, const bool\n"
		"IsRNA=true) or from CalculateFreeEnergy(). An error of zero is always\n"
		"no error. Other codes are errors and a c-string can be fetched for the\n"
		"error with GetErrorMessage().\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that provides the error code. \n"
		""},
	 { (char *)"Multilign_object_GetErrorMessage", (PyCFunction) _wrap_Multilign_object_GetErrorMessage, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"string\n"
		"Multilign_object::GetErrorMessage(const int error) const\n"
		"\n"
		"Return error messages based on code from GetErrorCode and other error\n"
		"codes. 0 = no error 1000 = Error associated with sequence 1 or with a\n"
		"procedure, function will get message from sequence 1 (the inherited\n"
		"RNA class). 2000 = Error associated with sequence 2, function will get\n"
		"message from sequence 2 (the RNA2 class). 3000 = Errors with each\n"
		"sequence, function will get messages from each.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"error:  is the integer error code provided by GetErrorCode().\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A string that provides an error message or from other functions that\n"
		"return integer error codes. \n"
		""},
	 { (char *)"Multilign_object_GetErrorDetails", _wrap_Multilign_object_GetErrorDetails, METH_VARARGS, NULL},
	 { (char *)"Multilign_object_ResetError", _wrap_Multilign_object_ResetError, METH_VARARGS, NULL},
	 { (char *)"Multilign_object_SetMaxPairs", (PyCFunction) _wrap_Multilign_object_SetMaxPairs, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Multilign_object::SetMaxPairs(const int maxpairs=-1)\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"maxpairs:  is int value defining how the MaxPairs will be set. By\n"
		"default it is set to be -1, meaning the average length of all the\n"
		"sequences.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an errorcode. \n"
		""},
	 { (char *)"Multilign_object_GetMaxPairs", _wrap_Multilign_object_GetMaxPairs, METH_VARARGS, (char *)"\n"
		"int\n"
		"Multilign_object::GetMaxPairs() const\n"
		"\n"
		"get the value of MaxPairs\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"the value of MaxPairs \n"
		""},
	 { (char *)"Multilign_object_AverageLength", _wrap_Multilign_object_AverageLength, METH_VARARGS, (char *)"\n"
		"int\n"
		"Multilign_object::AverageLength() const\n"
		"\n"
		"get the average length of the input sequences\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"the average length of the input sequences. \n"
		""},
	 { (char *)"Multilign_object_SetIterations", (PyCFunction) _wrap_Multilign_object_SetIterations, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Multilign_object::SetIterations(const int it=2)\n"
		"\n"
		"set the value of iterations\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"it:  is an value of int assigned to iterations. By default it is set\n"
		"to 2.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an errorcode \n"
		""},
	 { (char *)"Multilign_object_GetIterations", _wrap_Multilign_object_GetIterations, METH_VARARGS, (char *)"\n"
		"int\n"
		"Multilign_object::GetIterations() const\n"
		"\n"
		"get the value of iterations\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"the value of iterations. \n"
		""},
	 { (char *)"Multilign_object_SetMaxDsv", (PyCFunction) _wrap_Multilign_object_SetMaxDsv, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Multilign_object::SetMaxDsv(const float maxdsvchange=1)\n"
		"\n"
		"set the value of MaxDsv/maxdsvchange\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"maxdsvchange:  is a value of float assigned to MaxDsv. By default it\n"
		"is set to 1.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an errorcode \n"
		""},
	 { (char *)"Multilign_object_GetMaxDsv", _wrap_Multilign_object_GetMaxDsv, METH_VARARGS, (char *)"\n"
		"float\n"
		"Multilign_object::GetMaxDsv() const\n"
		"\n"
		"get the value of MaxDsv/maxdsvchange\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"the value of MaxDsv/maxdsvchange. \n"
		""},
	 { (char *)"Multilign_object_GetSequenceNumber", _wrap_Multilign_object_GetSequenceNumber, METH_VARARGS, (char *)"\n"
		"int\n"
		"Multilign_object::GetSequenceNumber() const\n"
		"\n"
		"get the sequence number\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"the number of input sequences \n"
		""},
	 { (char *)"Multilign_object_SetIndexSeq", _wrap_Multilign_object_SetIndexSeq, METH_VARARGS, (char *)"\n"
		"int\n"
		"Multilign_object::SetIndexSeq(const string seqname)\n"
		"\n"
		"an overloaded function accepting a string as its parameter.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"seqname:  is the seq filename that will be set as the index sequence.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an int value of ErrorCode \n"
		""},
	 { (char *)"Multilign_object_GetIndexSeq", _wrap_Multilign_object_GetIndexSeq, METH_VARARGS, (char *)"\n"
		"string\n"
		"Multilign_object::GetIndexSeq() const\n"
		"\n"
		"return the filename of the index seq.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"a string of index seq filename. \n"
		""},
	 { (char *)"Multilign_object_Randomize", _wrap_Multilign_object_Randomize, METH_VARARGS, (char *)"\n"
		"void\n"
		"Multilign_object::Randomize()\n"
		"\n"
		"randomize the order of inputList. \n"
		""},
	 { (char *)"Multilign_object_AddOneInput", (PyCFunction) _wrap_Multilign_object_AddOneInput, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Multilign_object::AddOneInput(const string seq, const string ct, const\n"
		"string constraint=\"\", const string shape=\"\")\n"
		"\n"
		"add one entry into inputList.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"seq:  is a string value of sequence filename to be appended1\n"
		"\n"
		"ct:  is a string value of corresponding ct filename\n"
		"\n"
		"constraint:  is a string value of corresponding constraint filename.\n"
		"By default, it is empty, meaning no folding constraint exists\n"
		"\n"
		"shape:  is string value of corresponding SHAPE filename. By default,\n"
		"it is empty, meaning no SHAPE exists.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"a is int value of ErrorCode \n"
		""},
	 { (char *)"Multilign_object_RemoveOneInput", (PyCFunction) _wrap_Multilign_object_RemoveOneInput, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Multilign_object::RemoveOneInput(const string seq)\n"
		"\n"
		"remove one entry from inputList.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"seq:  is a string value of sequence filename of which the entry in\n"
		"inputList will be removed\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"a int value of ErrorCode \n"
		""},
	 { (char *)"Multilign_object_SetSHAPESlope", (PyCFunction) _wrap_Multilign_object_SetSHAPESlope, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"Multilign_object::SetSHAPESlope(const double slope=1.8)\n"
		"\n"
		"set the slope parameter for SHAPE\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"slope:  is a double value assigned to SHAPESlope. By default, it is\n"
		"set to 1.8. \n"
		""},
	 { (char *)"Multilign_object_GetSHAPESlope", _wrap_Multilign_object_GetSHAPESlope, METH_VARARGS, (char *)"\n"
		"double\n"
		"Multilign_object::GetSHAPESlope() const\n"
		"\n"
		"get the SHAPESlope\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"a SHAPESlope of double value. \n"
		""},
	 { (char *)"Multilign_object_SetSHAPEIntercept", (PyCFunction) _wrap_Multilign_object_SetSHAPEIntercept, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"Multilign_object::SetSHAPEIntercept(const double intercept=-0.6)\n"
		"\n"
		"set the intercept parameter for SHAPE.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"intercept:  is a double value assigned to SHAPEIntercept. By default,\n"
		"it is set to -0.6. \n"
		""},
	 { (char *)"Multilign_object_GetSHAPEIntercept", _wrap_Multilign_object_GetSHAPEIntercept, METH_VARARGS, (char *)"\n"
		"double\n"
		"Multilign_object::GetSHAPEIntercept() const\n"
		"\n"
		"get the SHAPEIntercept.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"SHAPEIntercept of double value. \n"
		""},
	 { (char *)"Multilign_object_SetTemperature", (PyCFunction) _wrap_Multilign_object_SetTemperature, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"Multilign_object::SetTemperature(const double temp=310.15)\n"
		"\n"
		"set the temperature to fold the sequences.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"temp:  is a double value of temperature; by default it is set to\n"
		"310.15K \n"
		""},
	 { (char *)"Multilign_object_GetTemperature", _wrap_Multilign_object_GetTemperature, METH_VARARGS, (char *)"\n"
		"double\n"
		"Multilign_object::GetTemperature() const\n"
		"\n"
		"get the temperature to fold the sequences\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"a double value of the set temperature. \n"
		""},
	 { (char *)"Multilign_object_CleanupIntermediateFiles", _wrap_Multilign_object_CleanupIntermediateFiles, METH_VARARGS, (char *)"\n"
		"int Multilign_object::CleanupIntermediateFiles() const\n"
		"\n"
		"delete intermediate pairwise dsv and aout files\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"an int value of error code. \n"
		""},
	 { (char *)"Multilign_object_SetProgress", (PyCFunction) _wrap_Multilign_object_SetProgress, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"Multilign_object::SetProgress(TProgressDialog *Progress=NULL)\n"
		"\n"
		"Provide a TProgressDialog for following calculation progress.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"Progress:  is a pointer to TProgressDialog \n"
		""},
	 { (char *)"Multilign_object_StopProgress", _wrap_Multilign_object_StopProgress, METH_VARARGS, (char *)"\n"
		"void\n"
		"Multilign_object::StopProgress()\n"
		"\n"
		"Provide a means to stop using a TProgressDialog by assigning NULL to\n"
		"progress pointer. \n"
		""},
	 { (char *)"Multilign_object_GetProgress", _wrap_Multilign_object_GetProgress, METH_VARARGS, (char *)"\n"
		"TProgressDialog\n"
		"* Multilign_object::GetProgress() const\n"
		"\n"
		"get the progress\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"the pointer to TProgressDialog \n"
		""},
	 { (char *)"Multilign_object_GetInputFilenames", _wrap_Multilign_object_GetInputFilenames, METH_VARARGS, (char *)"\n"
		"void\n"
		"Multilign_object::GetInputFilenames()\n"
		"\n"
		"For diagnostic purpose only. Output the input sequence, ct,\n"
		"constraints, and SHAPE filenames to stdout.\n"
		"\n"
		"The following functions are used for Diagnostic purpose only\n"
		"//////////// Generally not needed, but for debugging input. \n"
		""},
	 { (char *)"Multilign_object_GetPairs", _wrap_Multilign_object_GetPairs, METH_VARARGS, (char *)"\n"
		"void\n"
		"Multilign_object::GetPairs()\n"
		"\n"
		"For diagnostic purpose only. Output the paired sequence filenames to\n"
		"stdout. \n"
		""},
	 { (char *)"Multilign_object_get_energies", _wrap_Multilign_object_get_energies, METH_VARARGS, (char *)"\n"
		"vector<float>\n"
		"Multilign_object::get_energies() \n"
		""},
	 { (char *)"Multilign_object_get_dGIndex", _wrap_Multilign_object_get_dGIndex, METH_VARARGS, (char *)"\n"
		"vector<float>\n"
		"Multilign_object::get_dGIndex() \n"
		""},
	 { (char *)"Multilign_object_get_pair_alignments", _wrap_Multilign_object_get_pair_alignments, METH_VARARGS, (char *)"vector<vector<string> > Multilign_object::get_pair_alignments() "},
	 { (char *)"Multilign_object_swigregister", Multilign_object_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Oligowalk_object", _wrap_new_Oligowalk_object, METH_VARARGS, (char *)"\n"
		"Oligowalk_object::Oligowalk_object(const bool IsRNA=true)\n"
		"\n"
		"Default Constructor - user provides nothing.\n"
		"\n"
		"This constructor calls the underlying RNA(IsRNA=true) constructor.\n"
		"This basic constructor is provided for performing OligoScreen\n"
		"calculations, which do not need an input sequence. This constructor\n"
		"needs to be called with RNA=true for Oligos to be RNA and RNA=false\n"
		"for Oligos to be DNA.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"IsRNA:  is a bool where true= RNA and false=DNA. \n"
		""},
	 { (char *)"Oligowalk_object_Oligowalk", (PyCFunction) _wrap_Oligowalk_object_Oligowalk, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Oligowalk_object::Oligowalk(const int oligo_length, const bool isDNA,\n"
		"const int option, const double oligo_concentration, const int usesub,\n"
		"const int start, const int stop)\n"
		"\n"
		"Perform an OligoWalk calculation. Note that this can only be performed\n"
		"once.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"oligo_length:  is an int that gives the length of the\n"
		"oligonucleotides.\n"
		"\n"
		"isDNA:  is a bool that indicates the oligonucleotide chemistry, where\n"
		"true = DNA and false = RNA.\n"
		"\n"
		"option:  is an int that gives the calculation type, where option 1 =\n"
		"break local target structure to bind oligo, option 2 = refold target\n"
		"RNA after oligo binding, and option 3 = no target structure\n"
		"considered.\n"
		"\n"
		"oligo_concentration:  is a double that indicates the oligonucleotide\n"
		"concentration in M.\n"
		"\n"
		"usesub:  is an int that indicates whether suboptimal structures are to\n"
		"be used, where 0 = none and 3 = use heuristic method.\n"
		"\n"
		"start:  is an int that indicates the starting location of the walk.\n"
		"\n"
		"stop:  is an int that indicates the ending location of the walk.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString(), 0 = no error. \n"
		""},
	 { (char *)"Oligowalk_object_GetBreakTargetDG", (PyCFunction) _wrap_Oligowalk_object_GetBreakTargetDG, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"Oligowalk_object::GetBreakTargetDG(const int index)\n"
		"\n"
		"Get the breaking target DG for a given nucleotide. This can only be\n"
		"called after performing a valid OligoWalk calculation. In case of\n"
		"error, the function returns a free energy change of zero. Note!: That\n"
		"a free energy change of zero is also a valid folding free energy\n"
		"change. Errors will also generate an internal error code, accessible\n"
		"with GetErrorCode().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"index:  is an int that specifies the 5' end of an oligonucleotide\n"
		"binding site on the target.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the free energy change in kcal/mol. \n"
		""},
	 { (char *)"Oligowalk_object_GetDuplexDG", (PyCFunction) _wrap_Oligowalk_object_GetDuplexDG, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"Oligowalk_object::GetDuplexDG(const int index)\n"
		"\n"
		"Get the duplex DG for a given nucleotide. This can only be called\n"
		"after performing a valid OligoWalk calculation. In case of error, the\n"
		"function returns a free energy change of zero. Note!: That a free\n"
		"energy change of zero is also a valid folding free energy change.\n"
		"Errors will also generate an internal error code, accessible with\n"
		"GetErrorCode().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"index:  is an int that specifies the 5' end of an oligonucleotide\n"
		"binding site on the target.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the free energy change in kcal/mol. \n"
		""},
	 { (char *)"Oligowalk_object_GetOligoOligoDG", (PyCFunction) _wrap_Oligowalk_object_GetOligoOligoDG, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"Oligowalk_object::GetOligoOligoDG(const int index)\n"
		"\n"
		"Get the bimolecular oligo-oligo DG for a given nucleotide. This can\n"
		"only be called after performing a valid OligoWalk calculation. In case\n"
		"of error, the function returns a free energy change of zero. Note!:\n"
		"That a free energy change of zero is also a valid folding free energy\n"
		"change. Errors will also generate an internal error code, accessible\n"
		"with GetErrorCode().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"index:  is an int that specifies the 5' end of an oligonucleotide\n"
		"binding site on the target.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the free energy change in kcal/mol. \n"
		""},
	 { (char *)"Oligowalk_object_GetOligoSelfDG", (PyCFunction) _wrap_Oligowalk_object_GetOligoSelfDG, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"Oligowalk_object::GetOligoSelfDG(const int index)\n"
		"\n"
		"Get the oligo-self DG for a given nucleotide. This can only be called\n"
		"after performing a valid OligoWalk calculation. In case of error, the\n"
		"function returns a free energy change of zero. Note!: That a free\n"
		"energy change of zero is also a valid folding free energy change.\n"
		"Errors will also generate an internal error code, accessible with\n"
		"GetErrorCode().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"index:  is an int that specifies the 5' end of an oligonucleotide\n"
		"binding site on the target.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the free energy change in kcal/mol. \n"
		""},
	 { (char *)"Oligowalk_object_GetOverallDG", (PyCFunction) _wrap_Oligowalk_object_GetOverallDG, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"Oligowalk_object::GetOverallDG(const int index)\n"
		"\n"
		"Get the overall DG for a given nucleotide. This can only be called\n"
		"after performing a valid OligoWalk calculation. In case of error, the\n"
		"function returns a free energy change of zero. Note!: That a free\n"
		"energy change of zero is also a valid folding free energy change.\n"
		"Errors will also generate an internal error code, accessible with\n"
		"GetErrorCode().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"index:  is an int that specifies the 5' end of an oligonucleotide\n"
		"binding site on the target.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the free energy change in kcal/mol. \n"
		""},
	 { (char *)"Oligowalk_object_GetTm", (PyCFunction) _wrap_Oligowalk_object_GetTm, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"Oligowalk_object::GetTm(const int index)\n"
		"\n"
		"Get the Tm for a given nucleotide. This can only be called after\n"
		"performing a valid OligoWalk calculation. In case of error, the\n"
		"function returns a free energy change of zero. Note!: That a free\n"
		"energy change of zero is also a valid folding free energy change.\n"
		"Errors will also generate an internal error code, accessible with\n"
		"GetErrorCode().\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"index:  is an int that specifies the 5' end of an oligonucleotide\n"
		"binding site on the target.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double that is the Tm in degrees C. \n"
		""},
	 { (char *)"Oligowalk_object_WriteReport", (PyCFunction) _wrap_Oligowalk_object_WriteReport, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Oligowalk_object::WriteReport(const char outputfilename[], const int\n"
		"oligo_length, const bool isDNA, const int option, const double\n"
		"oligo_concentration, const int usesub, const int start, const int\n"
		"stop)\n"
		"\n"
		"Write a report for an OligoWalk calculation. This must be called after\n"
		"performing a valid OligoWalk calculation.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"outputfilename:  is a c-string that provides a filename to which the\n"
		"report will be written.\n"
		"\n"
		"oligo_length:  is an int that gives the length of the\n"
		"oligonucleotides.\n"
		"\n"
		"isDNA:  is a bool that indicates the oligonucleotide chemistry, where\n"
		"true = DNA and false = RNA.\n"
		"\n"
		"option:  is an int that gives the calculation type, where option 1 =\n"
		"break local target structure to bind oligo, option 2 = refold target\n"
		"RNA after oligo binding, and option 3 = no target structure\n"
		"considered.\n"
		"\n"
		"oligo_concentration:  is a double that indicates the oligonucleotide\n"
		"concentration in M.\n"
		"\n"
		"usesub:  is an int that indicates whether suboptimal structures are to\n"
		"be used, where 0 = none and 3 = use heuristic method.\n"
		"\n"
		"start:  is an int that indicates the starting location of the walk.\n"
		"\n"
		"stop:  is an int that indicates the ending location of the walk.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An integer that indicates an error code that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString(), 0 = no error. \n"
		""},
	 { (char *)"Oligowalk_object_OligoScreen", (PyCFunction) _wrap_Oligowalk_object_OligoScreen, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"int\n"
		"Oligowalk_object::OligoScreen(const char infilename[], const char\n"
		"outfilename[])\n"
		"\n"
		"This function runs OligoScreen.\n"
		"\n"
		"Read a list of oligonucleotides in infilename and output thermodynamic\n"
		"characteristics in outfilename. The backbone type is set when the\n"
		"constructor is called. Note that oligoscreen has no target sequence,\n"
		"so the default constructor OligoWalk(bool IsRNA) should be used.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"infilename:  is a c-string that indicates the filename to be read.\n"
		"\n"
		"outfilename:  is a c-string that indicates the name of an output file\n"
		"to be written with report.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"An int that indicates an error code that can be parsed by\n"
		"GetErrorMessage() or GetErrorMessageString(), 0 = no error. \n"
		""},
	 { (char *)"Oligowalk_object_GetErrorMessage", (PyCFunction) _wrap_Oligowalk_object_GetErrorMessage, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"char *\n"
		"Oligowalk_object::GetErrorMessage(const int error)\n"
		"\n"
		"Return error messages based on code from GetErrorCode and other error\n"
		"codes. 100 = no OligoWalk data present 101 = OligoWalk has already\n"
		"been performed other codes are handled by the RNA base class function\n"
		"GetErrorMessage.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"error:  is the integer error code provided by GetErrorCode()/\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A pointer to a c string that provides an error message or from other\n"
		"functions that return integer error codes. \n"
		""},
	 { (char *)"delete_Oligowalk_object", _wrap_delete_Oligowalk_object, METH_VARARGS, (char *)"\n"
		"Oligowalk_object::~Oligowalk_object()\n"
		"\n"
		"This is the destructor. \n"
		""},
	 { (char *)"Oligowalk_object_swigregister", Oligowalk_object_swigregister, METH_VARARGS, NULL},
	 { (char *)"hairpin_t_probability_set", _wrap_hairpin_t_probability_set, METH_VARARGS, NULL},
	 { (char *)"hairpin_t_probability_get", _wrap_hairpin_t_probability_get, METH_VARARGS, NULL},
	 { (char *)"hairpin_t_i_set", _wrap_hairpin_t_i_set, METH_VARARGS, NULL},
	 { (char *)"hairpin_t_i_get", _wrap_hairpin_t_i_get, METH_VARARGS, NULL},
	 { (char *)"hairpin_t_j_set", _wrap_hairpin_t_j_set, METH_VARARGS, NULL},
	 { (char *)"hairpin_t_j_get", _wrap_hairpin_t_j_get, METH_VARARGS, NULL},
	 { (char *)"new_hairpin_t", _wrap_new_hairpin_t, METH_VARARGS, (char *)"C++ includes: ProbScan.h "},
	 { (char *)"delete_hairpin_t", _wrap_delete_hairpin_t, METH_VARARGS, NULL},
	 { (char *)"hairpin_t_swigregister", hairpin_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_probability_set", _wrap_internal_loop_t_probability_set, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_probability_get", _wrap_internal_loop_t_probability_get, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_i_set", _wrap_internal_loop_t_i_set, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_i_get", _wrap_internal_loop_t_i_get, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_j_set", _wrap_internal_loop_t_j_set, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_j_get", _wrap_internal_loop_t_j_get, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_k_set", _wrap_internal_loop_t_k_set, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_k_get", _wrap_internal_loop_t_k_get, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_l_set", _wrap_internal_loop_t_l_set, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_l_get", _wrap_internal_loop_t_l_get, METH_VARARGS, NULL},
	 { (char *)"new_internal_loop_t", _wrap_new_internal_loop_t, METH_VARARGS, (char *)"C++ includes: ProbScan.h "},
	 { (char *)"delete_internal_loop_t", _wrap_delete_internal_loop_t, METH_VARARGS, NULL},
	 { (char *)"internal_loop_t_swigregister", internal_loop_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"basestack_t_probability_set", _wrap_basestack_t_probability_set, METH_VARARGS, NULL},
	 { (char *)"basestack_t_probability_get", _wrap_basestack_t_probability_get, METH_VARARGS, NULL},
	 { (char *)"basestack_t_i_set", _wrap_basestack_t_i_set, METH_VARARGS, NULL},
	 { (char *)"basestack_t_i_get", _wrap_basestack_t_i_get, METH_VARARGS, NULL},
	 { (char *)"basestack_t_j_set", _wrap_basestack_t_j_set, METH_VARARGS, NULL},
	 { (char *)"basestack_t_j_get", _wrap_basestack_t_j_get, METH_VARARGS, NULL},
	 { (char *)"basestack_t_k_set", _wrap_basestack_t_k_set, METH_VARARGS, NULL},
	 { (char *)"basestack_t_k_get", _wrap_basestack_t_k_get, METH_VARARGS, NULL},
	 { (char *)"basestack_t_l_set", _wrap_basestack_t_l_set, METH_VARARGS, NULL},
	 { (char *)"basestack_t_l_get", _wrap_basestack_t_l_get, METH_VARARGS, NULL},
	 { (char *)"new_basestack_t", _wrap_new_basestack_t, METH_VARARGS, (char *)"C++ includes: ProbScan.h "},
	 { (char *)"delete_basestack_t", _wrap_delete_basestack_t, METH_VARARGS, NULL},
	 { (char *)"basestack_t_swigregister", basestack_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"multibranch_loop_t_probability_set", _wrap_multibranch_loop_t_probability_set, METH_VARARGS, NULL},
	 { (char *)"multibranch_loop_t_probability_get", _wrap_multibranch_loop_t_probability_get, METH_VARARGS, NULL},
	 { (char *)"multibranch_loop_t_branches_set", _wrap_multibranch_loop_t_branches_set, METH_VARARGS, NULL},
	 { (char *)"multibranch_loop_t_branches_get", _wrap_multibranch_loop_t_branches_get, METH_VARARGS, NULL},
	 { (char *)"new_multibranch_loop_t", _wrap_new_multibranch_loop_t, METH_VARARGS, (char *)"C++ includes: ProbScan.h "},
	 { (char *)"delete_multibranch_loop_t", _wrap_delete_multibranch_loop_t, METH_VARARGS, NULL},
	 { (char *)"multibranch_loop_t_swigregister", multibranch_loop_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"hairpin", (PyCFunction) _wrap_hairpin, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hairpin_t hairpin(double p, int i,\n"
		"int j) \n"
		""},
	 { (char *)"internal_loop", (PyCFunction) _wrap_internal_loop, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"internal_loop_t\n"
		"internal_loop(double p, int i, int j, int k, int l) \n"
		""},
	 { (char *)"basestack", (PyCFunction) _wrap_basestack, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"basestack_t basestack(double p, int\n"
		"i, int j, int k, int l) \n"
		""},
	 { (char *)"multibranch_loop", (PyCFunction) _wrap_multibranch_loop, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"multibranch_loop_t\n"
		"multibranch_loop(int i, int j) \n"
		""},
	 { (char *)"add_branch", (PyCFunction) _wrap_add_branch, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void add_branch(multibranch_loop_t\n"
		"&mb, int k, int l) \n"
		""},
	 { (char *)"show_hairpins", (PyCFunction) _wrap_show_hairpins, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void show_hairpins(vector<\n"
		"hairpin_t >) \n"
		""},
	 { (char *)"show_stacks", (PyCFunction) _wrap_show_stacks, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void show_stacks(vector<\n"
		"basestack_t >) \n"
		""},
	 { (char *)"show_internal_loops", (PyCFunction) _wrap_show_internal_loops, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"show_internal_loops(vector< internal_loop_t >) \n"
		""},
	 { (char *)"show_bulge_loops", (PyCFunction) _wrap_show_bulge_loops, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"show_bulge_loops(vector< internal_loop_t >) \n"
		""},
	 { (char *)"show_mbl", (PyCFunction) _wrap_show_mbl, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void show_mbl(multibranch_loop_t\n"
		"mbl) \n"
		""},
	 { (char *)"mb_element_i_set", _wrap_mb_element_i_set, METH_VARARGS, NULL},
	 { (char *)"mb_element_i_get", _wrap_mb_element_i_get, METH_VARARGS, NULL},
	 { (char *)"mb_element_j_set", _wrap_mb_element_j_set, METH_VARARGS, NULL},
	 { (char *)"mb_element_j_get", _wrap_mb_element_j_get, METH_VARARGS, NULL},
	 { (char *)"mb_element_is_a_pair_set", _wrap_mb_element_is_a_pair_set, METH_VARARGS, NULL},
	 { (char *)"mb_element_is_a_pair_get", _wrap_mb_element_is_a_pair_get, METH_VARARGS, NULL},
	 { (char *)"new_mb_element", _wrap_new_mb_element, METH_VARARGS, (char *)"mb_element::mb_element(int nuc) "},
	 { (char *)"delete_mb_element", _wrap_delete_mb_element, METH_VARARGS, NULL},
	 { (char *)"mb_element_swigregister", mb_element_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ProbScan", _wrap_new_ProbScan, METH_VARARGS, (char *)"\n"
		"ProbScan::ProbScan(const\n"
		"char filename[], bool from_sequence_file, bool isRNA=true)\n"
		"\n"
		"Constructor - user provides a filename for existing file as a c\n"
		"string.\n"
		"\n"
		"The existing file, specified by filename, can either be a ct file, a\n"
		"sequence, or an RNAstructure save file. Therefore, the user provides a\n"
		"flag for the file: type = 1 => .ct file, type = 2 => .seq file, type =\n"
		"3 => partition function save (.pfs) file, type = 4 => folding save\n"
		"file (.sav). If the input file is ont a partition function save file,\n"
		"the partition function will be calculated. If the sequence is long,\n"
		"this may take some time. This constructor generates internal error\n"
		"codes that can be accessed by GetErrorCode() after the constructor is\n"
		"called. 0 = no error. The errorcode can be resolved to a c string\n"
		"using GetErrorMessage. Note that the contructor needs to be explicitly\n"
		"told, via IsRNA, what the backbone is because files do not store this\n"
		"information. Note also that save files explicitly store the\n"
		"thermodynamic parameters, therefore changing the backbone type as\n"
		"compaared to the original calculation will not change structure\n"
		"predictions.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"filename:  is null terminated c string containing the path to the\n"
		"input file.\n"
		"\n"
		"from_sequence_file:  is a bool which tells the constructor whether we\n"
		"are initializing from a sequence file, in which case the partition\n"
		"function must be calculated\n"
		"\n"
		"isRNA:  is a bool that indicates whether this sequence is RNA or DNA.\n"
		"true= RNA. false=DNA. Default is true. \n"
		""},
	 { (char *)"ProbScan_probability_of_hairpin", (PyCFunction) _wrap_ProbScan_probability_of_hairpin, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"ProbScan::probability_of_hairpin(int i, int j)\n"
		"\n"
		"Returns probability of a hairpin closed at a specific position.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  The 5' nucleotide closing the hairpin\n"
		"\n"
		"j:  The 3' nucleotide closing the hairpin\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double containing the probability of the hairpin \n"
		""},
	 { (char *)"ProbScan_probability_of_all_hairpins", (PyCFunction) _wrap_ProbScan_probability_of_all_hairpins, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"vector<\n"
		"hairpin_t > ProbScan::probability_of_all_hairpins(int min, int max,\n"
		"double threshold)\n"
		"\n"
		"Calculates the probabilities of all possible hairpins in this\n"
		"sequence.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"min:  The minimum size of a hairpin\n"
		"\n"
		"max:  The maximum size of a hairpin\n"
		"\n"
		"threshold:  The minimum probability for candidate hairpins\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A vector of hairpin objects, containing the positions of the hairpins\n"
		"and their probabilities \n"
		""},
	 { (char *)"ProbScan_probability_of_internal_loop", (PyCFunction) _wrap_ProbScan_probability_of_internal_loop, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"ProbScan::probability_of_internal_loop(int i, int j, int k, int l)\n"
		"\n"
		"Returns probability of an internal loop or bulge loop closed at a\n"
		"specific position.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  The 5' nucleotide closing the loop on the exterior\n"
		"\n"
		"j:  The 3' nucleotide closing the loop on the exterior\n"
		"\n"
		"k:  The 5' nucleotide closing the loop on the interior\n"
		"\n"
		"l:  The 3' nucleotide closing the loop on the interior\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double containing the probability of the internal loop \n"
		""},
	 { (char *)"ProbScan_probability_of_all_internal_loops", (PyCFunction) _wrap_ProbScan_probability_of_all_internal_loops, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"vector< internal_loop_t >\n"
		"ProbScan::probability_of_all_internal_loops(double threshold,\n"
		"std::string mode=std::string(\"both\"))\n"
		"\n"
		"Calculates the probabilities of all possible internal loops and/or\n"
		"bulge loops in this sequence.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"threshold:  the minimum probability of candidate loops\n"
		"\n"
		"mode:  a string which indicates what type of loops should be searched\n"
		"for. Allowed values are \"internal\", \"bulge\", and \"both\"\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A vector of internal loop objects, containing the positions of the\n"
		"loops and their probabilities \n"
		""},
	 { (char *)"ProbScan_probability_of_stack", (PyCFunction) _wrap_ProbScan_probability_of_stack, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"ProbScan::probability_of_stack(int i, int j)\n"
		"\n"
		"Calculates probability of a base pair stack closed at a specific\n"
		"position Note that this is a special case of probability_of_helix\n"
		"where the size is set to 1\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  The 5' nucleotide closing the stack\n"
		"\n"
		"j:  The 3' nucleotide closing the stack\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double containing the probability of the stack \n"
		""},
	 { (char *)"ProbScan_probability_of_helix", (PyCFunction) _wrap_ProbScan_probability_of_helix, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double\n"
		"ProbScan::probability_of_helix(const int i, const int j, const int\n"
		"how_many_stacks)\n"
		"\n"
		"Calculates probability of an helix at a specific position.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"i:  The 5' nucleotide closing the helix on the exterior\n"
		"\n"
		"j:  The 3' nucleotide closing the helix on the exterior\n"
		"\n"
		"how_many_stacks:  The number of base pair STACKS in the helix (this is\n"
		"the number of pairs minus 1)\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double containing the probability of the helix \n"
		""},
	 { (char *)"ProbScan_probability_of_all_helices", (PyCFunction) _wrap_ProbScan_probability_of_all_helices, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"std::vector< basestack_t > ProbScan::probability_of_all_helices(double\n"
		"threshold, int length)\n"
		"\n"
		"Calculates the probabilities of all possible helices in this sequence\n"
		"of a specific length.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"threshold:  the minimum probability of candidate helices\n"
		"\n"
		"length:  the number of base pair stacks to search for\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A vector of helix objects, containing the positions of the helices and\n"
		"their probabilities \n"
		""},
	 { (char *)"ProbScan_probability_of_multibranch_loop", (PyCFunction) _wrap_ProbScan_probability_of_multibranch_loop, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"double ProbScan::probability_of_multibranch_loop(const\n"
		"multibranch_loop_t &mb)\n"
		"\n"
		"Calculates probability of a multibranch loop at a specific position.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"mb:  A multibranch loop object, containing a vector of pairs\n"
		"describing the multibranch loop. These can be created with the\n"
		"multibranch_loop function. See the text interface for the ProbScan\n"
		"program for an example of usage.\n"
		"\n"
		"Returns:\n"
		"--------\n"
		"\n"
		"A double containing the probability of the multibranch loop \n"
		""},
	 { (char *)"delete_ProbScan", _wrap_delete_ProbScan, METH_VARARGS, NULL},
	 { (char *)"ProbScan_swigregister", ProbScan_swigregister, METH_VARARGS, NULL},
	 { (char *)"show_mb_element_array", (PyCFunction) _wrap_show_mb_element_array, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void\n"
		"show_mb_element_array(vector< mb_element >) \n"
		""},
	 { (char *)"HairpinLoopVector_iterator", _wrap_HairpinLoopVector_iterator, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector___nonzero__", _wrap_HairpinLoopVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector___bool__", _wrap_HairpinLoopVector___bool__, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector___len__", _wrap_HairpinLoopVector___len__, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector___getslice__", (PyCFunction) _wrap_HairpinLoopVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HairpinLoopVector___setslice__", _wrap_HairpinLoopVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector___delslice__", (PyCFunction) _wrap_HairpinLoopVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HairpinLoopVector___delitem__", _wrap_HairpinLoopVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector___getitem__", _wrap_HairpinLoopVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector___setitem__", _wrap_HairpinLoopVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_pop", _wrap_HairpinLoopVector_pop, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_append", (PyCFunction) _wrap_HairpinLoopVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HairpinLoopVector_empty", _wrap_HairpinLoopVector_empty, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_size", _wrap_HairpinLoopVector_size, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_swap", (PyCFunction) _wrap_HairpinLoopVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HairpinLoopVector_begin", _wrap_HairpinLoopVector_begin, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_end", _wrap_HairpinLoopVector_end, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_rbegin", _wrap_HairpinLoopVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_rend", _wrap_HairpinLoopVector_rend, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_clear", _wrap_HairpinLoopVector_clear, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_get_allocator", _wrap_HairpinLoopVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_pop_back", _wrap_HairpinLoopVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_erase", _wrap_HairpinLoopVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_HairpinLoopVector", _wrap_new_HairpinLoopVector, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_push_back", (PyCFunction) _wrap_HairpinLoopVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HairpinLoopVector_front", _wrap_HairpinLoopVector_front, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_back", _wrap_HairpinLoopVector_back, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_assign", (PyCFunction) _wrap_HairpinLoopVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HairpinLoopVector_resize", _wrap_HairpinLoopVector_resize, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_insert", _wrap_HairpinLoopVector_insert, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_reserve", (PyCFunction) _wrap_HairpinLoopVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HairpinLoopVector_capacity", _wrap_HairpinLoopVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_HairpinLoopVector", _wrap_delete_HairpinLoopVector, METH_VARARGS, NULL},
	 { (char *)"HairpinLoopVector_swigregister", HairpinLoopVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_iterator", _wrap_InternalLoopVector_iterator, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector___nonzero__", _wrap_InternalLoopVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector___bool__", _wrap_InternalLoopVector___bool__, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector___len__", _wrap_InternalLoopVector___len__, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector___getslice__", (PyCFunction) _wrap_InternalLoopVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"InternalLoopVector___setslice__", _wrap_InternalLoopVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector___delslice__", (PyCFunction) _wrap_InternalLoopVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"InternalLoopVector___delitem__", _wrap_InternalLoopVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector___getitem__", _wrap_InternalLoopVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector___setitem__", _wrap_InternalLoopVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_pop", _wrap_InternalLoopVector_pop, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_append", (PyCFunction) _wrap_InternalLoopVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"InternalLoopVector_empty", _wrap_InternalLoopVector_empty, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_size", _wrap_InternalLoopVector_size, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_swap", (PyCFunction) _wrap_InternalLoopVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"InternalLoopVector_begin", _wrap_InternalLoopVector_begin, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_end", _wrap_InternalLoopVector_end, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_rbegin", _wrap_InternalLoopVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_rend", _wrap_InternalLoopVector_rend, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_clear", _wrap_InternalLoopVector_clear, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_get_allocator", _wrap_InternalLoopVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_pop_back", _wrap_InternalLoopVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_erase", _wrap_InternalLoopVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_InternalLoopVector", _wrap_new_InternalLoopVector, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_push_back", (PyCFunction) _wrap_InternalLoopVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"InternalLoopVector_front", _wrap_InternalLoopVector_front, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_back", _wrap_InternalLoopVector_back, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_assign", (PyCFunction) _wrap_InternalLoopVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"InternalLoopVector_resize", _wrap_InternalLoopVector_resize, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_insert", _wrap_InternalLoopVector_insert, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_reserve", (PyCFunction) _wrap_InternalLoopVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"InternalLoopVector_capacity", _wrap_InternalLoopVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_InternalLoopVector", _wrap_delete_InternalLoopVector, METH_VARARGS, NULL},
	 { (char *)"InternalLoopVector_swigregister", InternalLoopVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_iterator", _wrap_MultibranchLoopVector_iterator, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector___nonzero__", _wrap_MultibranchLoopVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector___bool__", _wrap_MultibranchLoopVector___bool__, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector___len__", _wrap_MultibranchLoopVector___len__, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector___getslice__", (PyCFunction) _wrap_MultibranchLoopVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultibranchLoopVector___setslice__", _wrap_MultibranchLoopVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector___delslice__", (PyCFunction) _wrap_MultibranchLoopVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultibranchLoopVector___delitem__", _wrap_MultibranchLoopVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector___getitem__", _wrap_MultibranchLoopVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector___setitem__", _wrap_MultibranchLoopVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_pop", _wrap_MultibranchLoopVector_pop, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_append", (PyCFunction) _wrap_MultibranchLoopVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultibranchLoopVector_empty", _wrap_MultibranchLoopVector_empty, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_size", _wrap_MultibranchLoopVector_size, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_swap", (PyCFunction) _wrap_MultibranchLoopVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultibranchLoopVector_begin", _wrap_MultibranchLoopVector_begin, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_end", _wrap_MultibranchLoopVector_end, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_rbegin", _wrap_MultibranchLoopVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_rend", _wrap_MultibranchLoopVector_rend, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_clear", _wrap_MultibranchLoopVector_clear, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_get_allocator", _wrap_MultibranchLoopVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_pop_back", _wrap_MultibranchLoopVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_erase", _wrap_MultibranchLoopVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_MultibranchLoopVector", _wrap_new_MultibranchLoopVector, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_push_back", (PyCFunction) _wrap_MultibranchLoopVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultibranchLoopVector_front", _wrap_MultibranchLoopVector_front, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_back", _wrap_MultibranchLoopVector_back, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_assign", (PyCFunction) _wrap_MultibranchLoopVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultibranchLoopVector_resize", _wrap_MultibranchLoopVector_resize, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_insert", _wrap_MultibranchLoopVector_insert, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_reserve", (PyCFunction) _wrap_MultibranchLoopVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultibranchLoopVector_capacity", _wrap_MultibranchLoopVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_MultibranchLoopVector", _wrap_delete_MultibranchLoopVector, METH_VARARGS, NULL},
	 { (char *)"MultibranchLoopVector_swigregister", MultibranchLoopVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_iterator", _wrap_BaseStackVector_iterator, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector___nonzero__", _wrap_BaseStackVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector___bool__", _wrap_BaseStackVector___bool__, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector___len__", _wrap_BaseStackVector___len__, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector___getslice__", (PyCFunction) _wrap_BaseStackVector___getslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BaseStackVector___setslice__", _wrap_BaseStackVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector___delslice__", (PyCFunction) _wrap_BaseStackVector___delslice__, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BaseStackVector___delitem__", _wrap_BaseStackVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector___getitem__", _wrap_BaseStackVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector___setitem__", _wrap_BaseStackVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_pop", _wrap_BaseStackVector_pop, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_append", (PyCFunction) _wrap_BaseStackVector_append, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BaseStackVector_empty", _wrap_BaseStackVector_empty, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_size", _wrap_BaseStackVector_size, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_swap", (PyCFunction) _wrap_BaseStackVector_swap, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BaseStackVector_begin", _wrap_BaseStackVector_begin, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_end", _wrap_BaseStackVector_end, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_rbegin", _wrap_BaseStackVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_rend", _wrap_BaseStackVector_rend, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_clear", _wrap_BaseStackVector_clear, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_get_allocator", _wrap_BaseStackVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_pop_back", _wrap_BaseStackVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_erase", _wrap_BaseStackVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_BaseStackVector", _wrap_new_BaseStackVector, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_push_back", (PyCFunction) _wrap_BaseStackVector_push_back, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BaseStackVector_front", _wrap_BaseStackVector_front, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_back", _wrap_BaseStackVector_back, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_assign", (PyCFunction) _wrap_BaseStackVector_assign, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BaseStackVector_resize", _wrap_BaseStackVector_resize, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_insert", _wrap_BaseStackVector_insert, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_reserve", (PyCFunction) _wrap_BaseStackVector_reserve, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BaseStackVector_capacity", _wrap_BaseStackVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_BaseStackVector", _wrap_delete_BaseStackVector, METH_VARARGS, NULL},
	 { (char *)"BaseStackVector_swigregister", BaseStackVector_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Oligowalk_objectTo_p_RNA(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RNA *)  ((Oligowalk_object *) x));
}
static void *_p_ProbScanTo_p_RNA(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RNA *)  ((ProbScan *) x));
}
static void *_p_HybridRNATo_p_RNA(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RNA *)  ((HybridRNA *) x));
}
static void *_p_RNATo_p_Thermodynamics(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Thermodynamics *)  ((RNA *) x));
}
static void *_p_Oligowalk_objectTo_p_Thermodynamics(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Thermodynamics *) (RNA *) ((Oligowalk_object *) x));
}
static void *_p_ProbScanTo_p_Thermodynamics(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Thermodynamics *) (RNA *) ((ProbScan *) x));
}
static void *_p_HybridRNATo_p_Thermodynamics(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Thermodynamics *) (RNA *) ((HybridRNA *) x));
}
static void *_p_Dynalign_objectTo_p_TwoRNA(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TwoRNA *)  ((Dynalign_object *) x));
}
static swig_type_info _swigt__p_CTCommentProvider = {"_p_CTCommentProvider", "CTCommentProvider *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DotBracketFormat = {"_p_DotBracketFormat", "DotBracketFormat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dynalign_object = {"_p_Dynalign_object", "Dynalign_object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HybridRNA = {"_p_HybridRNA", "HybridRNA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Multilign_object = {"_p_Multilign_object", "Multilign_object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Oligowalk_object = {"_p_Oligowalk_object", "Oligowalk_object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProbScan = {"_p_ProbScan", "ProbScan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProgressHandler = {"_p_ProgressHandler", "ProgressHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RNA = {"_p_RNA", "RNA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RestraintType = {"_p_RestraintType", "RestraintType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RsampleData = {"_p_RsampleData", "RsampleData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Thermodynamics = {"_p_Thermodynamics", "Thermodynamics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TwoRNA = {"_p_TwoRNA", "TwoRNA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bp = {"_p_bp", "std::vector< bp >::value_type *|basestack_t *|bp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_datatable = {"_p_datatable", "datatable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hp = {"_p_hp", "std::vector< hp >::value_type *|hp *|hairpin_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_il = {"_p_il", "std::vector< il >::value_type *|il *|internal_loop_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "RNAInputType *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mb = {"_p_mb", "std::vector< mb >::value_type *|multibranch_loop_t *|mb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mb_element = {"_p_mb_element", "mb_element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_bp_t = {"_p_std__allocatorT_bp_t", "std::vector< bp >::allocator_type *|std::allocator< bp > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_hp_t = {"_p_std__allocatorT_hp_t", "std::allocator< hp > *|std::vector< hp >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_il_t = {"_p_std__allocatorT_il_t", "std::allocator< il > *|std::vector< il >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_mb_t = {"_p_std__allocatorT_mb_t", "std::vector< mb >::allocator_type *|std::allocator< mb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_int_int_t_t = {"_p_std__allocatorT_std__pairT_int_int_t_t", "std::allocator< std::pair< int,int > > *|std::vector< std::pair< int,int > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t = {"_p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t", "std::allocator< std::vector< std::string,std::allocator< std::string > > > *|std::vector< std::vector< std::string > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int_int_t = {"_p_std__pairT_int_int_t", "std::pair< int,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bp_std__allocatorT_bp_t_t = {"_p_std__vectorT_bp_std__allocatorT_bp_t_t", "std::vector< bp,std::allocator< bp > > *|std::vector< bp > *|std::vector< basestack_t,std::allocator< basestack_t > > *|std::vector< basestack_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "vector< double,std::allocator< double > > *|vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float > *|std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_hp_std__allocatorT_hp_t_t = {"_p_std__vectorT_hp_std__allocatorT_hp_t_t", "std::vector< hp > *|std::vector< hp,std::allocator< hp > > *|std::vector< hairpin_t,std::allocator< hairpin_t > > *|std::vector< hairpin_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_il_std__allocatorT_il_t_t = {"_p_std__vectorT_il_std__allocatorT_il_t_t", "std::vector< il > *|std::vector< internal_loop_t,std::allocator< internal_loop_t > > *|std::vector< il,std::allocator< il > > *|std::vector< internal_loop_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mb_element_std__allocatorT_mb_element_t_t = {"_p_std__vectorT_mb_element_std__allocatorT_mb_element_t_t", "std::vector< mb_element,std::allocator< mb_element > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_mb_std__allocatorT_mb_t_t = {"_p_std__vectorT_mb_std__allocatorT_mb_t_t", "std::vector< mb,std::allocator< mb > > *|std::vector< mb > *|std::vector< multibranch_loop_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t = {"_p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t", "std::vector< std::pair< int,int > > *|std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t", "std::vector< std::vector< std::string > > *|std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *|std::vector< std::vector< std::string,std::allocator< std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_structure = {"_p_structure", "structure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CTCommentProvider,
  &_swigt__p_DotBracketFormat,
  &_swigt__p_Dynalign_object,
  &_swigt__p_HybridRNA,
  &_swigt__p_Multilign_object,
  &_swigt__p_Oligowalk_object,
  &_swigt__p_ProbScan,
  &_swigt__p_ProgressHandler,
  &_swigt__p_RNA,
  &_swigt__p_RestraintType,
  &_swigt__p_RsampleData,
  &_swigt__p_Thermodynamics,
  &_swigt__p_TwoRNA,
  &_swigt__p_allocator_type,
  &_swigt__p_bp,
  &_swigt__p_char,
  &_swigt__p_datatable,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_first_type,
  &_swigt__p_hp,
  &_swigt__p_il,
  &_swigt__p_int,
  &_swigt__p_mb,
  &_swigt__p_mb_element,
  &_swigt__p_p_PyObject,
  &_swigt__p_second_type,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_bp_t,
  &_swigt__p_std__allocatorT_hp_t,
  &_swigt__p_std__allocatorT_il_t,
  &_swigt__p_std__allocatorT_mb_t,
  &_swigt__p_std__allocatorT_std__pairT_int_int_t_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__pairT_int_int_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_bp_std__allocatorT_bp_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_hp_std__allocatorT_hp_t_t,
  &_swigt__p_std__vectorT_il_std__allocatorT_il_t_t,
  &_swigt__p_std__vectorT_mb_element_std__allocatorT_mb_element_t_t,
  &_swigt__p_std__vectorT_mb_std__allocatorT_mb_t_t,
  &_swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  &_swigt__p_structure,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_CTCommentProvider[] = {  {&_swigt__p_CTCommentProvider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DotBracketFormat[] = {  {&_swigt__p_DotBracketFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dynalign_object[] = {  {&_swigt__p_Dynalign_object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HybridRNA[] = {  {&_swigt__p_HybridRNA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Multilign_object[] = {  {&_swigt__p_Multilign_object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Oligowalk_object[] = {  {&_swigt__p_Oligowalk_object, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProbScan[] = {  {&_swigt__p_ProbScan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProgressHandler[] = {  {&_swigt__p_ProgressHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RNA[] = {  {&_swigt__p_Oligowalk_object, _p_Oligowalk_objectTo_p_RNA, 0, 0},  {&_swigt__p_RNA, 0, 0, 0},  {&_swigt__p_ProbScan, _p_ProbScanTo_p_RNA, 0, 0},  {&_swigt__p_HybridRNA, _p_HybridRNATo_p_RNA, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RestraintType[] = {  {&_swigt__p_RestraintType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RsampleData[] = {  {&_swigt__p_RsampleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Thermodynamics[] = {  {&_swigt__p_Thermodynamics, 0, 0, 0},  {&_swigt__p_Oligowalk_object, _p_Oligowalk_objectTo_p_Thermodynamics, 0, 0},  {&_swigt__p_RNA, _p_RNATo_p_Thermodynamics, 0, 0},  {&_swigt__p_ProbScan, _p_ProbScanTo_p_Thermodynamics, 0, 0},  {&_swigt__p_HybridRNA, _p_HybridRNATo_p_Thermodynamics, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TwoRNA[] = {  {&_swigt__p_TwoRNA, 0, 0, 0},  {&_swigt__p_Dynalign_object, _p_Dynalign_objectTo_p_TwoRNA, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bp[] = {  {&_swigt__p_bp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_datatable[] = {  {&_swigt__p_datatable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hp[] = {  {&_swigt__p_hp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_il[] = {  {&_swigt__p_il, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mb[] = {  {&_swigt__p_mb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mb_element[] = {  {&_swigt__p_mb_element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_bp_t[] = {  {&_swigt__p_std__allocatorT_bp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_hp_t[] = {  {&_swigt__p_std__allocatorT_hp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_il_t[] = {  {&_swigt__p_std__allocatorT_il_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_mb_t[] = {  {&_swigt__p_std__allocatorT_mb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_int_int_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_int_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int_int_t[] = {  {&_swigt__p_std__pairT_int_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bp_std__allocatorT_bp_t_t[] = {  {&_swigt__p_std__vectorT_bp_std__allocatorT_bp_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_hp_std__allocatorT_hp_t_t[] = {  {&_swigt__p_std__vectorT_hp_std__allocatorT_hp_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_il_std__allocatorT_il_t_t[] = {  {&_swigt__p_std__vectorT_il_std__allocatorT_il_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mb_element_std__allocatorT_mb_element_t_t[] = {  {&_swigt__p_std__vectorT_mb_element_std__allocatorT_mb_element_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_mb_std__allocatorT_mb_t_t[] = {  {&_swigt__p_std__vectorT_mb_std__allocatorT_mb_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_structure[] = {  {&_swigt__p_structure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CTCommentProvider,
  _swigc__p_DotBracketFormat,
  _swigc__p_Dynalign_object,
  _swigc__p_HybridRNA,
  _swigc__p_Multilign_object,
  _swigc__p_Oligowalk_object,
  _swigc__p_ProbScan,
  _swigc__p_ProgressHandler,
  _swigc__p_RNA,
  _swigc__p_RestraintType,
  _swigc__p_RsampleData,
  _swigc__p_Thermodynamics,
  _swigc__p_TwoRNA,
  _swigc__p_allocator_type,
  _swigc__p_bp,
  _swigc__p_char,
  _swigc__p_datatable,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_first_type,
  _swigc__p_hp,
  _swigc__p_il,
  _swigc__p_int,
  _swigc__p_mb,
  _swigc__p_mb_element,
  _swigc__p_p_PyObject,
  _swigc__p_second_type,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_bp_t,
  _swigc__p_std__allocatorT_hp_t,
  _swigc__p_std__allocatorT_il_t,
  _swigc__p_std__allocatorT_mb_t,
  _swigc__p_std__allocatorT_std__pairT_int_int_t_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__pairT_int_int_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_bp_std__allocatorT_bp_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_hp_std__allocatorT_hp_t_t,
  _swigc__p_std__vectorT_il_std__allocatorT_il_t_t,
  _swigc__p_std__vectorT_mb_element_std__allocatorT_mb_element_t_t,
  _swigc__p_std__vectorT_mb_std__allocatorT_mb_t_t,
  _swigc__p_std__vectorT_std__pairT_int_int_t_std__allocatorT_std__pairT_int_int_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  _swigc__p_structure,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "TOLERANCE",SWIG_From_double(static_cast< double >(0.01)));
  SWIG_Python_SetConstant(d, "SEQUENCE_STRING",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "FILE_CT",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FILE_SEQ",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "FILE_PFS",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "FILE_SAV",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "FILE_DBN",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "COMPOUNDMESSAGELENGTH",SWIG_From_int(static_cast< int >(200)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

