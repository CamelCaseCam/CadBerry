CadBerry/Threading/ThreadPool.h
###############################
CadBerry's thread pool implementation. If there's two or fewer threads available on the device, it will create one worker thread. Otherwise, it 
will leave two threads free for other tasks and create a worker thread per additional thread (keep in mind, CadBerry is designed for genetic 
engineering, so it might need all those threads). 

The thread pool has three task levels:

1. Priority tasks - these tasks will be run as soon as a thread becomes available.
2. Standard tasks - these tasks will be run as soon as a thread becomes available and all the priority tasks have been run. 
3. Background tasks - these tasks will be run if there aren't any other tasks to avoid idle threads. One thread will always wait for new tasks, so background tasks will only be run if your system has more than 4 threads (it probably should)

Imports
=======
* :doc:`/API/cdbpch.h`
* BlockingCollection.h (outside library)
* :doc:`/API/CadBerry/Core.h`
* thread
* atomic

ThreadPool class
================
Functions
---------
Constructor
^^^^^^^^^^^
The thread pool constructor is private, to enforce the fact that you really shouldn't be creating it using new. If you want to create the thread 
pool, call the Get() function. This will create a new thread pool if one doesn't already exist. 

Destructor
^^^^^^^^^^
Gets the threads to finish their current task and exit. You can call this function by deleting the thread pool, but you really shouldn't. Instead, 
call CompleteTasksAndDelete, which completes any queued tasks and then deletes the thread pool.

static ThreadPool* Get()
^^^^^^^^^^^^^^^^^^^^^^^^
If a thread pool exists it returns a pointer to that pool, otherwise it creates a new thread pool. 

void CompleteTasksAndDelete()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Prevents new tasks from being added to the thread pool, completes any queued tasks (excluding background tasks), and frees all the threads. 

bool AddStandardTask(std::function<void()> Func)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Adds a standard task to the task queue and returns whether the task was successfully added. If the thread pool is closed, it will return false

bool AddPriorityTask(std::function<void()> Func)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Adds a priority task to the task queue and returns whether the task was successfully added. If the thread pool is closed, it will return false

bool AddBackgroundTask(std::function<void()> Func)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Adds a background task to the task queue and returns whether the task was successfully added. If the thread pool is closed, it will return false. 
Keep in mind, there's no guarantee that background tasks will ever be evaluated. This is more "do this if you have time"

void MaintainThread()
^^^^^^^^^^^^^^^^^^^^^
While the thread pool is running, does the following:

1. Checks if there's a priority task. If there is, it runs the task and goes back to the start of the loop
2. Checks if there's a standard task (waits up to 50 milliseconds for a task). If there is, it runs the task and goes back to the start of the loop
3. Checks if the thread pool is open. If it isn't, the thread exits
4. Checks if a thread is waiting for tasks. If one isn't it waits 25 milliseconds for a priority task and 25 milliseconds for a standard task and goes back to the start of the loop
5. Checks if there's a background task (waits up to 150 milliseconds for a task). If there is, it runs the task and goes back to the start of the loop

Fields
------
bool EndThreads
^^^^^^^^^^^^^^^
Should the threads immediately exit after finishing their current task?

bool IsOpen
^^^^^^^^^^^
Is the thread pool accepting new tasks?

std::atomic<bool> IsWaiting
^^^^^^^^^^^^^^^^^^^^^^^^^^^
atomic bool saying whether a thread is waiting for new tasks

unsigned int NumAvailableThreads
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The number of threads available on the device

static ThreadPool* Pool
^^^^^^^^^^^^^^^^^^^^^^^
The thread pool

code_machina::BlockingCollection<std::function<void()>> StandardTasks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Standard tasks queue

code_machina::BlockingCollection<std::function<void()>> PriorityTasks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Priority tasks queue

code_machina::BlockingCollection<std::function<void()>> BackgroundTasks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Background tasks queue

std::vector<std::thread> WorkerThreads
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
All the worker threads